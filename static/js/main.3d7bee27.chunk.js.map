{"version":3,"sources":["logo.svg","lookup/components.js","boilerStates/components.js","common/common.js","agileRates/components.js","currentStates/components.js","googleNest/components.js","consumptionHistory/components.js","consumptionHistory/index.js","serviceWorker.js","index.js"],"names":["module","exports","domain","window","location","host","APILookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","BoilerStateRow","props","boilerState","startTime","Date","start_time","endTime","end_time","diff","getTime","toFixed","dateOptions","timeOptions","toLocaleDateString","toLocaleTimeString","hot_water_state","heating_state","BoilerStateList","prop","useState","boilerStatesInit","setBoilerStatesInit","limit","useEffect","alert","spinnerEl","getElementById","innerHTML","map","index","key","startsWith","hideSpinner","id","AgileRateRow","rowColour","fontWeight","agileRate","todaysMin","tmrsMin","valid_from","valid_to","rate","timeNow","indexOf","className","AgileRateList","agileRatesInit","setAgileRatesInit","setTodaysMin","setTmrsMin","rates","agileRates","AgileRateCard","type","validFrom","todaysMinRateTime","tmrsMinRateTime","currentRate","nextTwoRates","todaysMinRate","tmrsMinRate","convertToDate","value","style","fontSize","join","populateCard","CategoryStatesBlock","colour","controlState","operationState","boostState","cat","controlText","catText","maxWidth","whiteSpace","onClick","event","preventDefault","target","blur","populateCurrentStates","class","OperationStateOnOffText","state","text","Tag","ReactDOM","render","setBoilerBlock","operation","control","hotWater","boost","heating","NestCard","ambientTemp","setAmbientTemp","thermostatTemp","setThermostatTemp","traits","role","LeccyUseRow","useBlock","interval_start","setMinutes","getMinutes","consumption","LeccyUseChart","useBlocks","width","height","stroke","dataKey","LeccyUseTable","Consumption","ToggleButtonGroup","defaultValue","onChange","val","ToggleButton","setState","leccyUse","this","ToggleButtonGroupControlled","Component","Boolean","hostname","match","appEl","boilerStateRows","boilerStateEl","agileRatesEl","agileRatesCardEl","nestCardEl","consumptionTableEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d7bee27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = window.location.host\r\n\r\nif (!domain.startsWith(\"http\")){\r\n  domain = `http://${domain}`\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n\r\nexport function APILookup(method, endpoint, callback, data){\r\n    let jsonData;\r\n    if (data){\r\n      jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `${domain}/api/${endpoint}`\r\n    \r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken){\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The current states request was an error\"}, 400)\r\n    }\r\n    \r\n    xhr.send(jsonData)\r\n\r\n}","import React, {useEffect, useState, Component} from 'react'\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function BoilerStateRow(props){\r\n    const {boilerState} = props\r\n    const startTime = new Date(boilerState.start_time)\r\n    const endTime = new Date(boilerState.end_time)\r\n    \r\n    //calcuating the difference in minutes and round to integers\r\n    var diff = endTime.getTime() - startTime.getTime()\r\n    diff = diff / 1000 / 60\r\n    diff = diff.toFixed(0)\r\n\r\n    let dateOptions = {'day':'numeric', 'month': 'short'}\r\n    let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n\r\n    return <tr>\r\n              <td>{startTime.toLocaleDateString('en-gb', dateOptions)} {startTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{endTime.toLocaleDateString('en-gb', dateOptions)} {endTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{diff}</td>\r\n              <td>{boilerState.hot_water_state ? \"ON\":\"OFF\"}</td>\r\n              <td>{boilerState.heating_state ? \"ON\":\"OFF\"}</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function BoilerStateList(prop){\r\n    const [boilerStatesInit, setBoilerStatesInit] = useState([])\r\n    const {limit} = prop\r\n    \r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setBoilerStatesInit(response)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n        //hide the spinner\r\n        const spinnerEl = document.getElementById('history-table-spinner')\r\n        if (spinnerEl){\r\n          spinnerEl.innerHTML = \"\"\r\n        }\r\n      }\r\n      APILookup('GET', `boilerStates/${limit}`, myCallback, limit)\r\n    }, [])\r\n      \r\n\r\n      return boilerStatesInit.map((boilerState, index)=>{\r\n        return <BoilerStateRow boilerState={boilerState} key={`${index}`}/>\r\n      })\r\n  }","export function hideSpinner(id){\r\n    const spinnerEl = document.getElementById(id)\r\n    \r\n    if (spinnerEl){\r\n        spinnerEl.innerHTML = \"\"\r\n    }\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {hideSpinner} from '../common'\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function AgileRateRow(props){\r\n    const {agileRate, todaysMin, tmrsMin} = props\r\n    const startTime = new Date(agileRate.valid_from)\r\n    const endTime = new Date(agileRate.valid_to)\r\n    const rate = agileRate.rate\r\n    const timeNow = new Date()\r\n\r\n    let dateOptions = {'weekday': 'short', 'day':'numeric', 'month': 'short'}\r\n    let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n    var rowColour, fontWeight\r\n    if (todaysMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'info'\r\n    } else if (tmrsMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'primary'\r\n    } else if (rate > 15){\r\n        rowColour = 'danger'\r\n    } else if (rate < 0){\r\n        rowColour = 'success'\r\n    } else if (timeNow > endTime){\r\n        rowColour = 'secondary'\r\n    } else if (timeNow < endTime && timeNow > startTime){\r\n        rowColour = 'light'\r\n        fontWeight = 'font-weight-bold'\r\n    }\r\n\r\n    return <tr className={`table-${rowColour}`}>\r\n                <td className={fontWeight}>\r\n                  {startTime.toLocaleDateString('en-gb', dateOptions)} {startTime.toLocaleTimeString('en-gb', timeOptions)}\r\n                </td>\r\n                <td className={fontWeight}>{endTime.toLocaleDateString('en-gb', dateOptions)} {endTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n                <td className={fontWeight}>{rate.toFixed(3)}p</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function AgileRateList(prop){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setAgileRatesInit(response.rates)\r\n            setTodaysMin(response.todaysMin)\r\n            setTmrsMin(response.tmrsMin)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n        \r\n        //hide the spinner\r\n        hideSpinner('agile-rates-table-spinner')\r\n      }\r\n      APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return agileRatesInit.map((agileRates, index)=>{\r\n        return <AgileRateRow agileRate={agileRates} \r\n                            todaysMin={todaysMin}\r\n                            tmrsMin={tmrsMin}                    \r\n                            key={`${index}`}/>\r\n    })\r\n  }\r\n\r\nexport function AgileRateCard(props){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    const {type} = props\r\n\r\n    const populateCard = (type) => {\r\n        //don't do anythin if no data has been received\r\n        if (agileRatesInit.length < 1){ return ''}\r\n        \r\n        //setting the min rate time\r\n        var todaysMinRateTime = new Date(todaysMin[0])\r\n        var tmrsMinRateTime = new Date(tmrsMin[0])\r\n\r\n        var timeNow = new Date()\r\n        var currentRate = 9999, validFrom, nextTwoRates = [9999, 9999]\r\n        for (var i = 0; i < agileRatesInit.length; i++){\r\n            var startTime = new Date(agileRatesInit[i].valid_from)\r\n            var endTime = new Date(agileRatesInit[i].valid_to)\r\n            //getting the current rate\r\n            if (startTime < timeNow && timeNow < endTime){\r\n                currentRate = agileRatesInit[i].rate\r\n                validFrom = new Date(agileRatesInit[i].valid_from)\r\n                //storing the next two rates\r\n                if (i < agileRatesInit.length - 1){\r\n                    nextTwoRates[0] = agileRatesInit[i+1].rate\r\n                }\r\n                if (i < agileRatesInit.length - 2){\r\n                    nextTwoRates[1] = agileRatesInit[i+2].rate\r\n                }\r\n            }\r\n\r\n            //getting today's and tmr's min rates\r\n            var todaysMinRate, tmrsMinRate\r\n            if (startTime.getTime() === todaysMinRateTime.getTime()){\r\n                todaysMinRate = agileRatesInit[i].rate\r\n            } else if (startTime.getTime() === tmrsMinRateTime.getTime()){\r\n                tmrsMinRate = agileRatesInit[i].rate\r\n            }\r\n        }\r\n\r\n        let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n        const convertToDate = (value) => {\r\n            const time = new Date(value)\r\n            return time.toLocaleTimeString('en-gb', timeOptions)\r\n        }\r\n\r\n        return ( type === 'homepage' ?\r\n        (<div>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Current</h4>\r\n                    <h5 className=\"lead\">{currentRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        since {validFrom.toLocaleTimeString('en-gb', timeOptions)}</span>\r\n                </div>\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Today's Lowest</h4>\r\n                    <h5 className=\"lead\">{todaysMinRate ? todaysMinRate.toFixed(3): ''}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        at {todaysMin.map(convertToDate).join()}</span>\r\n                </div>\r\n            </div>\r\n            <hr className=\"alert-dark my-4\"></hr>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Next Two</h4>\r\n                    { nextTwoRates[0] !== 9999 && <h5 className=\"lead\">{nextTwoRates[0].toFixed(3)}p</h5>}\r\n                    { nextTwoRates[1] !== 9999 && <h5 className=\"lead\">{nextTwoRates[1].toFixed(3)}p</h5>}\r\n                </div>\r\n                {tmrsMinRate && <div className='col-6'>\r\n                    <h4 className=\"display-6\">Tomorrow's Lowest</h4>\r\n                    <h5 className=\"lead\">{tmrsMinRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>at {tmrsMin.map(convertToDate).join()}</span>\r\n                </div>}\r\n            </div>\r\n        </div>) : (\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Current Rate</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{currentRate.toFixed(3)}p</h3>\r\n                        <h5>since {validFrom.toLocaleTimeString('en-gb', timeOptions)}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-titl mb-3\">Today's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{todaysMinRate ? todaysMinRate.toFixed(3) : ''}p</h3>\r\n                        <h5>at {todaysMin.map(convertToDate).join()}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Tomorrow's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{tmrsMinRate ? tmrsMinRate.toFixed(3) : ''}{tmrsMinRate && `p`}</h3>\r\n                        {tmrsMinRate && <h5>at {tmrsMin.map(convertToDate).join()}</h5>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n        )\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                setAgileRatesInit(response.rates)\r\n                setTodaysMin(response.todaysMin)\r\n                setTmrsMin(response.tmrsMin)\r\n                // populateCard()\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            hideSpinner('agile-rates-card-spinner')\r\n        }\r\n        APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return populateCard(type)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nfunction CategoryStatesBlock(props){\r\n\r\n    const {controlState, operationState, \r\n                          boostState, cat} = props\r\n    //setting colours depending on boost states\r\n    var colour\r\n    if (boostState || operationState){\r\n        colour = 'danger'\r\n    } else if (controlState){\r\n        colour = 'warning'\r\n    } else{\r\n        colour = 'success'\r\n    }\r\n\r\n    var catText = cat === \"heating\" ? \"Heating\":'Water' \r\n    var controlText\r\n    if(boostState){\r\n        controlText = \"Boost\\nOn\"\r\n    } else if (!controlState){\r\n        controlText = 'Control\\nOff'\r\n    } else if (cat === 'hotWater'){\r\n        controlText = 'Scheduled\\nControl'\r\n    } else {\r\n        controlText = 'Thermostat\\nControl'\r\n    }\r\n\r\n    const buttonOnClickEvent = (event) =>{\r\n        event.preventDefault()\r\n        // remove focus on button\r\n        event.target.blur()\r\n        var data = {'device': cat, 'state': !controlState}\r\n        //callback for then the state change POST method has returned\r\n        const returnCallBack = (response, status) =>{\r\n            if (status === 201){\r\n                APILookup('GET', 'currentStates', populateCurrentStates, {})\r\n            } else {\r\n                alert('State change failed')\r\n            }\r\n        }\r\n\r\n        APILookup('POST', 'currentStates/change', \r\n                            returnCallBack, data)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={`btn btn-block btn-${colour}`} style={{maxWidth:130, whiteSpace: \"pre-wrap\"}}\r\n                    onClick={buttonOnClickEvent}> \r\n                <h4 class=\"font-weight-bold alert-heading text-center pt-1\">{catText}</h4>\r\n                <hr className={`alert-${colour}`} />\r\n                <h6 className=\"text-center\">{controlText}</h6>\r\n                <hr className={`alert-${colour}`} />\r\n                <OperationStateOnOffText state={operationState} type={0}/>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction OperationStateOnOffText(props){\r\n    const { state, type } = props\r\n    var text = state ? \"ON\" : \"OFF\"\r\n    var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    const className = \"font-weight-bold text-center\"\r\n    return <Tag className={className}>{text}</Tag>\r\n}\r\n\r\n\r\nfunction setBoilerBlock(state){\r\n    //change the colour\r\n    var colour = state ? \"danger\" : \"success\"\r\n    const boilerStateEl = document.getElementById(\"boiler-operation-block\")\r\n    boilerStateEl.className = `alert alert-${colour}`\r\n    ReactDOM.render(<OperationStateOnOffText state={state} type={1}/>, \r\n                    document.getElementById(\"boiler-on-off-text\"))\r\n}\r\n\r\n\r\nexport function populateCurrentStates(response, status){\r\n    setBoilerBlock(response.operation[2])\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.hotWater.state} \r\n                                        operationState={response.operation[0]} \r\n                                        boostState={response.control.hotWater.boost} \r\n                                        cat={\"hotWater\"}/>, \r\n                        document.getElementById(\"hotWater-states-block\"));\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.heating.state} \r\n                                        operationState={response.operation[1]} \r\n                                        boostState={false} \r\n                                        cat={\"heating\"}/>, \r\n                        document.getElementById(\"heating-states-block\"));\r\n    \r\n    // useEffect(() => {\r\n    //   const myCallback = (response, status) =>{\r\n    //     if (status === 200) {\r\n    //       setBoilerBlock()\r\n    //       // setBoilerStatesInit(response)\r\n    //     } else {\r\n    //       alert(\"There was an error\")\r\n    //     }\r\n    //     const spinnerEl = document.getElementById('current-states-spinner')\r\n    //     if (spinnerEl){\r\n    //       spinnerEl.innerHTML = \"\"\r\n    //     }\r\n    //   }\r\n    //   getCurrentStates(myCallback)\r\n    //   }, [])\r\n      \r\n  }","import React, {useEffect, useState} from 'react'\r\nimport {APILookup} from '../lookup'\r\n// import InputSpinner from \"react-native-input-spinner\";\r\n\r\nexport function NestCard(props){\r\n    const [ambientTemp, setAmbientTemp] = useState([])\r\n    const [thermostatTemp, setThermostatTemp] = useState([])\r\n\r\n    const {type} = props\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                // console.log(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                setThermostatTemp(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                setAmbientTemp(response.traits[\"sdm.devices.traits.Temperature\"][\"ambientTemperatureCelsius\"])\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            \r\n        }\r\n        APILookup('GET', 'googleNest', myCallback)\r\n    }, [])\r\n\r\n    return ( typeof(ambientTemp) === 'number' ?\r\n        <div>\r\n            <h5>Ambient Temp:  {ambientTemp.toFixed(2)} </h5>\r\n            <h5>Thermostat Set Temp: {thermostatTemp.toFixed(2)}</h5>\r\n        </div>\r\n        : \r\n        <div class=\"text-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState, Component, Tooltip } from 'react'\r\nimport { ResponsiveContainer, BarChart , Bar, CartesianGrid, XAxis, YAxis } from 'recharts';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\n\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nfunction LeccyUseRow(props){\r\n    const {useBlock} = props\r\n    const startTime = new Date(useBlock.interval_start)\r\n    const endTime = new Date(useBlock.interval_start)\r\n    endTime.setMinutes( startTime.getMinutes() + 30 );\r\n\r\n    let dateOptions = {'day':'numeric', 'month': 'short'}\r\n    let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n\r\n    return <tr>\r\n              <td>{startTime.toLocaleDateString('en-gb', dateOptions)} {startTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{endTime.toLocaleDateString('en-gb', dateOptions)} {endTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{useBlock.rate.toFixed(3)}p</td>\r\n              <td>{useBlock.consumption}</td>\r\n              <td>{(useBlock.consumption * useBlock.rate).toFixed(2)}p</td>\r\n            </tr>\r\n}\r\n\r\nexport default class Consumption extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            useBlocks:[]\r\n        }    \r\n    }\r\n    \r\n    ToggleButtonGroupControlled() {\r\n        // const [value, setValue] = useState([1, 3]);\r\n        const value = 1\r\n        /*\r\n         * The second argument that will be passed to\r\n         * `handleChange` from `ToggleButtonGroup`\r\n         * is the SyntheticEvent object, but we are\r\n         * not using it in this example so we will omit it.\r\n         */\r\n        const handleChange = (val) => {console.log(val)};\r\n      \r\n        return (\r\n          <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={1} onChange={handleChange}>\r\n            <ToggleButton value={1}>Average</ToggleButton>\r\n            <ToggleButton value={2}>Sum</ToggleButton>\r\n          </ToggleButtonGroup>\r\n        );\r\n      }\r\n    \r\n\r\n    componentDidMount(){\r\n        //callback for when the use history has been loaded\r\n        const myCallback = (response, status) =>{\r\n          if (status === 200) {\r\n              this.setState({useBlocks:response.leccyUse})\r\n          } else {\r\n              alert(\"There was an error\")\r\n          }\r\n        }\r\n        //api call to retrieve the history\r\n        APILookup('GET', `consumptionHistory`, myCallback)\r\n    }\r\n\r\n    render(){\r\n        return ( this.state.useBlocks ?\r\n        (<div>\r\n            <div>\r\n                <LeccyUseChart useBlocks={this.state.useBlocks} />\r\n            </div>\r\n            <div className=\"my-3\">\r\n                {this.ToggleButtonGroupControlled()}\r\n            </div>\r\n            <LeccyUseTable useBlocks={this.state.useBlocks}/>\r\n        </div>) :(\r\n            <div className=\"text-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>)\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction LeccyUseChart(prop){\r\n    // const data = [{name: 'Page A', uv: 400, pv: 2400, amt: 2400}];\r\n    const {useBlocks} = prop\r\n\r\n    const chart = (\r\n    <ResponsiveContainer width=\"100%\" height={500}>\r\n    <BarChart data={useBlocks}>\r\n        <CartesianGrid stroke=\"#ccc\" />\r\n        <XAxis dataKey=\"interval_start\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Bar type=\"monotone\" dataKey=\"consumption\" stroke=\"#8884d8\" />\r\n    </BarChart >\r\n    </ResponsiveContainer>\r\n    );\r\n    \r\n    return chart\r\n}\r\n\r\nfunction LeccyUseTable(prop){\r\n    const {useBlocks} = prop\r\n    // const [leccyUseBlocks, setLeccyUseBlocks] = useState(useBlocks)\r\n\r\n    return ( useBlocks &&\r\n    <div class=\"row justify-content-center\">\r\n        <div class=\"col-12\">\r\n            <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                <table className=\"table table-striped\" style={{\"width\":\"100%\"}}>\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Start Time</th>\r\n                            <th>End Time</th>\r\n                            <th>Rate</th>\r\n                            <th>Units Used (kWh)</th>\r\n                            <th>Cost (p)</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {useBlocks.map((useBlock, index)=>{\r\n                        return <LeccyUseRow useBlock={useBlock} key={`${index}`}/>\r\n                    })}\r\n                    </tbody>\r\n                </table> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n  }","import Consumption from './components'\r\n\r\nexport default Consumption","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BoilerStateList } from './boilerStates'\nimport { AgileRateCard, AgileRateList } from './agileRates'\nimport { populateCurrentStates } from './currentStates';\nimport { APILookup } from './lookup'\nimport { NestCard } from './googleNest'\nimport Consumption from './consumptionHistory'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<Consumption />, appEl);\n}\n\nconst boilerStateRows = document.getElementById('boilerStateRows')\nif (boilerStateRows){\n  ReactDOM.render(<BoilerStateList limit={0}/>, boilerStateRows);\n  \n}\n\nconst boilerStateEl = document.getElementById('boilerStateCard')\nif (boilerStateEl){\n  ReactDOM.render(<BoilerStateList limit={5}/>, boilerStateEl);\n}\n\nconst agileRatesEl = document.getElementById('agileRateTable')\nif (agileRatesEl){\n  ReactDOM.render(<AgileRateList />, agileRatesEl);\n}\n\nvar agileRatesCardEl = document.getElementById('agile-rates-card')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'homepage'}/>, agileRatesCardEl);\n}\nagileRatesCardEl = document.getElementById('agile-rates-page-cards')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'top'}/>, agileRatesCardEl);\n}\nconst nestCardEl = document.getElementById('nest-card-content')\nif (nestCardEl){\n    ReactDOM.render(<NestCard />, nestCardEl);\n}\n\nconst currentStatesEl = document.getElementById('current-states-card-body')\nif (currentStatesEl){\n    APILookup('GET', 'currentStates', populateCurrentStates, {})\n}\n\nconst consumptionTableEl = document.getElementById('consumption-page')\nif (consumptionTableEl){\n    ReactDOM.render(<Consumption />, consumptionTableEl);\n}\n\n\n// const chartEl = document.getElementById('consumption-page-chart')\n// if (chartEl){\n//     ReactDOM.render(<LeccyUseChart />, chartEl);\n// }\n\n// const currentStatesEl = document.getElementById('current-states-card-body')\n// if (boilerStateEl){\n//   ReactDOM.render(<CurrentStatesCard />, currentStatesEl);\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}