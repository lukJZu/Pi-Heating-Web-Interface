{"version":3,"sources":["logo.svg","lookup/components.js","boilerStates/components.js","common/common.js","agileRates/components.js","currentStates/components.js","googleNest/components.js","consumptionHistory/sub-components.js","consumptionHistory/components.js","consumptionHistory/index.js","serviceWorker.js","index.js"],"names":["module","exports","domain","window","location","host","APILookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","BoilerStateRow","props","boilerState","startTime","moment","start_time","endTime","end_time","format","diff","hot_water_state","heating_state","BoilerStateList","prop","useState","boilerStatesInit","setBoilerStatesInit","limit","useEffect","alert","spinnerEl","getElementById","innerHTML","map","index","key","startsWith","hideSpinner","id","AgileRateRow","rowColour","fontWeight","agileRate","todaysMin","tmrsMin","valid_from","valid_to","rate","timeNow","indexOf","isAfter","isBetween","className","toFixed","AgileRateList","agileRatesInit","setAgileRatesInit","setTodaysMin","setTmrsMin","rates","agileRates","AgileRateCard","type","todaysMinRateTime","tmrsMinRateTime","currentRate","nextTwoRates","todaysMinRate","tmrsMinRate","currentValidFrom","isSame","style","fontSize","val","join","populateCard","CategoryStatesBlock","colour","controlState","operationState","boostState","cat","controlText","catText","maxWidth","whiteSpace","onClick","event","preventDefault","target","blur","populateCurrentStates","class","OperationStateOnOffText","state","text","Tag","ReactDOM","render","setBoilerBlock","operation","control","hotWater","boost","heating","NestCard","ambientTemp","setAmbientTemp","thermostatTemp","setThermostatTemp","traits","role","RangePicker","DatePicker","ChartButtonGroup","btnOptions","btnType","stateVar","onValueChange","chartTypeOptions","chartViewOptions","options","Object","entries","chartPlotOptions","value","ToggleButtonGroup","size","defaultValue","onChange","keys","idx","ToggleButton","label","CustomDateRangePicker","datesChanged","range","setState","dateRange","preSelection","buttonDateRangeClicked","subtract","set","max","datesLimit","prevProps","prevStates","this","align","inputReadOnly","disabledDate","current","Component","LeccyUseChart","barPlotOptions","chartType","chartView","width","height","stroke","dataKey","yAxisId","unit","orientation","y","strokeWidth","fill","content","CustomTooltip","active","payload","rateValueObj","find","mainValueObj","LeccyUseRow","dataPlot","costCellString","cost","x","consumption","avgRate","LeccyUseTable","dataPlots","rateHeader","unitHeader","costHeader","tableLayout","getActlDateRangeArray","startEndArray","viewRange","times","endDate","endOf","time","isBefore","add","push","Consumption","chartOptionChanged","stateArr","localStorage","setItem","processAnyViewTypeChange","chartBarPlot","prevNextClicked","newDateRange","btnID","addSubtractTime","date","newMaxDate","min","dateRangeElement","getItem","chartPlot","useBlocks","React","createRef","bind","xArray","weekdays","months","processAvgView","processActlView","dataPoint","hours","hour","minute","grouped3","d3","d","blockTime","groupedArr","get","v","grouped","dateFormat","dataBlock","filteredDates","obj","startOf","count","use","dateLimit","reverse","leccyUse","interval_start","dates","Button","ref","Boolean","hostname","match","appEl","boilerStateRows","boilerStateEl","agileRatesEl","agileRatesCardEl","nestCardEl","consumptionTableEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99d8deeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = window.location.host\r\n\r\nif (!domain.startsWith(\"http\")){\r\n  domain = `http://${domain}`\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n\r\nexport function APILookup(method, endpoint, callback, data){\r\n    let jsonData;\r\n    if (data){\r\n      jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `${domain}/api/${endpoint}`\r\n    \r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken){\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The current states request was an error\"}, 400)\r\n    }\r\n    \r\n    xhr.send(jsonData)\r\n\r\n}","import React, {useEffect, useState } from 'react'\r\nimport moment from 'moment';\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function BoilerStateRow(props){\r\n    const {boilerState} = props\r\n    const startTime = moment(boilerState.start_time)\r\n    const endTime = moment(boilerState.end_time)\r\n\r\n    return <tr>\r\n              <td>{startTime.format(\"DD MMM HH:mm\")}</td>\r\n              <td>{endTime.format(\"DD MMM HH:mm\")}</td>\r\n              <td>{endTime.diff(startTime, 'm')}</td>\r\n              <td>{boilerState.hot_water_state ? \"ON\":\"OFF\"}</td>\r\n              <td>{boilerState.heating_state ? \"ON\":\"OFF\"}</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function BoilerStateList(prop){\r\n    const [boilerStatesInit, setBoilerStatesInit] = useState([])\r\n    const {limit} = prop\r\n    \r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setBoilerStatesInit(response)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n        //hide the spinner\r\n        const spinnerEl = document.getElementById('history-table-spinner')\r\n        if (spinnerEl){\r\n          spinnerEl.innerHTML = \"\"\r\n        }\r\n      }\r\n      APILookup('GET', `boilerStates/${limit}`, myCallback, limit)\r\n    })\r\n      \r\n\r\n      return boilerStatesInit.map((boilerState, index)=>{\r\n        return <BoilerStateRow boilerState={boilerState} key={`${index}`}/>\r\n      })\r\n  }","export function hideSpinner(id){\r\n    const spinnerEl = document.getElementById(id)\r\n    \r\n    if (spinnerEl){\r\n        spinnerEl.innerHTML = \"\"\r\n    }\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {hideSpinner} from '../common'\r\nimport moment from 'moment';\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function AgileRateRow(props){\r\n    const {agileRate, todaysMin, tmrsMin} = props\r\n    const startTime = moment(agileRate.valid_from)\r\n    const endTime = moment(agileRate.valid_to)\r\n    const rate = agileRate.rate\r\n    const timeNow = moment()\r\n\r\n    var rowColour, fontWeight\r\n    if (todaysMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'info'\r\n    } else if (tmrsMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'primary'\r\n    } else if (rate > 15){\r\n        rowColour = 'danger'\r\n    } else if (rate < 0){\r\n        rowColour = 'success'\r\n    } else if (timeNow.isAfter(endTime)){\r\n        rowColour = 'secondary'\r\n    } else if (timeNow.isBetween(startTime, endTime)){\r\n        rowColour = 'light'\r\n        fontWeight = 'font-weight-bold'\r\n    }\r\n\r\n    return <tr className={`table-${rowColour}`}>\r\n                <td className={fontWeight}>\r\n                  {startTime.format(\"ddd DD MMM HH:mm\")}\r\n                </td>\r\n                <td className={fontWeight}>{endTime.format(\"ddd DD MMM HH:mm\")}</td>\r\n                <td className={fontWeight}>{rate.toFixed(3)}p</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function AgileRateList(prop){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setAgileRatesInit(response.rates)\r\n            setTodaysMin(response.todaysMin)\r\n            setTmrsMin(response.tmrsMin)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n        \r\n        //hide the spinner\r\n        hideSpinner('agile-rates-table-spinner')\r\n      }\r\n      APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return agileRatesInit.map((agileRates, index)=>{\r\n        return <AgileRateRow agileRate={agileRates} \r\n                            todaysMin={todaysMin}\r\n                            tmrsMin={tmrsMin}                    \r\n                            key={`${index}`}/>\r\n    })\r\n  }\r\n\r\nexport function AgileRateCard(props){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    const {type} = props\r\n\r\n    const populateCard = (type) => {\r\n        //don't do anythin if no data has been received\r\n        if (agileRatesInit.length < 1){ return ''}\r\n        \r\n        //setting the min rate time\r\n        var todaysMinRateTime = moment(todaysMin[0])\r\n        var tmrsMinRateTime = moment(tmrsMin[0])\r\n\r\n        var timeNow = moment()\r\n        var currentRate = 9999, nextTwoRates = [9999, 9999]\r\n        for (var i = 0; i < agileRatesInit.length; i++){\r\n            var startTime = moment(agileRatesInit[i].valid_from)\r\n            var endTime = moment(agileRatesInit[i].valid_to)\r\n            //getting the current rate\r\n            if (timeNow.isBetween(startTime, endTime)){\r\n                currentRate = agileRatesInit[i].rate\r\n                var currentValidFrom = moment(agileRatesInit[i].valid_from)\r\n                //storing the next two rates\r\n                if (i < agileRatesInit.length - 1){\r\n                    nextTwoRates[0] = agileRatesInit[i+1].rate\r\n                }\r\n                if (i < agileRatesInit.length - 2){\r\n                    nextTwoRates[1] = agileRatesInit[i+2].rate\r\n                }\r\n            }\r\n\r\n            //getting today's and tmr's min rates\r\n            var todaysMinRate, tmrsMinRate\r\n            if (startTime.isSame(todaysMinRateTime, 'm')){\r\n                todaysMinRate = agileRatesInit[i].rate\r\n            } else if (startTime.isSame(tmrsMinRateTime, 'm')){\r\n                tmrsMinRate = agileRatesInit[i].rate\r\n            }\r\n        }\r\n\r\n        // let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n        // const convertToDate = (value) => {\r\n        //     const time = new Date(value)\r\n        //     return time.toLocaleTimeString('en-gb', timeOptions)\r\n        // }\r\n\r\n        return ( type === 'homepage' ?\r\n        (<div>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Current</h4>\r\n                    <h5 className=\"lead\">{currentRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        since {currentValidFrom.format(\"HH:mm\")}</span>\r\n                </div>\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Today's Lowest</h4>\r\n                    <h5 className=\"lead\">{todaysMinRate ? todaysMinRate.toFixed(3): ''}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        at {todaysMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</span>\r\n                </div>\r\n            </div>\r\n            <hr className=\"alert-dark my-4\"></hr>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Next Two</h4>\r\n                    { nextTwoRates[0] !== 9999 && <h5 className=\"lead\">{nextTwoRates[0].toFixed(3)}p</h5>}\r\n                    { nextTwoRates[1] !== 9999 && <h5 className=\"lead\">{nextTwoRates[1].toFixed(3)}p</h5>}\r\n                </div>\r\n                {tmrsMinRate && <div className='col-6'>\r\n                    <h4 className=\"display-6\">Tomorrow's Lowest</h4>\r\n                    <h5 className=\"lead\">{tmrsMinRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>at {tmrsMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</span>\r\n                </div>}\r\n            </div>\r\n        </div>) : (\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Current Rate</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{currentRate.toFixed(3)}p</h3>\r\n                        <h5>since {currentValidFrom.format(\"HH:mm\")}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-titl mb-3\">Today's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{todaysMinRate ? todaysMinRate.toFixed(3) : ''}p</h3>\r\n                        <h5>at {todaysMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Tomorrow's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{tmrsMinRate ? tmrsMinRate.toFixed(3) : ''}{tmrsMinRate && `p`}</h3>\r\n                        {tmrsMinRate && <h5>at {tmrsMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</h5>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n        )\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                setAgileRatesInit(response.rates)\r\n                setTodaysMin(response.todaysMin)\r\n                setTmrsMin(response.tmrsMin)\r\n                // populateCard()\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            hideSpinner('agile-rates-card-spinner')\r\n        }\r\n        APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return populateCard(type)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nfunction CategoryStatesBlock(props){\r\n\r\n    const {controlState, operationState, \r\n                          boostState, cat} = props\r\n    //setting colours depending on boost states\r\n    var colour\r\n    if (boostState || operationState){\r\n        colour = 'danger'\r\n    } else if (controlState){\r\n        colour = 'warning'\r\n    } else{\r\n        colour = 'success'\r\n    }\r\n\r\n    var catText = cat === \"heating\" ? \"Heating\":'Water' \r\n    var controlText\r\n    if(boostState){\r\n        controlText = \"Boost\\nOn\"\r\n    } else if (!controlState){\r\n        controlText = 'Control\\nOff'\r\n    } else if (cat === 'hotWater'){\r\n        controlText = 'Scheduled\\nControl'\r\n    } else {\r\n        controlText = 'Thermostat\\nControl'\r\n    }\r\n\r\n    const buttonOnClickEvent = (event) =>{\r\n        event.preventDefault()\r\n        // remove focus on button\r\n        event.target.blur()\r\n        var data = {'device': cat, 'state': !controlState}\r\n        //callback for then the state change POST method has returned\r\n        const returnCallBack = (response, status) =>{\r\n            if (status === 201){\r\n                APILookup('GET', 'currentStates', populateCurrentStates, {})\r\n            } else {\r\n                alert('State change failed')\r\n            }\r\n        }\r\n\r\n        APILookup('POST', 'currentStates/change', \r\n                            returnCallBack, data)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={`btn btn-block btn-${colour}`} style={{maxWidth:130, whiteSpace: \"pre-wrap\"}}\r\n                    onClick={buttonOnClickEvent}> \r\n                <h4 class=\"font-weight-bold alert-heading text-center pt-1\">{catText}</h4>\r\n                <hr className={`alert-${colour}`} />\r\n                <h6 className=\"text-center\">{controlText}</h6>\r\n                <hr className={`alert-${colour}`} />\r\n                <OperationStateOnOffText state={operationState} type={0}/>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction OperationStateOnOffText(props){\r\n    const { state, type } = props\r\n    var text = state ? \"ON\" : \"OFF\"\r\n    var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    const className = \"font-weight-bold text-center\"\r\n    return <Tag className={className}>{text}</Tag>\r\n}\r\n\r\n\r\nfunction setBoilerBlock(state){\r\n    //change the colour\r\n    var colour = state ? \"danger\" : \"success\"\r\n    const boilerStateEl = document.getElementById(\"boiler-operation-block\")\r\n    boilerStateEl.className = `alert alert-${colour}`\r\n    ReactDOM.render(<OperationStateOnOffText state={state} type={1}/>, \r\n                    document.getElementById(\"boiler-on-off-text\"))\r\n}\r\n\r\n\r\nexport function populateCurrentStates(response, status){\r\n    setBoilerBlock(response.operation[2])\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.hotWater.state} \r\n                                        operationState={response.operation[0]} \r\n                                        boostState={response.control.hotWater.boost} \r\n                                        cat={\"hotWater\"}/>, \r\n                        document.getElementById(\"hotWater-states-block\"));\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.heating.state} \r\n                                        operationState={response.operation[1]} \r\n                                        boostState={false} \r\n                                        cat={\"heating\"}/>, \r\n                        document.getElementById(\"heating-states-block\"));      \r\n  }","import React, {useEffect, useState} from 'react'\r\nimport {APILookup} from '../lookup'\r\n// import InputSpinner from \"react-native-input-spinner\";\r\n\r\nexport function NestCard(props){\r\n    const [ambientTemp, setAmbientTemp] = useState([])\r\n    const [thermostatTemp, setThermostatTemp] = useState([])\r\n\r\n    // const {type} = props\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                // console.log(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                setThermostatTemp(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                setAmbientTemp(response.traits[\"sdm.devices.traits.Temperature\"][\"ambientTemperatureCelsius\"])\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            \r\n        }\r\n        APILookup('GET', 'googleNest', myCallback)\r\n    }, [])\r\n\r\n    return ( typeof(ambientTemp) === 'number' ?\r\n        <div>\r\n            <h5>Ambient Temp:  {ambientTemp.toFixed(2)} </h5>\r\n            <h5>Thermostat Set Temp: {thermostatTemp.toFixed(2)}</h5>\r\n        </div>\r\n        : \r\n        <div class=\"text-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveContainer, Bar, Line, \r\n        CartesianGrid, XAxis, YAxis, ComposedChart, \r\n        Legend, Tooltip, ReferenceLine } from 'recharts';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\n\r\nimport { chartPlotOptions, chartTypeOptions, chartViewOptions} from './index'\r\n\r\n\r\nimport { DatePicker } from 'antd';\r\nconst { RangePicker } = DatePicker;\r\n\r\n\r\nexport function ChartButtonGroup(props) {\r\n    const {btnType, stateVar, onValueChange} = props\r\n    \r\n    var btnOptions\r\n    if (btnType === 'type'){\r\n        btnOptions = chartTypeOptions\r\n    } else if (btnType === 'view'){\r\n        btnOptions = chartViewOptions\r\n    } else if (btnType === 'plot'){\r\n        var options = {}\r\n        for (var [key, value] of Object.entries(chartPlotOptions)){\r\n            if (key !== 'rate'){\r\n                options[key] = value\r\n            }\r\n        }\r\n        btnOptions = options\r\n    }\r\n\r\n    const handleChange = (val, event) => {\r\n        const source = event.target;\r\n        //defocus the button\r\n        source.blur()\r\n        //callback to parent component as the state is changed\r\n        onValueChange([btnType, val])\r\n    };\r\n\r\n    return (\r\n      <ToggleButtonGroup type=\"radio\" name=\"options\" size='lg'\r\n                            defaultValue={stateVar} onChange={handleChange}>\r\n          {Object.keys(btnOptions).map((key, idx)=>{\r\n            return <ToggleButton value={key} key={`${idx}`}>{btnOptions[key].label}</ToggleButton>})}\r\n      </ToggleButtonGroup>\r\n    );\r\n}\r\n  \r\n\r\n//combining both the daterangepicker and pre-set buttons\r\nexport class CustomDateRangePicker extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dateRange: props.dateRange,\r\n            preSelection: null\r\n        }\r\n    }\r\n\r\n    //actions for when the dates are manually changed using the picker\r\n    datesChanged = (range) =>{\r\n        this.setState({dateRange:range, preSelection: null})\r\n    }\r\n\r\n    //actions for when the date range buttons were clicked\r\n    buttonDateRangeClicked = (value) =>{\r\n        var dateRange\r\n        if (value === 'day'){\r\n            dateRange = [moment().subtract(1, 'd').set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}), \r\n                            moment().subtract(1, 'd').set({'hour':0, 'minute':0, 'second':0, 'millisecond':0})]\r\n        } else if (value === 'week'){\r\n            //making sure the lower date is not before the dates limit\r\n            dateRange = [moment.max(moment().subtract(8, 'd'), this.props.datesLimit[0]), \r\n                            moment().subtract(1, 'd')]\r\n        } else if (value === 'month'){\r\n            dateRange = [moment.max(moment().subtract({'months':1, 'days':1}), this.props.datesLimit[0]), \r\n                            moment().subtract(1, 'd')]\r\n        } else if (value === 'all'){\r\n            dateRange = this.props.datesLimit\r\n        } \r\n        \r\n        this.setState({dateRange: dateRange, preSelection: value})\r\n    }\r\n\r\n    //update the parent component if any dates change\r\n    componentDidUpdate(prevProps, prevStates) {\r\n        if (prevStates.dateRange !== this.state.dateRange){\r\n            this.props.datesChanged(this.state.dateRange)\r\n        }\r\n    }\r\n\r\n    render(){ \r\n        return (\r\n        <div className=\"row align-items-center\">\r\n            <div className=\"col-6\" align=\"right\">\r\n                <ToggleButtonGroup type=\"radio\" name=\"options\" //size='sm'\r\n                                    value={this.state.preSelection} \r\n                                    onChange={this.buttonDateRangeClicked}>\r\n                    <ToggleButton value={\"all\"}>All<br></br>Time</ToggleButton>\r\n                    <ToggleButton value={\"month\"}>Past<br></br>Month</ToggleButton>\r\n                    <ToggleButton value={\"week\"}>Past<br></br>Week</ToggleButton>\r\n                    <ToggleButton value={\"day\"}>Past<br></br>Day</ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </div>\r\n            <div className=\"col-6 \" align=\"left\">\r\n            <RangePicker \r\n                size=\"large\" \r\n                inputReadOnly={true}\r\n                value={this.state.dateRange}\r\n                onChange={this.datesChanged}\r\n                disabledDate={(current) => {\r\n                    return current && \r\n                        !current.isBetween(this.props.datesLimit[0], this.props.datesLimit[1], '[]')}}\r\n            />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport function LeccyUseChart(prop){\r\n    \r\n    const {data, barPlotOptions, chartType, chartView } = prop\r\n    \r\n    const chart = ( data ?\r\n    <ResponsiveContainer width=\"100%\" height={500}>\r\n        <ComposedChart data={data}>\r\n            <CartesianGrid stroke=\"#ccc\" />\r\n            <XAxis dataKey=\"x\" />\r\n            <YAxis yAxisId=\"left\" type=\"number\" dataKey={barPlotOptions.key} \r\n                    name={barPlotOptions.label} unit={barPlotOptions.unit} />\r\n            <YAxis yAxisId=\"rate\" orientation=\"right\" type=\"number\" \r\n                    dataKey=\"rate\" name=\"Rate\" unit=\"p\" />\r\n            <ReferenceLine y={0} yAxisId=\"rate\" stroke=\"#8884d8\" strokeWidth={1.25}/>\r\n            <Bar yAxisId=\"left\" fill=\"#000000\" name={barPlotOptions.label} \r\n                    dataKey={barPlotOptions.key} stroke=\"#8884d8\" />\r\n            <ReferenceLine y={0} yAxisId=\"left\" stroke=\"white\" strokeWidth={1}/>\r\n            <Line yAxisId=\"rate\" type=\"monotone\" name=\"Rate\" dataKey=\"rate\" stroke=\"#8884d8\" />\r\n            <Legend />\r\n            <Tooltip content={<CustomTooltip />}/>\r\n        </ComposedChart >\r\n    </ResponsiveContainer>\r\n    : \"\");\r\n    \r\n    return chart\r\n}\r\n\r\n//custom tooltip content\r\nfunction CustomTooltip ({ active, payload, label }) {\r\n    if (active && label && payload) {\r\n        //checking whether each of the info is found\r\n        const rateValueObj = payload.find(e => e.dataKey ==='rate')\r\n        const mainValueObj = payload.find(e => e.dataKey !== 'rate')\r\n        \r\n        return (\r\n        <div className=\"custom-tooltip\">\r\n            <p className=\"tooltip-value-x\">{`${label}`} </p>\r\n            { mainValueObj  && \r\n                <div className=\"tooltip-value-y1\">\r\n                    <p>{`${chartPlotOptions[mainValueObj.dataKey].label}: `} \r\n                        {mainValueObj.value.toFixed(3)}{chartPlotOptions[mainValueObj.dataKey].unit}</p></div>}\r\n            { rateValueObj &&\r\n                <div className=\"tooltip-value-y2\">\r\n                    <p>{`${chartPlotOptions['rate'].label}: `}\r\n                        {rateValueObj.value.toFixed(3)}{chartPlotOptions['rate'].unit}</p></div>}\r\n        </div>\r\n        );\r\n    } else {return \"\"}\r\n}\r\n\r\nfunction LeccyUseRow(props){\r\n    const { dataPlot, chartView } = props\r\n    //setting the display of the cost depending on the chart view type\r\n    //show in £ for week and month view\r\n    var costCellString = \"\"\r\n    if (dataPlot.cost) {\r\n        if ( dataPlot.cost !==0 ){\r\n            costCellString = chartView === \"hour\" || chartView === \"day\" \r\n                            ? `${dataPlot.cost.toFixed(2)}p`\r\n                            : `£${(dataPlot.cost/100).toFixed(2)}`\r\n        }\r\n    }\r\n    \r\n    return ( dataPlot.rate ? (<tr>\r\n              <td>{dataPlot.x}</td>\r\n              <td>{dataPlot.rate && `${dataPlot.rate.toFixed(3)}p`}</td>\r\n              <td>{dataPlot.consumption && dataPlot.consumption.toFixed(3)}</td>\r\n              <td>{costCellString}</td>\r\n              <td>{dataPlot.avgRate && `${dataPlot.avgRate.toFixed(3)}p`}</td>\r\n            </tr>) : \"\" )\r\n}\r\n\r\n\r\nexport function LeccyUseTable(props){\r\n    const { dataPlots, chartType, chartView } = props\r\n    \r\n    var rateHeader = 'Rate', unitHeader = 'Used (kWh)'\r\n    var costHeader = 'Cost'\r\n    if (chartType === 'avg' && chartView !== 'hour') {\r\n        rateHeader = 'Mean Daily Rate'\r\n        unitHeader = 'Mean Daily Use (kWh)'\r\n        costHeader = 'Mean Daily Cost'\r\n    } else if (chartType === 'avg' && chartView === 'hour'){\r\n        rateHeader = 'Mean Block Rate'\r\n        unitHeader = 'Mean Use (kWh)'\r\n        costHeader = 'Mean Cost'\r\n    } else if (chartType === 'actl' && chartView !== 'hour'){\r\n        rateHeader = 'Mean Block Rate'\r\n        unitHeader = 'Mean Use (kWh)'\r\n        costHeader = 'Mean Cost'\r\n    }\r\n\r\n    return ( dataPlots ?\r\n    <div className=\"row justify-content-center\">\r\n        <div className=\"col-12\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body table-responsive-sm\">\r\n                <table className=\"table table-striped\" \r\n                        style={{\"width\":\"100%\", tableLayout:'fixed'}}>\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Period</th>\r\n                            <th>{rateHeader}</th>\r\n                            <th>{unitHeader}</th>\r\n                            <th>{costHeader}</th>\r\n                            <th>Average Unit Cost (per kWh)</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {dataPlots.map((dataPlot, index)=>{\r\n                        return <LeccyUseRow dataPlot={dataPlot}\r\n                                            chartView = {chartView}\r\n                                            key={`${index}`}/>\r\n                    })}\r\n                    </tbody>\r\n                </table> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div> : \"\"\r\n    )\r\n  }","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\nimport * as d3 from 'd3-array';\r\n\r\nimport { APILookup } from '../lookup'\r\nimport { LeccyUseChart, LeccyUseTable, \r\n            ChartButtonGroup, CustomDateRangePicker } from './sub-components'\r\nimport { chartPlotOptions, chartViewOptions } from './index'\r\n\r\n\r\n\r\n\r\nfunction getActlDateRangeArray(startEndArray, viewRange){\r\n    var times = []\r\n    //generate the array of day block\r\n    var endDate = moment(startEndArray[1]).endOf(viewRange)\r\n    for (let time = moment(startEndArray[0]); time.isBefore(endDate); time.add(1, viewRange)) {\r\n        times.push(time.format(chartViewOptions[viewRange]['actlStringFormat']));\r\n    }\r\n    return times\r\n}\r\n\r\nexport default class Consumption extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //getting the locally stored date range\r\n        var dateRange = localStorage.getItem('consumptionPage/dateRange')\r\n        var chartType = localStorage.getItem('consumptionPage/chartType')\r\n        var chartView = localStorage.getItem('consumptionPage/chartView')\r\n        var chartPlot = localStorage.getItem('consumptionPage/chartPlot')\r\n\r\n        this.state={\r\n            useBlocks:[],\r\n            dataPlot:[],\r\n            // chartView: chartView ? chartView : 'hour',\r\n            // chartType: chartType ? chartType : 'avg',\r\n            //converting from string back to array of moments\r\n            dateRange: dateRange \r\n                        ? dateRange.split(',').map(val=>moment(val, \"L\")) \r\n                        : [moment(), moment()],\r\n            chartBarPlot: chartPlot ? chartPlot : 'cost',\r\n            datesLimit: [moment(), moment()]\r\n        }\r\n        //getting the locally stored chart type and view\r\n        this.chartView = chartView ? chartView : 'hour'\r\n        this.chartType = chartType ? chartType : 'avg'\r\n\r\n        //create ref to the daterangepicker\r\n        this.dateRangeElement = React.createRef();\r\n\r\n        this.datesChanged = this.datesChanged.bind(this)\r\n    }\r\n    \r\n    chartOptionChanged = (stateArr) => {\r\n        //assigning selection to class variable\r\n        if (stateArr[0] === 'type'){\r\n            this.chartType = stateArr[1]\r\n            localStorage.setItem('consumptionPage/chartType', stateArr[1]);\r\n            this.processAnyViewTypeChange()\r\n        } else if (stateArr[0] === 'view'){\r\n            this.chartView = stateArr[1]\r\n            localStorage.setItem('consumptionPage/chartView', stateArr[1]);\r\n            this.processAnyViewTypeChange()\r\n        } else if (stateArr[0] === 'plot'){\r\n            localStorage.setItem('consumptionPage/chartPlot', stateArr[1]);\r\n            this.setState({chartBarPlot: stateArr[1]})\r\n        }\r\n    }\r\n\r\n    prevNextClicked = (event) => {\r\n        var dateRange = this.state.dateRange\r\n        const btnID = event.target.id\r\n        \r\n        //add/subtract the hourly view by 1 day, same as daily view\r\n        const addSubtractTime = this.chartView === 'hour' ? 'days' : this.chartView\r\n        \r\n        if (btnID === \"prev-date-range\"){\r\n            //subtract both start and end date by 1 period\r\n            var newDateRange = dateRange.map((date) => moment(date).subtract(1, addSubtractTime))\r\n            //make sure new date range is not before date limit\r\n            if (newDateRange[0].isBefore(this.state.datesLimit[0])){\r\n                var newMaxDate = moment.min(moment(this.state.datesLimit[0]).add({[addSubtractTime]:1}), this.state.datesLimit[1])\r\n                newDateRange = [this.state.datesLimit[0], newMaxDate]\r\n            }\r\n        } else {\r\n            var newDateRange = dateRange.map((date) => moment(date).add(1, addSubtractTime))\r\n            //make sure new date range is not after date limit\r\n            if (newDateRange[1].isAfter(this.state.datesLimit[1])){\r\n                var newMinDate = moment.max(moment(this.state.datesLimit[1]).subtract({[addSubtractTime]:1}), this.state.datesLimit[0])\r\n                newDateRange = [newMinDate, this.state.datesLimit[1]]\r\n            }\r\n        }\r\n        \r\n        this.dateRangeElement.current.datesChanged(newDateRange)\r\n    }\r\n\r\n    //for when the dates in date range picker is changed, manually or using pre-set buttons\r\n    datesChanged = (value) => {\r\n        if (value){\r\n            // this.dateRange = value\r\n            localStorage.setItem('consumptionPage/dateRange', \r\n                        value.map((val) => val.format(\"L\")).join(','))\r\n            this.setState({dateRange:value}, this.processAnyViewTypeChange)\r\n        }\r\n    }\r\n\r\n    processAnyViewTypeChange(){\r\n        const chartView = this.chartView\r\n        //getting the array of time to plot\r\n        var xArray = []\r\n        if (this.chartType === 'avg'){\r\n            if (chartView === 'day'){\r\n                xArray = moment.weekdays()\r\n            } else if (chartView === 'week'){\r\n                xArray = getActlDateRangeArray(this.state.dateRange, chartView)\r\n            } else if (chartView === 'month'){\r\n                xArray = moment.months()\r\n            }\r\n        } else {\r\n            if (chartView !== 'hour'){\r\n                xArray = getActlDateRangeArray(this.state.dateRange, chartView)\r\n            }\r\n        }\r\n        \r\n        var data = xArray.map((time) => {return {x:time}})\r\n\r\n        if (this.chartType === 'avg'){\r\n            data = this.processAvgView(data)\r\n        } else {\r\n            data = this.processActlView(data)\r\n        }\r\n\r\n        //calculating the average cost per unit\r\n        for (var dataPoint of data){\r\n            dataPoint.avgRate = dataPoint.consumption !== 0 ? dataPoint.cost/dataPoint.consumption : null\r\n        }\r\n\r\n        //assigning the data back to plot\r\n        this.setState({dataPlot:data})\r\n    }\r\n\r\n    processAvgView(data){\r\n        if (this.chartView === 'hour'){\r\n            //forming the array of time with 30min block\r\n            var hours = []\r\n            //generate the array of 30min block\r\n            for (let hour = 0; hour < 24; hour++) {\r\n                hours.push(moment({ hour }).format(chartViewOptions['hour']['avgStringFormat']));\r\n                hours.push(moment({ hour, minute: 30}).format(chartViewOptions['hour']['avgStringFormat']));\r\n            }\r\n            //group them into half hour block\r\n            var grouped3 = d3.group(this.state.useBlocks, d => d.time.format(\r\n                            chartViewOptions[this.chartView]['avgStringFormat']))\r\n            \r\n            data = hours.map((blockTime) => {\r\n                var groupedArr = grouped3.get(blockTime)\r\n                return { x:blockTime, \r\n                    rate: d3.mean(groupedArr, v => v.rate),\r\n                    consumption: d3.mean(groupedArr, val => val.consumption),\r\n                    cost: d3.mean(groupedArr, val => val.rate*val.consumption)\r\n                }\r\n            })\r\n        }\r\n        else { //for this.chartView === day/week/month \r\n            //group the useblocks into dates\r\n            var grouped = d3.groups(this.state.useBlocks, d => d.time.format(\"LL\"))\r\n            //turn the grouped array into sum of each day\r\n            grouped = grouped.map(\r\n                (val) => { \r\n                    return {\r\n                        'x': val[0], \r\n                        //for rate, take the mean of each day\r\n                        'rate': d3.mean(val[1], v => v.rate),\r\n                        'use': d3.sum(val[1], v => v.consumption),\r\n                        'cost': d3.sum(val[1], v => v.consumption * v.rate),\r\n                        //store the count for the day so in the next step whether to calc mean or not\r\n                        'count': d3.count(val[1], d => d.consumption)\r\n                    }\r\n                } \r\n            )\r\n            \r\n            var dateFormat = chartViewOptions[this.chartView]['avgStringFormat']\r\n            for (var dataBlock of data){\r\n                //filtering the dates which match the day of week/day in month\r\n                var filteredDates = d3.filter(grouped, obj => moment(obj.x, \"LL\").format(dateFormat) === dataBlock.x)\r\n                //storing different names for week view\r\n                if (this.chartView === 'week'){\r\n                    dataBlock.x = `${moment(dataBlock.x, dateFormat).startOf('week').format(\"DD\")\r\n                                    }-${moment(dataBlock.x, dateFormat).endOf('week').format(\"DD MMM YYYY\")}`\r\n                }\r\n                //only return a value if that day has more than 45 blocks of consumption defined\r\n                dataBlock.rate = d3.mean(filteredDates, val => val.count > 45 ? val.rate: null)\r\n                dataBlock.consumption = d3.mean(filteredDates, val => val.count > 45 ? val.use: null)\r\n                dataBlock.cost = d3.mean(filteredDates, val => val.count > 45 ? val.cost: null)\r\n            }\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    processActlView(data){\r\n        if (this.chartView === 'hour'){\r\n            //getting the range of dates to filter\r\n            var startTime = moment(this.state.dateRange[0])\r\n            var endTime = moment(this.state.dateRange[1]).add(1, 'd')\r\n            //set a 10 day limit to the view\r\n            var dateLimit = moment(startTime).add(11, 'd')\r\n            var filteredBlocks = d3.filter(this.state.useBlocks, \r\n                            (val) => val.time.isBetween(\r\n                                startTime, endTime, 'minute', \"[)\") && val.time.isBefore(dateLimit))\r\n            //turning the useBlocks into array of dicts for plotting\r\n            data = filteredBlocks.map((obj) => {return {x:obj.time.format(\"DD MMM HH:mm\"),\r\n                                                        rate: obj.rate,\r\n                                                        consumption: obj.consumption,\r\n                                                        cost: obj.rate*obj.consumption}\r\n                                            })\r\n            data.reverse()\r\n        }\r\n        else { //for this.chartView === day/week/month \r\n            const dateFormat = chartViewOptions[this.chartView]['actlStringFormat']\r\n\r\n            //group the useblocks into dates\r\n            var grouped = d3.groups(this.state.useBlocks, d => d.time.format(dateFormat))\r\n            //turn the grouped array into sum of each day\r\n            grouped = grouped.map(\r\n                (val) => { \r\n                    return {\r\n                        'x': val[0], \r\n                        //for rate, take the mean of each day\r\n                        'rate': d3.mean(val[1], v => v.rate),\r\n                        'use': d3.sum(val[1], v => v.consumption),\r\n                        'cost': d3.sum(val[1], v => v.consumption * v.rate)\r\n                    }\r\n                } \r\n            )\r\n            \r\n            for (var dataBlock of data){\r\n                //filtering the dates which match the day of week/day in month\r\n                var filteredDates = d3.filter(grouped, obj => obj.x === dataBlock.x)\r\n                //storing different names for week view\r\n                if (this.chartView === 'week'){\r\n                    //use locale week format (week starts on user chosen day)\r\n                    dataBlock.x = `${moment(dataBlock.x, dateFormat).startOf('week').format(\"DD\")\r\n                                    }-${moment(dataBlock.x, dateFormat).endOf('week').format(\"DD MMM YYYY\")}`\r\n                }\r\n                dataBlock.rate = d3.mean(filteredDates, val => val.rate)\r\n                dataBlock.consumption = d3.sum(filteredDates, val => val.use)\r\n                dataBlock.cost = d3.sum(filteredDates, val => val.cost)\r\n            }\r\n        }\r\n        \r\n        return data\r\n    }\r\n\r\n    //callback for when the use history has been loaded\r\n    componentDidMount(){\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                var leccyUse = response.leccyUse\r\n                leccyUse = leccyUse.map((val) => {return {\"time\":moment(val.interval_start), \r\n                                \"rate\":val.rate, \"consumption\":val.consumption}})\r\n                this.setState({useBlocks:leccyUse}, \r\n                                this.processAnyViewTypeChange)\r\n                //calculating the max and min date\r\n                var dates = leccyUse.map((val) => {return val.time})\r\n                this.setState({datesLimit: [moment.min(dates).set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}).subtract(1, 'd'), \r\n                                            moment.max(dates).set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}).add(1, 'd')]})\r\n          } else {\r\n              alert(\"There was an error\")\r\n          }\r\n        }\r\n        //api call to retrieve the history\r\n        APILookup('GET', `consumptionHistory`, myCallback)\r\n    }\r\n    \r\n    render(){\r\n        return ( this.state.useBlocks ?\r\n        (<div>\r\n            <div className=\"row my-3 mx-4\">\r\n                <div className=\"col-6\">\r\n                    <Button className=\"btn btn-primary btn-arrow-left\" id=\"prev-date-range\"\r\n                            onClick={this.prevNextClicked}>\r\n                        Previous</Button>\r\n                </div>\r\n                <div className=\"col-6\" align=\"right\">\r\n                    <Button className=\"btn btn-primary btn-arrow-right\" id=\"next-date-range\"\r\n                            onClick={this.prevNextClicked}>\r\n                        Next</Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mb-3\">\r\n                <LeccyUseChart data={this.state.dataPlot} \r\n                                barPlotOptions={chartPlotOptions[this.state.chartBarPlot]}\r\n                                // chartType={this.chartType}\r\n                                chartView={this.chartView}/>\r\n            </div>\r\n            <div className=\"row justify-content-center my-3\">\r\n                <div className=\"col-lg-2 col-md-4 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'type'} stateVar={this.chartType} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-4 col-md-6 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'view'} stateVar={this.chartView} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-2 col-md-4 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'plot'} stateVar={this.state.chartBarPlot} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-4 col-md-8 my-1\" align=\"center\">\r\n                    <CustomDateRangePicker ref={this.dateRangeElement} \r\n                                            datesLimit={this.state.datesLimit}\r\n                                            dateRange={this.state.dateRange}\r\n                                            datesChanged={this.datesChanged}/>\r\n                </div>\r\n            </div>\r\n            <LeccyUseTable dataPlots={this.state.dataPlot} \r\n                            chartType={this.chartType}\r\n                            chartView={this.chartView}/>\r\n        </div>) :(\r\n            <div className=\"text-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import Consumption from './components'\r\n\r\nexport default Consumption\r\n\r\nexport const chartPlotOptions = {\r\n    'consumption': {\"key\":\"consumption\", 'label': 'Consumption', \"unit\":\"kWh\"},\r\n    \"cost\": {\"key\":\"cost\", 'label': 'Cost', \"unit\":\"p\"},\r\n    \"rate\": {\"key\":\"rate\", 'label': 'Rate', \"unit\":\"p\"}\r\n}\r\n\r\nexport const chartTypeOptions = {\r\n    'avg': {'label': 'Average'},\r\n    \"actl\": { 'label': 'Actual'}\r\n}\r\n\r\nexport const chartViewOptions = {\r\n    \"hour\": {'label': 'Hourly', 'avgStringFormat': \"HH:mm\", 'actlStringFormat': \"DD MMM HH:mm\"},\r\n    \"day\": {'label': 'Daily', \"avgStringFormat\": \"dddd\", 'actlStringFormat': \"YYYY-MM-DD\"},\r\n    \"week\": {'label': 'Weekly', \"avgStringFormat\": \"ww YYYY\", 'actlStringFormat': \"ww YYYY\"},\r\n    \"month\": {'label': 'Monthly', \"avgStringFormat\": \"MMMM\", 'actlStringFormat': \"MMM YYYY\"}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BoilerStateList } from './boilerStates'\nimport { AgileRateCard, AgileRateList } from './agileRates'\nimport { populateCurrentStates } from './currentStates';\nimport { APILookup } from './lookup'\nimport { NestCard } from './googleNest'\nimport Consumption from './consumptionHistory'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<Consumption />, appEl);\n}\n\nconst boilerStateRows = document.getElementById('boilerStateRows')\nif (boilerStateRows){\n  ReactDOM.render(<BoilerStateList limit={0}/>, boilerStateRows);\n  \n}\n\nconst boilerStateEl = document.getElementById('boilerStateCard')\nif (boilerStateEl){\n  ReactDOM.render(<BoilerStateList limit={5}/>, boilerStateEl);\n}\n\nconst agileRatesEl = document.getElementById('agileRateTable')\nif (agileRatesEl){\n  ReactDOM.render(<AgileRateList />, agileRatesEl);\n}\n\nvar agileRatesCardEl = document.getElementById('agile-rates-card')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'homepage'}/>, agileRatesCardEl);\n}\nagileRatesCardEl = document.getElementById('agile-rates-page-cards')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'top'}/>, agileRatesCardEl);\n}\nconst nestCardEl = document.getElementById('nest-card-content')\nif (nestCardEl){\n    ReactDOM.render(<NestCard />, nestCardEl);\n}\n\nconst currentStatesEl = document.getElementById('current-states-card-body')\nif (currentStatesEl){\n    APILookup('GET', 'currentStates', populateCurrentStates, {})\n}\n\nconst consumptionTableEl = document.getElementById('consumption-page')\nif (consumptionTableEl){\n    ReactDOM.render(<Consumption />, consumptionTableEl);\n}\n\n\n// const chartEl = document.getElementById('consumption-page-chart')\n// if (chartEl){\n//     ReactDOM.render(<LeccyUseChart />, chartEl);\n// }\n\n// const currentStatesEl = document.getElementById('current-states-card-body')\n// if (boilerStateEl){\n//   ReactDOM.render(<CurrentStatesCard />, currentStatesEl);\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}