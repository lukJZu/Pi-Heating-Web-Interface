{"version":3,"sources":["lookup/components.js","boilerStates/components.js","common/common.js","schedule/components.js","agileRates/components.js","currentStates/components.js","googleNest/components.js","consumptionHistory/sub-components.js","consumptionHistory/components.js","consumptionHistory/index.js","boostFunctions/components.js","serviceWorker.js","index.js"],"names":["domain","window","location","host","APILookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","BoilerStateRow","props","boilerState","startTime","moment","start_time","endTime","end_time","format","diff","hot_water_state","heating_state","BoilerStateList","prop","useState","boilerStatesInit","setBoilerStatesInit","limit","useEffect","alert","spinnerEl","getElementById","innerHTML","map","index","key","startsWith","hideSpinner","id","HotWaterScheduleCard","schedule","setSchedule","getScheduleCallback","className","style","width","class","ScheduleRow","isBetween","AgileRateRow","agileRate","todaysMin","tmrsMin","valid_from","valid_to","rate","timeNow","rowColour","indexOf","isAfter","fontSize","fontWeight","toFixed","AgileRateList","agileRatesInit","setAgileRatesInit","setTodaysMin","setTmrsMin","rates","agileRates","AgileRateCard","type","todaysMinRateTime","tmrsMinRateTime","currentRate","nextTwoRates","todaysMinRate","tmrsMinRate","currentValidFrom","isSame","val","join","populateCard","CategoryStatesBlock","colour","controlState","operationState","boostState","cat","controlText","catText","maxWidth","whiteSpace","onClick","event","preventDefault","target","blur","populateCurrentStates","OperationStateOnOffText","state","text","Tag","ReactDOM","render","setBoilerBlock","operation","control","hotWater","boost","heating","NestCard","ambientTemp","setAmbientTemp","thermostatTemp","setThermostatTemp","traits","role","RangePicker","DatePicker","ChartButtonGroup","btnOptions","btnType","stateVar","onValueChange","chartTypeOptions","chartViewOptions","options","Object","entries","chartPlotOptions","value","ToggleButtonGroup","size","defaultValue","onChange","keys","idx","ToggleButton","label","CustomDateRangePicker","datesChanged","range","setState","dateRange","preSelection","buttonDateRangeClicked","subtract","set","max","datesLimit","prevProps","prevStates","this","align","allowClear","inputReadOnly","disabledDate","current","Component","LeccyUseChart","barPlotOptions","chartView","height","stroke","dataKey","yAxisId","unit","orientation","y","strokeWidth","fill","dot","legendType","content","CustomTooltip","active","payload","avgCostValueObj","find","mainValueObj","rateValueObj","LeccyUseRow","dataPlot","costCellString","consumption","cost","undefined","x","avgCost","LeccyUseTable","dataPlots","chartType","rateHeader","unitHeader","costHeader","totalUse","totalCost","totalRow","colSpan","tableLayout","getActlDateRangeArray","startEndArray","viewRange","times","endDate","endOf","time","isBefore","add","push","Consumption","chartOptionChanged","stateArr","localStorage","setItem","processAnyViewTypeChange","chartBarPlot","prevNextClicked","newDateRange","btnID","addSubtractTime","date","newMaxDate","min","dateRangeElement","getItem","chartPlot","useBlocks","React","createRef","bind","xArray","weekdays","months","processAvgView","processActlView","dataPoint","filteredDateRange","d3","useBlock","isSameOrAfter","hours","hour","minute","grouped3","d","blockTime","groupedArr","get","v","grouped","dateFormat","dataBlock","filteredDates","obj","startOf","count","use","dateLimit","reverse","leccyUse","interval_start","dates","chartTitle","endDateString","Button","ref","BoostStatesCard","hotWaterBoostState","setHotWaterBoostState","heatingBoostState","setHeatingBoostState","sliderValue","setSliderValue","boostClicked","boostType","title","setValue","getBoostStatesCallback","variant","tooltip","tooltipLabel","BoostButton","onClickCallback","hoverActive","setHoverActive","buttonText","buttonLowerText","block","onMouseEnter","onMouseLeave","Boolean","hostname","match","appEl","boilerStateRows","boilerStateEl","agileRatesEl","agileRatesCardEl","nestCardEl","consumptionTableEl","boostStatesCard","hotWaterScheduleCardEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAAIA,EAASC,OAAOC,SAASC,KAuBtB,SAASC,EAAUC,EAAQC,EAAUC,EAAUC,GAClD,IAAIC,EACAD,IACFC,EAAWC,KAAKC,UAAUH,IAE5B,IAAMI,EAAM,IAAIC,eACVC,EAAG,UAAMd,EAAN,gBAAoBM,GAE7BM,EAAIG,aAAe,OACnB,IAAMC,EA1BV,SAAmBC,GACf,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,EAaWU,CAAU,aAE5BhB,EAAIiB,KAAKxB,EAAQS,GACjBF,EAAIkB,iBAAiB,eAAgB,oBAEjCd,IACAJ,EAAIkB,iBAAiB,mBAAoB,kBACzClB,EAAIkB,iBAAiB,cAAed,IAExCJ,EAAImB,OAAS,WACTxB,EAASK,EAAIoB,SAAUpB,EAAIqB,SAG/BrB,EAAIsB,QAAU,SAAUC,GACtBC,QAAQC,IAAIF,GACZ5B,EAAS,CAAC,QAAW,2CAA4C,MAGnEK,EAAI0B,KAAK7B,GC7CN,SAAS8B,EAAeC,GAAO,IAC3BC,EAAeD,EAAfC,YACDC,EAAYC,IAAOF,EAAYG,YAC/BC,EAAUF,IAAOF,EAAYK,UAEnC,OAAO,4BACG,4BAAKJ,EAAUK,OAAO,iBACtB,4BAAKF,EAAQE,OAAO,iBACpB,4BAAKF,EAAQG,KAAKN,EAAW,MAC7B,4BAAKD,EAAYQ,gBAAkB,KAAK,OACxC,4BAAKR,EAAYS,cAAgB,KAAK,QAK7C,SAASC,EAAgBC,GAAM,IAAD,EACeC,mBAAS,IADxB,mBAC1BC,EAD0B,KACRC,EADQ,KAE1BC,EAASJ,EAATI,MAmBL,OAjBFC,qBAAU,WAaRrD,EAAU,MAAD,uBAAwBoD,IAZd,SAACxB,EAAUC,GACb,MAAXA,EACAsB,EAAoBvB,GAEpB0B,MAAM,sBAGV,IAAMC,EAAYxC,SAASyC,eAAe,yBACtCD,IACFA,EAAUE,UAAY,MAG4BL,KACrD,IAGMF,EAAiBQ,KAAI,SAACrB,EAAasB,GACxC,OAAO,kBAACxB,EAAD,CAAgBE,YAAaA,EAAauB,IAAG,UAAKD,QDxC5D/D,EAAOiE,WAAW,UACrBjE,EAAM,iBAAaA,I,sBEHd,SAASkE,EAAYC,GACxB,IAAMR,EAAYxC,SAASyC,eAAeO,GAEtCR,IACAA,EAAUE,UAAY,ICKvB,SAASO,EAAqB5B,GAAO,IAAD,EACPa,mBAAS,IADF,mBAChCgB,EADgC,KACtBC,EADsB,KAIjCC,EAAsB,SAACvC,EAAUC,GACpB,MAAXA,GAA6B,MAAXA,EAClBqC,EAAYtC,GAEZ0B,MAAM,sBAIVQ,EAAY,8BAQhB,OAJAT,qBAAU,WACNrD,EAAU,MAAO,WAAYmE,KAC9B,IAGC,2BAAOC,UAAU,sBAAsBC,MAAO,CAACC,MAAM,SACjD,2BAAOC,MAAM,cACb,4BACI,0CACA,0CAIJ,+BACKN,EAASP,KAAI,SAACO,EAAUN,GACrB,OAAO,kBAACa,EAAD,CAAaP,SAAUA,EAAUL,IAAKD,SAOjE,SAASa,EAAYpC,GAAO,IACjB6B,EAAiB7B,EAAjB6B,SAED3B,GAFkBF,EAAPwB,IAECrB,IAAO0B,EAASzB,aAC5BC,EAAUF,IAAO0B,EAASvB,UAChC,OACI,wBAAI0B,UAAW7B,MAASkC,UAAUnC,EAAWG,GACvC,eACD,IACD,4BAAKH,EAAUK,OAAO,iBACtB,4BAAKF,EAAQE,OAAO,kBCnDzB,SAAS+B,EAAatC,GAAO,IAQZiC,EAPbM,EAAiCvC,EAAjCuC,UAAWC,EAAsBxC,EAAtBwC,UAAWC,EAAWzC,EAAXyC,QACvBvC,EAAYC,IAAOoC,EAAUG,YAC7BrC,EAAUF,IAAOoC,EAAUI,UAC3BC,EAAOL,EAAUK,KACjBC,EAAU1C,MAGZ2C,EAAY,GAqBhB,OApBIN,EAAUO,QAAQR,EAAUG,aAAe,EAC3CI,EAAY,OACLL,EAAQM,QAAQR,EAAUG,aAAe,EAChDI,EAAY,UACLF,EAAO,GACdE,EAAY,SACLF,EAAO,EACdE,EAAY,UACLD,EAAQG,QAAQ3C,GACvByC,EAAY,YAEPD,EAAQR,UAAUnC,EAAWG,KAClCyC,EAAY,SAIZD,EAAQR,UAAUnC,EAAWG,KAC7B4B,EAAQ,CAACgB,SAAS,SAAUC,WAAW,SAGpC,wBAAIlB,UAAS,gBAAWc,IACnB,wBAAIb,MAAOA,GACR/B,EAAUK,OAAO,qBAEpB,wBAAI0B,MAAOA,GAAQ5B,EAAQE,OAAO,qBAClC,wBAAI0B,MAAOA,GAAQW,EAAKO,QAAQ,GAAhC,MAKT,SAASC,EAAcxC,GAAM,IAAD,EACaC,mBAAS,IADtB,mBACxBwC,EADwB,KACRC,EADQ,OAEGzC,mBAAS,IAFZ,mBAExB2B,EAFwB,KAEbe,EAFa,OAGD1C,mBAAS,IAHR,mBAGxB4B,EAHwB,KAGfe,EAHe,KAqB/B,OAhBAvC,qBAAU,WAaRrD,EAAU,MAAO,cAZE,SAAC4B,EAAUC,GACb,MAAXA,GACA6D,EAAkB9D,EAASiE,OAC3BF,EAAa/D,EAASgD,WACtBgB,EAAWhE,EAASiD,UAEtBvB,MAAM,sBAIRQ,EAAY,kCAGb,IAEI2B,EAAe/B,KAAI,SAACoC,EAAYnC,GACnC,OAAO,kBAACe,EAAD,CAAcC,UAAWmB,EACZlB,UAAWA,EACXC,QAASA,EACTjB,IAAG,UAAKD,QAI7B,SAASoC,EAAc3D,GAAO,IAAD,EACYa,mBAAS,IADrB,mBACzBwC,EADyB,KACTC,EADS,OAEEzC,mBAAS,IAFX,mBAEzB2B,EAFyB,KAEde,EAFc,OAGF1C,mBAAS,IAHP,mBAGzB4B,EAHyB,KAGhBe,EAHgB,KAKzBI,EAAQ5D,EAAR4D,KAoHP,OAhBA3C,qBAAU,WAaNrD,EAAU,MAAO,cAZE,SAAC4B,EAAUC,GACX,MAAXA,GACA6D,EAAkB9D,EAASiE,OAC3BF,EAAa/D,EAASgD,WACtBgB,EAAWhE,EAASiD,UAEpBvB,MAAM,sBAIVQ,EAAY,iCAGjB,IAhHkB,SAACkC,GAElB,GAAIP,EAAerE,OAAS,EAAI,MAAO,GAQvC,IALA,IAAI6E,EAAoB1D,IAAOqC,EAAU,IACrCsB,EAAkB3D,IAAOsC,EAAQ,IAEjCI,EAAU1C,MACV4D,EAAc,KAAMC,EAAe,CAAC,KAAM,MACrCjF,EAAI,EAAGA,EAAIsE,EAAerE,OAAQD,IAAI,CAC3C,IAgBIkF,EAAeC,EAhBfhE,EAAYC,IAAOkD,EAAetE,GAAG2D,YACrCrC,EAAUF,IAAOkD,EAAetE,GAAG4D,UAEvC,GAAIE,EAAQR,UAAUnC,EAAWG,GAAS,CACtC0D,EAAcV,EAAetE,GAAG6D,KAChC,IAAIuB,EAAmBhE,IAAOkD,EAAetE,GAAG2D,YAE5C3D,EAAIsE,EAAerE,OAAS,IAC5BgF,EAAa,GAAKX,EAAetE,EAAE,GAAG6D,MAEtC7D,EAAIsE,EAAerE,OAAS,IAC5BgF,EAAa,GAAKX,EAAetE,EAAE,GAAG6D,MAM1C1C,EAAUkE,OAAOP,EAAmB,KACpCI,EAAgBZ,EAAetE,GAAG6D,KAC3B1C,EAAUkE,OAAON,EAAiB,OACzCI,EAAcb,EAAetE,GAAG6D,MAIxC,MAAkB,aAATgB,EACR,6BACG,yBAAK5B,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,aAAd,WACA,wBAAIA,UAAU,QAAQ+B,EAAYZ,QAAQ,GAA1C,KACA,0BAAMlB,MAAO,CAACgB,SAAS,QAAvB,SACWkB,EAAiB5D,OAAO,WAEvC,yBAAKyB,UAAU,SACX,wBAAIA,UAAU,aAAd,kBACA,wBAAIA,UAAU,QAAQiC,EAAgBA,EAAcd,QAAQ,GAAI,GAAhE,KACA,0BAAMlB,MAAO,CAACgB,SAAS,QAAvB,MACQT,EAAUlB,KAAI,SAAC+C,GAAS,OAAOlE,IAAOkE,GAAK9D,OAAO,YAAW+D,UAG7E,wBAAItC,UAAU,oBACd,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,aAAd,YACsB,OAApBgC,EAAa,IAAe,wBAAIhC,UAAU,QAAQgC,EAAa,GAAGb,QAAQ,GAA9C,KACR,OAApBa,EAAa,IAAe,wBAAIhC,UAAU,QAAQgC,EAAa,GAAGb,QAAQ,GAA9C,MAEjCe,GAAe,yBAAKlC,UAAU,SAC3B,wBAAIA,UAAU,aAAd,qBACA,wBAAIA,UAAU,QAAQkC,EAAYf,QAAQ,GAA1C,KACA,0BAAMlB,MAAO,CAACgB,SAAS,QAAvB,MAAmCR,EAAQnB,KAAI,SAAC+C,GAAS,OAAOlE,IAAOkE,GAAK9D,OAAO,YAAW+D,WAI1G,yBAAKtC,UAAU,8BACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,mBAAd,gBACA,wBAAIA,UAAU,yBAAyB+B,EAAYZ,QAAQ,GAA3D,KACA,qCAAWgB,EAAiB5D,OAAO,aAI/C,yBAAKyB,UAAU,2BACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,kBAAd,kBACA,wBAAIA,UAAU,yBAAyBiC,EAAgBA,EAAcd,QAAQ,GAAK,GAAlF,KACA,kCAAQX,EAAUlB,KAAI,SAAC+C,GAAS,OAAOlE,IAAOkE,GAAK9D,OAAO,YAAW+D,WAIjF,yBAAKtC,UAAU,2BACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,mBAAd,qBACA,wBAAIA,UAAU,yBAAyBkC,EAAcA,EAAYf,QAAQ,GAAK,GAAIe,GAAW,KAC5FA,GAAe,kCAAQzB,EAAQnB,KAAI,SAAC+C,GAAS,OAAOlE,IAAOkE,GAAK9D,OAAO,YAAW+D,YAyBhGC,CAAaX,GC7LxB,SAASY,EAAoBxE,GAAO,IAK5ByE,EAHGC,EACkC1E,EADlC0E,aAAcC,EACoB3E,EADpB2E,eACCC,EAAmB5E,EAAnB4E,WAAYC,EAAO7E,EAAP6E,IAI9BJ,EADAG,GAAcD,EACL,SACFD,EACE,UAEA,UAGb,IACII,EADAC,EAAkB,YAARF,EAAoB,UAAU,QAGxCC,EADDF,EACe,YACNF,EAEO,aAARG,EACO,qBAEA,sBAJA,eA0BlB,OACI,6BACI,4BAAQ7C,UAAS,4BAAuByC,GAAUxC,MAAO,CAAC+C,SAAS,IAAKC,WAAY,YAC5EC,QAtBW,SAACC,GACxBA,EAAMC,iBAEND,EAAME,OAAOC,OAWb1H,EAAU,OAAQ,wBARK,SAAC4B,EAAUC,GACf,MAAXA,EACA7B,EAAU,MAAO,gBAAiB2H,EAAuB,IAEzDrE,MAAM,yBANH,CAAC,OAAU2D,EAAK,OAAUH,MAmB7B,wBAAIvC,MAAM,mDAAmD4C,GAC7D,wBAAI/C,UAAS,gBAAWyC,KACxB,wBAAIzC,UAAU,eAAe8C,GAC7B,wBAAI9C,UAAS,gBAAWyC,KACxB,kBAACe,EAAD,CAAyBC,MAAOd,EAAgBf,KAAM,MAOtE,SAAS4B,EAAwBxF,GAAO,IAEhC0F,EADoB1F,EAAhByF,MACW,KAAO,MACtBE,EAAe,IAFK3F,EAAT4D,KAEQ,KAAO,KAG9B,OAAO,kBAAC+B,EAAD,CAAK3D,UADM,gCACiB0D,GAchC,SAASH,EAAsB/F,EAAUC,IAVhD,SAAwBgG,GAEpB,IAAIhB,EAASgB,EAAQ,SAAW,UACV9G,SAASyC,eAAe,0BAChCY,UAAd,sBAAyCyC,GACzCmB,IAASC,OAAO,kBAACL,EAAD,CAAyBC,MAAOA,EAAO7B,KAAM,IAC7CjF,SAASyC,eAAe,uBAKxC0E,CAAetG,EAASuG,UAAU,IAClCH,IAASC,OAAO,kBAACrB,EAAD,CAAqBE,aAAclF,EAASwG,QAAQC,SAASR,MACzCd,eAAgBnF,EAASuG,UAAU,GACnCnB,WAAYpF,EAASwG,QAAQC,SAASC,MACtCrB,IAAK,aACrBlG,SAASyC,eAAe,0BAC5CwE,IAASC,OAAO,kBAACrB,EAAD,CAAqBE,aAAclF,EAASwG,QAAQG,QAAQV,MACxCd,eAAgBnF,EAASuG,UAAU,GACnCnB,YAAY,EACZC,IAAK,YACrBlG,SAASyC,eAAe,yBC7FzC,SAASgF,EAASpG,GAAO,IAAD,EACWa,mBAAS,IADpB,mBACpBwF,EADoB,KACPC,EADO,OAEiBzF,mBAAS,IAF1B,mBAEpB0F,EAFoB,KAEJC,EAFI,KAsB3B,OAhBAvF,qBAAU,WAaNrD,EAAU,MAAO,cAZE,SAAC4B,EAAUC,GACX,MAAXA,GAEA+G,EAAkBhH,EAASiH,OAAO,oDAAhB,aAClBH,EAAe9G,EAASiH,OAAO,kCAAhB,4BAEfvF,MAAM,2BAOf,IAE8B,kBAAjBmF,EACZ,6BACI,8CAAoBA,EAAYlD,QAAQ,GAAxC,KACA,oDAA0BoD,EAAepD,QAAQ,KAGrD,yBAAKhB,MAAM,eACP,yBAAKA,MAAM,iBAAiBuE,KAAK,UAC7B,0BAAMvE,MAAM,WAAZ,gB,6ICvBRwE,E,OAAgBC,EAAhBD,YAGD,SAASE,EAAiB7G,GAAQ,IAGjC8G,EAFGC,EAAoC/G,EAApC+G,QAASC,EAA2BhH,EAA3BgH,SAAUC,EAAiBjH,EAAjBiH,cAG1B,GAAgB,SAAZF,EACAD,EAAaI,OACV,GAAgB,SAAZH,EACPD,EAAaK,OACV,GAAgB,SAAZJ,EAAmB,CAE1B,IADA,IAAIK,EAAU,GACd,MAAyBC,OAAOC,QAAQC,GAAxC,eAA0D,CAAC,IAAD,sBAAhD/F,EAAgD,KAA3CgG,EAA2C,KAC1C,SAARhG,GAA0B,YAARA,IAClB4F,EAAQ5F,GAAOgG,GAGvBV,EAAaM,EAWjB,OACE,kBAACK,EAAA,EAAD,CAAmB7D,KAAK,QAAQnF,KAAK,UAAUiJ,KAAK,KAC9BC,aAAcX,EAAUY,SAV3B,SAACvD,EAAKc,GACRA,EAAME,OAEdC,OAEP2B,EAAc,CAACF,EAAS1C,MAMrBgD,OAAOQ,KAAKf,GAAYxF,KAAI,SAACE,EAAKsG,GACjC,OAAO,kBAACC,EAAA,EAAD,CAAcP,MAAOhG,EAAKA,IAAG,UAAKsG,IAAQhB,EAAWtF,GAAKwG,WAOtE,IAAMC,EAAb,kDAEI,WAAYjI,GAAO,IAAD,8BACd,cAAMA,IAQVkI,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,UAAUF,EAAOG,aAAc,QAVhC,EAclBC,uBAAyB,SAACf,GACtB,IAAIa,EACU,QAAVb,EACAa,EAAY,CAAClI,MAASqI,SAAS,EAAG,KAAKC,IAAI,CAAC,KAAO,EAAG,OAAS,EAAG,OAAS,EAAG,YAAc,IAC5EtI,MAASqI,SAAS,EAAG,KAAKC,IAAI,CAAC,KAAO,EAAG,OAAS,EAAG,OAAS,EAAG,YAAc,KAC9E,SAAVjB,EAEPa,EAAY,CAAClI,IAAOuI,IAAIvI,MAASqI,SAAS,EAAG,KAAM,EAAKxI,MAAM2I,WAAW,IACzDxI,MAASqI,SAAS,EAAG,MACpB,UAAVhB,EACPa,EAAY,CAAClI,IAAOuI,IAAIvI,MAASqI,SAAS,CAAC,OAAS,EAAG,KAAO,IAAK,EAAKxI,MAAM2I,WAAW,IACzExI,MAASqI,SAAS,EAAG,MACpB,QAAVhB,IACPa,EAAY,EAAKrI,MAAM2I,YAG3B,EAAKP,SAAS,CAACC,UAAWA,EAAWC,aAAcd,KA5BnD,EAAK/B,MAAQ,CACT4C,UAAWrI,EAAMqI,UACjBC,aAAc,MAJJ,EAFtB,+DAoCuBM,EAAWC,GACtBA,EAAWR,YAAcS,KAAKrD,MAAM4C,WACpCS,KAAK9I,MAAMkI,aAAaY,KAAKrD,MAAM4C,aAtC/C,+BA0Ca,IAAD,OACJ,OACA,yBAAKrG,UAAU,0BACX,yBAAKA,UAAU,QAAQ+G,MAAM,SACzB,kBAACtB,EAAA,EAAD,CAAmB7D,KAAK,QAAQnF,KAAK,UACjB+I,MAAOsB,KAAKrD,MAAM6C,aAClBV,SAAUkB,KAAKP,wBAC/B,kBAACR,EAAA,EAAD,CAAcP,MAAO,OAArB,MAA+B,6BAA/B,QACA,kBAACO,EAAA,EAAD,CAAcP,MAAO,SAArB,OAAkC,6BAAlC,SACA,kBAACO,EAAA,EAAD,CAAcP,MAAO,QAArB,OAAiC,6BAAjC,QACA,kBAACO,EAAA,EAAD,CAAcP,MAAO,OAArB,OAAgC,6BAAhC,SAGR,yBAAKxF,UAAU,SAAS+G,MAAM,QAC9B,kBAACpC,EAAD,CACIe,KAAK,QACLsB,YAAY,EACZC,eAAe,EACfzB,MAAOsB,KAAKrD,MAAM4C,UAClBT,SAAUkB,KAAKZ,aACfgB,aAAc,SAACC,GACX,OAAOA,IACFA,EAAQ9G,UAAU,EAAKrC,MAAM2I,WAAW,GAAI,EAAK3I,MAAM2I,WAAW,GAAI,eAhE/F,GAA2CS,aAuEpC,SAASC,EAAczI,GAAM,IAEzB5C,EAAoC4C,EAApC5C,KAAMsL,EAA8B1I,EAA9B0I,eAA8B1I,EAAd2I,UA4B7B,OA1BgBvL,EAChB,kBAAC,IAAD,CAAqBkE,MAAM,OAAOsH,OAAQ,KACtC,kBAAC,IAAD,CAAexL,KAAMA,GACjB,kBAAC,IAAD,CAAeyL,OAAO,cACtB,kBAAC,IAAD,CAAOC,QAAQ,MACf,kBAAC,IAAD,CAAOC,QAAQ,OAAO/F,KAAK,SAAS8F,QAASJ,EAAe9H,IACpD/C,KAAM6K,EAAetB,MAAO4B,KAAMN,EAAeM,OACzD,kBAAC,IAAD,CAAOD,QAAQ,OAAOE,YAAY,QAAQjG,KAAK,SACvCnF,KAAK,OAAOmL,KAAK,MACzB,kBAAC,IAAD,CAAeE,EAAG,EAAGH,QAAQ,OAAOF,OAAO,UAAUM,YAAa,OAClE,kBAAC,IAAD,CAAeD,EAAG,KAAMH,QAAQ,OAAOF,OAAO,YAAYM,YAAa,IAGvE,kBAAC,IAAD,CAAKJ,QAAQ,OAAOK,KAAK,UAAUvL,KAAM6K,EAAetB,MAChD0B,QAASJ,EAAe9H,IAAKiI,OAAO,YAC5C,kBAAC,IAAD,CAAeK,EAAG,EAAGH,QAAQ,OAAOF,OAAO,QAAQM,YAAa,IAChE,kBAAC,IAAD,CAAMJ,QAAQ,OAAO/F,KAAK,WAAWnF,KAAK,OAAOwL,KAAK,EAC9CP,QAAQ,OAAOD,OAAO,UAAUS,WAAW,SACnD,kBAAC,IAAD,CAAMP,QAAQ,OAAO/F,KAAK,WAClBnF,KAAK,oBAAoBiL,QAAQ,UAAUD,OAAO,YAC1D,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASU,QAAS,kBAACC,EAAD,UAGxB,GAMN,SAASA,EAAT,GAAqD,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAAStC,EAAS,EAATA,MACvC,GAAIqC,GAAUrC,GAASsC,EAAS,CAE5B,IAAMC,EAAkBD,EAAQE,MAAK,SAAA7K,GAAC,MAAiB,YAAbA,EAAE+J,WACtCe,EAAeH,EAAQE,MAAK,SAAA7K,GAAC,MAAmB,YAAdA,EAAE+J,SAAyC,SAAd/J,EAAE+J,WACjEgB,EAAeJ,EAAQE,MAAK,SAAA7K,GAAC,MAAiB,SAAbA,EAAE+J,WAEzC,OACA,yBAAK1H,UAAU,kBACX,uBAAGA,UAAU,mBAAb,UAAmCgG,GAAnC,KACEyC,GACE,yBAAKzI,UAAU,mBACX,qCAAOuF,EAAiBkD,EAAaf,SAAS1B,MAA9C,MACKyC,EAAajD,MAAMrE,QAAQ,GAAIoE,EAAiBkD,EAAaf,SAASE,OACjFW,GACE,yBAAKvI,UAAU,yBACX,qCAAOuF,EAAgB,QAAYS,MAAnC,MACKuC,EAAgB/C,MAAMrE,QAAQ,GAAIoE,EAAgB,QAAYqC,OACzEc,GACE,yBAAK1I,UAAU,sBACX,qCAAOuF,EAAgB,KAASS,MAAhC,MACK0C,EAAalD,MAAMrE,QAAQ,GAAIoE,EAAgB,KAASqC,QAGrE,MAAO,GAGnB,SAASe,EAAY3K,GAAO,IAChB4K,EAAwB5K,EAAxB4K,SAAUrB,EAAcvJ,EAAduJ,UAGdsB,EAAiB,GAQrB,OAN6B,MAAxBD,EAASE,cACVD,EAA+B,SAAdtB,GAAsC,QAAdA,EAAxB,UACIqB,EAASG,KAAK5H,QAAQ,GAD1B,oBAEMyH,EAASG,KAAK,KAAK5H,QAAQ,UAG3B6H,IAAlBJ,EAAShI,MAAwC,OAAlBgI,EAAShI,KAAiB,4BACxD,4BAAKgI,EAASK,GACd,sCAAQL,EAAShI,KAAKO,QAAQ,GAA9B,MACA,4BAA6B,MAAxByH,EAASE,aAAuBF,EAASE,YAAY3H,QAAQ,IAClE,4BAAK0H,GACL,4BAA6B,MAAxBD,EAASE,aAAT,UAAmCF,EAASM,QAAQ/H,QAAQ,GAA5D,OACE,GAId,SAASgI,EAAcnL,GAAO,IACzBoL,EAAoCpL,EAApCoL,UAAWC,EAAyBrL,EAAzBqL,UAAW9B,EAAcvJ,EAAduJ,UAG1B+B,EAAa,OAAQC,EAAa,aAClCC,EAAa,OACC,QAAdH,GAAqC,SAAd9B,GACvB+B,EAAa,kBACbC,EAAa,uBACbC,EAAa,mBACQ,QAAdH,GAAqC,SAAd9B,GAC9B+B,EAAa,kBACbC,EAAa,iBACbC,EAAa,aACQ,SAAdH,GAAsC,SAAd9B,IAC/B+B,EAAa,mBAIjB,IAnBgC,EAmB5BG,EAAW,EAAGC,EAAY,EAnBE,cAoBXN,GApBW,IAoBhC,2BAA+B,CAAC,IAAvBR,EAAsB,QAC3Ba,GAAYb,EAASE,YAAcF,EAASE,YAAc,EAC1DY,GAAad,EAASG,KAAOH,EAASG,KAAO,GAtBjB,8BAwBhC,IAAIY,EACA,wBAAI3J,UAAU,mCAAmCC,MAAO,CAACgB,SAAS,SAC9D,wBAAIjB,UAAU,cAAc4J,QAAS,GAArC,2BACA,0CAAgBH,EAAStI,QAAQ,GAAjC,OACA,gDAAmBuI,EAAU,KAAKvI,QAAQ,IAC1C,mDAAyBuI,EAAUD,GAAUtI,QAAQ,GAArD,MAIR,OAASiI,EACT,yBAAKpJ,UAAU,8BACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,iCACf,2BAAOA,UAAU,sBACTC,MAAO,CAAC,MAAQ,OAAQ4J,YAAY,UACxC,+BACKF,EACD,wBAAI3J,UAAU,mCAAmCC,MAAO,CAACgB,SAAS,SAC9D,sCACA,4BAAKqI,GACL,4BAAKC,GACL,4BAAKC,GACL,4DAEHJ,EAAU9J,KAAI,SAACsJ,EAAUrJ,GACtB,OAAO,kBAACoJ,EAAD,CAAaC,SAAUA,EACVrB,UAAWA,EACX/H,IAAG,UAAKD,cAQ3C,GC9Pb,SAASuK,EAAsBC,EAAeC,GAI1C,IAHA,IAAIC,EAAQ,GAERC,EAAU/L,IAAO4L,EAAc,IAAII,MAAMH,GACpCI,EAAOjM,IAAO4L,EAAc,IAAKK,EAAKC,SAASH,GAAUE,EAAKE,IAAI,EAAGN,GAC1EC,EAAMM,KAAKH,EAAK7L,OAAO4G,EAAiB6E,GAAjB,mBAE3B,OAAOC,E,IChBIO,E,kDDqBX,WAAYxM,GAAO,IAAD,uBACd,cAAMA,IA2BVyM,mBAAqB,SAACC,GAEE,SAAhBA,EAAS,IACT,EAAKrB,UAAYqB,EAAS,GAC1BC,aAAaC,QAAQ,4BAA6BF,EAAS,IAC3D,EAAKG,4BACkB,SAAhBH,EAAS,IAChB,EAAKnD,UAAYmD,EAAS,GAC1BC,aAAaC,QAAQ,4BAA6BF,EAAS,IAC3D,EAAKG,4BACkB,SAAhBH,EAAS,KAChBC,aAAaC,QAAQ,4BAA6BF,EAAS,IAC3D,EAAKtE,SAAS,CAAC0E,aAAcJ,EAAS,OAxC5B,EA4ClBK,gBAAkB,SAAC5H,GACf,IACI6H,EADA3E,EAAY,EAAK5C,MAAM4C,UAErB4E,EAAQ9H,EAAME,OAAO1D,GAGrBuL,EAAqC,SAAnB,EAAK3D,UAAuB,OAAS,EAAKA,UAElE,GAAc,oBAAV0D,GAIA,IAFAD,EAAe3E,EAAU/G,KAAI,SAAC6L,GAAD,OAAUhN,IAAOgN,GAAM3E,SAAS,EAAG0E,OAE/C,GAAGb,SAAS,EAAK5G,MAAMkD,WAAW,IAAI,CACnD,IAAIyE,EAAajN,IAAOkN,IAAIlN,IAAO,EAAKsF,MAAMkD,WAAW,IAAI2D,IAAjC,eAAuCY,EAAiB,IAAK,EAAKzH,MAAMkD,WAAW,IAC/GqE,EAAe,CAAC,EAAKvH,MAAMkD,WAAW,GAAIyE,SAG9CJ,EAAe3E,EAAU/G,KAAI,SAAC6L,GAAD,OAAUhN,IAAOgN,GAAMb,IAAI,EAAGY,OAE1C,GAAGlK,QAAQ,EAAKyC,MAAMkD,WAAW,MAE9CqE,EAAe,CADE7M,IAAOuI,IAAIvI,IAAO,EAAKsF,MAAMkD,WAAW,IAAIH,SAAjC,eAA4C0E,EAAiB,IAAK,EAAKzH,MAAMkD,WAAW,IACxF,EAAKlD,MAAMkD,WAAW,KAI1D,EAAK2E,iBAAiBnE,QAAQjB,aAAa8E,IArE7B,EAyElB9E,aAAe,SAACV,GACRA,IAEAmF,aAAaC,QAAQ,4BACTpF,EAAMlG,KAAI,SAAC+C,GAAD,OAASA,EAAI9D,OAAO,QAAM+D,KAAK,MACrD,EAAK8D,SAAS,CAACC,UAAUb,GAAQ,EAAKqF,4BA3E1C,IAAIxE,EAAYsE,aAAaY,QAAQ,6BACjClC,EAAYsB,aAAaY,QAAQ,6BACjChE,EAAYoD,aAAaY,QAAQ,6BACjCC,EAAYb,aAAaY,QAAQ,6BANvB,OAQd,EAAK9H,MAAM,CACPgI,UAAU,GACV7C,SAAS,GAETvC,UAAWA,EACGA,EAAUvJ,MAAM,KAAKwC,KAAI,SAAA+C,GAAG,OAAElE,IAAOkE,EAAK,QAC1C,CAAClE,MAAUA,OACzB2M,aAAcU,GAAwB,OACtC7E,WAAY,CAACxI,MAAUA,QAG3B,EAAKoJ,UAAYA,GAAwB,OACzC,EAAK8B,UAAYA,GAAwB,MAGzC,EAAKiC,iBAAmBI,IAAMC,YAE9B,EAAKzF,aAAe,EAAKA,aAAa0F,KAAlB,gBAzBN,E,uEAmFd,IAAMrE,EAAYT,KAAKS,UAEnBsE,EAAS,GACU,QAAnB/E,KAAKuC,UACa,QAAd9B,EACAsE,EAAS1N,IAAO2N,WACK,SAAdvE,EACPsE,EAAS/B,EAAsBhD,KAAKrD,MAAM4C,UAAWkB,GAChC,UAAdA,IACPsE,EAAS1N,IAAO4N,UAGF,SAAdxE,IACAsE,EAAS/B,EAAsBhD,KAAKrD,MAAM4C,UAAWkB,IAI7D,IAAIvL,EAAO6P,EAAOvM,KAAI,SAAC8K,GAAU,MAAO,CAACnB,EAAEmB,MAGvCpO,EADmB,QAAnB8K,KAAKuC,UACEvC,KAAKkF,eAAehQ,GAEpB8K,KAAKmF,gBAAgBjQ,GAvBV,oBA2BAA,GA3BA,IA2BtB,2BAA2B,CAAC,IAAnBkQ,EAAkB,QACvBA,EAAUhD,QAAUgD,EAAUpD,aAAe,EAAIoD,EAAUnD,KAAKmD,EAAUpD,YAAc,MA5BtE,8BAgCtBhC,KAAKV,SAAS,CAACwC,SAAS5M,M,qCAGbA,GAAM,IACbmQ,EADY,OAEhB,GAAuB,SAAnBrF,KAAKS,UAAqB,CAE1B4E,EAAoBC,IAAUtF,KAAKrD,MAAMgI,WACjC,SAACY,GAAD,OAAcA,EAASjC,KAAKkC,cAAc,EAAK7I,MAAM4C,UAAU,KACjDgG,EAASjC,KAAKC,SAAS,EAAK5G,MAAM4C,UAAU,GAAG8D,MAAM,WAK3E,IAFA,IAAIoC,EAAQ,GAEHC,EAAO,EAAGA,EAAO,GAAIA,IAC1BD,EAAMhC,KAAKpM,IAAO,CAAEqO,SAAQjO,OAAO4G,EAAgB,KAAhB,kBACnCoH,EAAMhC,KAAKpM,IAAO,CAAEqO,OAAMC,OAAQ,KAAKlO,OAAO4G,EAAgB,KAAhB,kBAIlD,IAAIuH,EAAWN,IAASD,GAAmB,SAAAQ,GAAC,OAAIA,EAAEvC,KAAK7L,OACvC4G,EAAiB,EAAKoC,WAAtB,oBAEhBvL,EAAOuQ,EAAMjN,KAAI,SAACsN,GACd,IAAIC,EAAaH,EAASI,IAAIF,GAC9B,OAAKC,EACE,CAAE5D,EAAE2D,EACPhM,KAAMwL,IAAQS,GAAY,SAAAE,GAAC,OAAIA,EAAEnM,QACjCkI,YAAasD,IAAQS,GAAY,SAAAxK,GAAG,OAAIA,EAAIyG,eAC5CC,KAAMqD,IAAQS,GAAY,SAAAxK,GAAG,OAAIA,EAAIzB,KAAKyB,EAAIyG,gBAJ1B,CAACG,EAAE2D,EAAWhM,KAAK,KAAMkI,YAAY,KAAMC,KAAK,aAQ3E,CAEDoD,EAAoBC,IAAUtF,KAAKrD,MAAMgI,WACjC,SAACY,GAAD,OAAcA,EAASjC,KAAKkC,cAAc,EAAK7I,MAAM4C,UAAU,KACjDgG,EAASjC,KAAKC,SAAS,EAAK5G,MAAM4C,UAAU,GAAG8D,MAAM,EAAK5C,eAGhF,IAAIyF,EAAUZ,IAAUD,GAAmB,SAAAQ,GAAC,OAAIA,EAAEvC,KAAK7L,OAAO,QAE9DyO,EAAUA,EAAQ1N,KACd,SAAC+C,GACG,MAAO,CACH,EAAKA,EAAI,GAET,KAAQ+J,IAAQ/J,EAAI,IAAI,SAAA0K,GAAC,OAAIA,EAAEnM,QAC/B,IAAOwL,IAAO/J,EAAI,IAAI,SAAA0K,GAAC,OAAIA,EAAEjE,eAC7B,KAAQsD,IAAO/J,EAAI,IAAI,SAAA0K,GAAC,OAAIA,EAAEjE,aAAe,EAAIiE,EAAEjE,YAAciE,EAAEnM,KAAO,QAE1E,MAASwL,IAAS/J,EAAI,IAAI,SAAAsK,GAAC,OAAIA,EAAE7D,mBAK7C,IAvBC,EAuBGmE,EAAa9H,EAAiB2B,KAAKS,WAAtB,gBAvBhB,cAwBqBvL,GAxBrB,IAwBD,2BAA2B,CAAC,IAAnBkR,EAAkB,QAEnBC,EAAgBf,IAAUY,GAAS,SAAAI,GAAG,OAAIjP,IAAOiP,EAAInE,EAAG,KAAK1K,OAAO0O,KAAgBC,EAAUjE,KAE3E,SAAnBnC,KAAKS,YACL2F,EAAUjE,EAAV,UAAiB9K,IAAO+O,EAAUjE,EAAGgE,GAAYI,QAAQ,QAAQ9O,OAAO,MAAxE,YACoBJ,IAAO+O,EAAUjE,EAAGgE,GAAY9C,MAAM,QAAQ5L,OAAO,iBAG7E2O,EAAUtM,KAAOwL,IAAQe,GAAe,SAAA9K,GAAG,OAAIA,EAAIiL,MAAQ,GAAKjL,EAAIzB,KAAM,QAC1EsM,EAAUpE,YAAcsD,IAAQe,GAAe,SAAA9K,GAAG,OAAIA,EAAIiL,MAAQ,GAAKjL,EAAIkL,IAAK,QAChFL,EAAUnE,KAAOqD,IAAQe,GAAe,SAAA9K,GAAG,OAAIA,EAAIiL,MAAQ,GAAKjL,EAAI0G,KAAM,SAnC7E,+BAuCL,OAAO/M,I,sCAGKA,GACZ,GAAuB,SAAnB8K,KAAKS,UAAqB,CAE1B,IAAIrJ,EAAYC,IAAO2I,KAAKrD,MAAM4C,UAAU,IACxChI,EAAUF,IAAO2I,KAAKrD,MAAM4C,UAAU,IAAII,IAAI,CAAC,KAAO,EAAG,QAAU,EAAG,QAAU,IAAI6D,IAAI,EAAG,KAE3FkD,EAAYrP,IAAOD,GAAWoM,IAAI,GAAI,MAK1CtO,EAJqBoQ,IAAUtF,KAAKrD,MAAMgI,WAC1B,SAACpJ,GAAD,OAASA,EAAI+H,KAAK/J,UACdnC,EAAWG,EAAS,SAAU,OAASgE,EAAI+H,KAAKC,SAASmD,MAEvDlO,KAAI,SAAC8N,GACvB,MAAO,CAACnE,EAAEmE,EAAIhD,KAAK7L,OAAO,gBAClBqC,KAAMwM,EAAIxM,KACVkI,YAAasE,EAAItE,YACjBC,KAAMqE,EAAItE,aAAe,EAAIsE,EAAIxM,KAAKwM,EAAItE,YAAa,UAE9D2E,cAEJ,CACD,IAAMR,EAAa9H,EAAiB2B,KAAKS,WAAtB,iBAGfyF,EAAUZ,IAAUtF,KAAKrD,MAAMgI,WAAW,SAAAkB,GAAC,OAAIA,EAAEvC,KAAK7L,OAAO0O,MAEjED,EAAUA,EAAQ1N,KACd,SAAC+C,GACG,MAAO,CACH,EAAKA,EAAI,GAET,KAAQ+J,IAAQ/J,EAAI,IAAI,SAAA0K,GAAC,OAAIA,EAAEnM,QAC/B,IAAOwL,IAAO/J,EAAI,IAAI,SAAA0K,GAAC,OAAIA,EAAEjE,eAC7B,KAAQsD,IAAO/J,EAAI,IAAI,SAAA0K,GAAC,OAAIA,EAAEjE,aAAe,EAAIiE,EAAEjE,YAAciE,EAAEnM,KAAO,YAbrF,oBAkBqB5E,GAlBrB,IAkBD,2BAA2B,CAAC,IAAnBkR,EAAkB,QAEnBC,EAAgBf,IAAUY,GAAS,SAAAI,GAAG,OAAIA,EAAInE,IAAMiE,EAAUjE,KAE3C,SAAnBnC,KAAKS,YAEL2F,EAAUjE,EAAV,UAAiB9K,IAAO+O,EAAUjE,EAAGgE,GAAYI,QAAQ,QAAQ9O,OAAO,MAAxE,YACoBJ,IAAO+O,EAAUjE,EAAGgE,GAAY9C,MAAM,QAAQ5L,OAAO,iBAE7E2O,EAAUtM,KAAOwL,IAAQe,GAAe,SAAA9K,GAAG,OAAIA,EAAIzB,QACnDsM,EAAUpE,YAAcsD,IAAOe,GAAe,SAAA9K,GAAG,OAAIA,EAAIkL,OACzDL,EAAUnE,KAAOqD,IAAOe,GAAe,SAAA9K,GAAG,OAAIA,EAAI0G,SA7BrD,+BAiCL,OAAO/M,I,0CAIS,IAAD,OAiBfJ,EAAU,MAAD,sBAhBU,SAAC4B,EAAUC,GAC1B,GAAe,MAAXA,EAAgB,CAChB,IAAIiQ,EAAWlQ,EAASkQ,SACxBA,EAAWA,EAASpO,KAAI,SAAC+C,GAAS,MAAO,CAAC,KAAOlE,IAAOkE,EAAIsL,gBAC5C,KAAOtL,EAAIzB,KAAM,YAAcyB,EAAIyG,gBACnD,EAAK1C,SAAS,CAACqF,UAAUiC,GACT,EAAK7C,0BAErB,IAAI+C,EAAQF,EAASpO,KAAI,SAAC+C,GAAS,OAAOA,EAAI+H,QAC9C,EAAKhE,SAAS,CAACO,WAAY,CAACxI,IAAOkN,IAAIuC,GAAOnH,IAAI,CAAC,KAAO,EAAG,OAAS,EAAG,OAAS,EAAG,YAAc,IAAID,SAAS,EAAG,KACvFrI,IAAOuI,IAAIkH,GAAOnH,IAAI,CAAC,KAAO,EAAG,OAAS,EAAG,OAAS,EAAG,YAAc,IAAI6D,IAAI,EAAG,aAEhHpL,MAAM,2B,+BASZ,GAAI4H,KAAKrD,MAAMmF,SAAS5L,OAAS,EAAE,CAC/B,IAAI6Q,EAAU,UAAM3I,EAAiB4B,KAAKuC,WAAWrD,MAAvC,WAEd,GAAIc,KAAKrD,MAAM4C,UAAU,GAAG9H,OAAO,OAASuI,KAAKrD,MAAM4C,UAAU,GAAG9H,OAAO,KACvEsP,GAAU,aAAU/G,KAAKrD,MAAM4C,UAAU,GAAG9H,OAF7B,qBAIf,GAAuB,SAAnBuI,KAAKuC,WAA2C,SAAnBvC,KAAKS,UAAqB,CACvD,IAAIuG,EAAgB3P,IAAO2I,KAAKrD,MAAMmF,SAAS9B,KAAKrD,MAAMmF,SAAS5L,OAAS,GAAGiM,EAC3E9D,EAAgB,KAAhB,kBAA8C5G,OANvC,eAOXsP,GAAU,eACM/G,KAAKrD,MAAM4C,UAAU,GAAG9H,OAR7B,eAOD,iDAEIuP,QAEdD,GAAU,eACM/G,KAAKrD,MAAM4C,UAAU,GAAG9H,OAZ7B,eAWD,iDAEIuI,KAAKrD,MAAM4C,UAAU,GAAG9H,OAb3B,gBAkBvB,OAASuI,KAAKrD,MAAMmF,SAAS5L,OAAS,EACrC,6BACG,yBAAKgD,UAAU,iBACX,yBAAKA,UAAU,SACX,kBAAC+N,EAAA,EAAD,CAAQ/N,UAAU,iCAAiCL,GAAG,kBAC9CuD,QAAS4D,KAAKiE,iBADtB,aAIJ,yBAAK/K,UAAU,oBAAoB+G,MAAM,UACrC,wBAAI/G,UAAU,oBAAoB6N,IAEtC,yBAAK7N,UAAU,QAAQ+G,MAAM,SACzB,kBAACgH,EAAA,EAAD,CAAQ/N,UAAU,kCAAkCL,GAAG,kBAC/CuD,QAAS4D,KAAKiE,iBADtB,UAKR,yBAAK/K,UAAU,YACX,kBAACqH,EAAD,CAAerL,KAAM8K,KAAKrD,MAAMmF,SAChBtB,eAAgB/B,EAAiBuB,KAAKrD,MAAMqH,cAC5CvD,UAAWT,KAAKS,aAEpC,yBAAKvH,UAAU,mCACX,yBAAKA,UAAU,yBAAyB+G,MAAM,UAC1C,kBAAClC,EAAD,CAAkBE,QAAS,OAAQC,SAAU8B,KAAKuC,UAC9BpE,cAAe6B,KAAK2D,sBAE5C,yBAAKzK,UAAU,yBAAyB+G,MAAM,UAC1C,kBAAClC,EAAD,CAAkBE,QAAS,OAAQC,SAAU8B,KAAKS,UAC9BtC,cAAe6B,KAAK2D,sBAE5C,yBAAKzK,UAAU,yBAAyB+G,MAAM,UAC1C,kBAAClC,EAAD,CAAkBE,QAAS,OAAQC,SAAU8B,KAAKrD,MAAMqH,aACpC7F,cAAe6B,KAAK2D,sBAE5C,yBAAKzK,UAAU,yBAAyB+G,MAAM,UAC1C,kBAAC,EAAD,CAAuBiH,IAAKlH,KAAKwE,iBACT3E,WAAYG,KAAKrD,MAAMkD,WACvBN,UAAWS,KAAKrD,MAAM4C,UACtBH,aAAcY,KAAKZ,iBAGnD,kBAACiD,EAAD,CAAeC,UAAWtC,KAAKrD,MAAMmF,SACrBS,UAAWvC,KAAKuC,UAChB9B,UAAWT,KAAKS,aAEhC,yBAAKvH,UAAU,eACX,yBAAKA,UAAU,iBAAiB0E,KAAK,UACjC,0BAAM1E,UAAU,WAAhB,oB,GAjVqBoH,aCjB5B7B,EAAmB,CAC5B,YAAe,CAAC,IAAM,cAAe,MAAS,cAAe,KAAO,OACpE,KAAQ,CAAC,IAAM,OAAQ,MAAS,OAAQ,KAAO,KAC/C,KAAQ,CAAC,IAAM,OAAQ,MAAS,OAAQ,KAAO,KAC/C,QAAW,CAAC,IAAM,UAAW,MAAS,oBAAqB,KAAO,UAGzDL,EAAmB,CAC5B,IAAO,CAAC,MAAS,WACjB,KAAQ,CAAE,MAAS,WAGVC,EAAmB,CAC5B,KAAQ,CAAC,MAAS,SAAU,gBAAmB,QAAS,iBAAoB,gBAC5E,IAAO,CAAC,MAAS,QAAS,gBAAmB,OAAQ,iBAAoB,cACzE,KAAQ,CAAC,MAAS,SAAU,gBAAmB,UAAW,iBAAoB,WAC9E,MAAS,CAAC,MAAS,UAAW,gBAAmB,OAAQ,iBAAoB,aCyD1E,SAAS8I,GAAgBjQ,GAAO,IAAD,EACkBa,mBAAS,IAD3B,mBAC3BqP,EAD2B,KACPC,EADO,OAEgBtP,mBAAS,IAFzB,mBAE3BuP,EAF2B,KAERC,EAFQ,OAGIxP,mBAAS,IAHb,mBAG3ByP,EAH2B,KAGdC,EAHc,KAW5BC,EAAe,SAACrL,GAIlB,IAAMsL,EAAYtL,EAAME,OAAOqL,MAEzBC,EAAyB,aAAdF,GACAP,EAAmBhK,OACjBkK,EAMnBxS,EAAU,OAAQ,YAAagT,EAJT,CAAE,MAASH,EACT,MAASE,EACT,SAAYL,KAKlCM,EAAyB,SAACpR,EAAUC,GACvB,MAAXA,GAA6B,MAAXA,GAClB0Q,EAAsB3Q,EAASyG,UAC/BoK,EAAqB7Q,EAAS2G,UAE9BjF,MAAM,sBAIVQ,EAAY,8BAQhB,OAJAT,qBAAU,WACNrD,EAAU,MAAO,QAASgT,KAC3B,IAGC,6BACI,yBAAK5O,UAAU,QACX,kBAAC,IAAD,CAAawF,MAAO8I,EAAa1I,SA3CtB,SAACzC,GACpBoL,EAAepL,EAAME,OAAOmC,QA2CJ6F,IAAK,GAAI3E,IAAK,IAAKmI,QAAQ,UAAUnJ,KAAK,KAC1CoJ,QAAQ,KAAKC,aA1CnB,SAACvJ,GACnB,MAAM,GAAN,OAAUA,EAAV,YA2CI,yBAAKxF,UAAU,wCACX,yBAAKA,UAAU,QAAQ+G,MAAM,UACzB,kBAACiI,GAAD,CAAaxJ,MAAM,WAAWyJ,gBAAiBT,EAC/B5L,WAAYsL,KAEhC,yBAAKlO,UAAU,QAAQ+G,MAAM,UACzB,kBAACiI,GAAD,CAAaxJ,MAAM,UAAUyJ,gBAAiBT,EAC9B5L,WAAYwL,OAShD,SAASY,GAAYhR,GAAO,IACjBwH,EAAsCxH,EAAtCwH,MAAOyJ,EAA+BjR,EAA/BiR,gBAAiBrM,EAAc5E,EAAd4E,WADR,EAEiB/D,oBAAS,GAF1B,mBAEfqQ,EAFe,KAEFC,EAFE,KAWnBC,EAAuB,aAAV5J,EAAuB,YAAc,UAChDnH,EAAUF,IAAOyE,EAAWvE,SAE9BgR,EAAkBH,EAClB,wBAAIR,MAAOlJ,GAAX,OAAsB,6BAAtB,SAEA,wBAAIxF,UAAU,cAAc0O,MAAOlJ,GAAnC,iBACmBnH,EAAQE,OAAO,SAAS,6BAD3C,cAESF,EAAQG,KAAKL,MAAU,KAFhC,cAE0CE,EAAQG,KAAKL,MAAU,KAAK,EAAE,IAAI,GAF5E,mBAMJ,OAASyE,EAAWsB,MAChB,kBAAC6J,EAAA,EAAD,CAAQrI,KAAK,KAAK4J,OAAK,EAACT,QAAQ,SACxB3L,QAAS+L,EACTP,MAAOlJ,EACP+J,aAvBI,SAACpM,GACbgM,GAAe,IAuBPK,aArBK,SAACrM,GACdgM,GAAe,KAqBP,wBAAInP,UAAU,kDAAkD0O,MAAOlJ,GAClE4J,GAEL,wBAAIpP,UAAU,iBACbqP,GAGT,kBAACtB,EAAA,EAAD,CAAQrI,KAAK,KAAK4J,OAAK,EAACpM,QAAS+L,EAAiBP,MAAOlJ,GACrD,wBAAIxF,UAAU,kDAAkD0O,MAAOlJ,GAClE4J,GAEL,wBAAIpP,UAAU,kBACd,wBAAI0O,MAAOlJ,GAAX,UC9KQiK,QACW,cAA7BhU,OAAOC,SAASgU,UAEe,UAA7BjU,OAAOC,SAASgU,UAEhBjU,OAAOC,SAASgU,SAASC,MACvB,2D,kBCFAC,GAAQjT,SAASyC,eAAe,QAClCwQ,IACFhM,IAASC,OAAO,kBAACjE,EAAD,MAA0BgQ,IAG5C,IAAMC,GAAkBlT,SAASyC,eAAe,mBAC5CyQ,IACFjM,IAASC,OAAO,kBAAClF,EAAD,CAAiBK,MAAO,IAAM6Q,IAIhD,IAAMC,GAAgBnT,SAASyC,eAAe,mBAC1C0Q,IACFlM,IAASC,OAAO,kBAAClF,EAAD,CAAiBK,MAAO,IAAM8Q,IAGhD,IAAMC,GAAepT,SAASyC,eAAe,kBACzC2Q,IACFnM,IAASC,OAAO,kBAACzC,EAAD,MAAmB2O,IAGrC,IAAIC,GAAmBrT,SAASyC,eAAe,oBAC3C4Q,IACApM,IAASC,OAAO,kBAAClC,EAAD,CAAeC,KAAM,aAAeoO,KAExDA,GAAmBrT,SAASyC,eAAe,4BAEvCwE,IAASC,OAAO,kBAAClC,EAAD,CAAeC,KAAM,QAAUoO,IAEnD,IAAMC,GAAatT,SAASyC,eAAe,qBACvC6Q,IACArM,IAASC,OAAO,kBAACO,EAAD,MAAc6L,IAGVtT,SAASyC,eAAe,6BAE5CxD,EAAU,MAAO,gBAAiB2H,EAAuB,IAG7D,IAAM2M,GAAqBvT,SAASyC,eAAe,oBAC/C8Q,IACAtM,IAASC,OAAO,kBAAC,EAAD,MAAiBqM,IAGrC,IAAMC,GAAkBxT,SAASyC,eAAe,6BAC5C+Q,IACAvM,IAASC,OAAO,kBAACoK,GAAD,MAAqBkC,IAGzC,IAAMC,GAAyBzT,SAASyC,eAAe,2BACnDgR,IACAxM,IAASC,OAAO,kBAACjE,EAAD,MAA0BwQ,IDgExC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhT,QAAQgT,MAAMA,EAAMC,c","file":"static/js/main.cec8affd.chunk.js","sourcesContent":["var domain = window.location.host\r\n\r\nif (!domain.startsWith(\"http\")){\r\n  domain = `http://${domain}`\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n\r\nexport function APILookup(method, endpoint, callback, data){\r\n    let jsonData;\r\n    if (data){\r\n      jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `${domain}/api/${endpoint}`\r\n    \r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken){\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The current states request was an error\"}, 400)\r\n    }\r\n    \r\n    xhr.send(jsonData)\r\n\r\n}","import React, {useEffect, useState } from 'react'\r\nimport moment from 'moment';\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function BoilerStateRow(props){\r\n    const {boilerState} = props\r\n    const startTime = moment(boilerState.start_time)\r\n    const endTime = moment(boilerState.end_time)\r\n\r\n    return <tr>\r\n              <td>{startTime.format(\"DD MMM HH:mm\")}</td>\r\n              <td>{endTime.format(\"DD MMM HH:mm\")}</td>\r\n              <td>{endTime.diff(startTime, 'm')}</td>\r\n              <td>{boilerState.hot_water_state ? \"ON\":\"OFF\"}</td>\r\n              <td>{boilerState.heating_state ? \"ON\":\"OFF\"}</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function BoilerStateList(prop){\r\n    const [boilerStatesInit, setBoilerStatesInit] = useState([])\r\n    const {limit} = prop\r\n    \r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setBoilerStatesInit(response)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n        //hide the spinner\r\n        const spinnerEl = document.getElementById('history-table-spinner')\r\n        if (spinnerEl){\r\n          spinnerEl.innerHTML = \"\"\r\n        }\r\n      }\r\n      APILookup('GET', `boilerStates/${limit}`, myCallback, limit)\r\n    }, [])\r\n      \r\n\r\n      return boilerStatesInit.map((boilerState, index)=>{\r\n        return <BoilerStateRow boilerState={boilerState} key={`${index}`}/>\r\n      })\r\n  }","export function hideSpinner(id){\r\n    const spinnerEl = document.getElementById(id)\r\n    \r\n    if (spinnerEl){\r\n        spinnerEl.innerHTML = \"\"\r\n    }\r\n}","import React, { useState, useEffect, Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport moment from 'moment';\r\n\r\nimport {hideSpinner} from '../common'\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nexport function HotWaterScheduleCard(props){\r\n    const [schedule, setSchedule] = useState([])\r\n\r\n\r\n    const getScheduleCallback = (response, status) =>{\r\n        if (status === 200 || status === 201) {\r\n            setSchedule(response)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n      \r\n        //hide the spinner\r\n        hideSpinner('boost-states-card-spinner')\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        APILookup('GET', 'schedule', getScheduleCallback)\r\n    }, [])\r\n\r\n    return (\r\n        <table className=\"table table-striped\" style={{width:\"100%\"}}>\r\n            <thead class=\"thead-dark\">\r\n            <tr>\r\n                <th>Start Time</th>\r\n                <th>End Time</th>\r\n                {/* <th>Hot Water</th> */}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                {schedule.map((schedule, index)=>{\r\n                    return <ScheduleRow schedule={schedule} key={index}/>})}\r\n            </tbody>\r\n        </table> \r\n    )\r\n}\r\n\r\n\r\nfunction ScheduleRow(props){\r\n    const {schedule, key} = props\r\n\r\n    const startTime = moment(schedule.start_time)\r\n    const endTime = moment(schedule.end_time)\r\n    return ( \r\n        <tr className={moment().isBetween(startTime, endTime)\r\n            ? \"table-danger\"\r\n            :\"\"}>\r\n            <td>{startTime.format(\"DD MMM HH:mm\")}</td>\r\n            <td>{endTime.format(\"DD MMM HH:mm\")}</td>\r\n            {/* <td>{schedule.hot_water_state?\"ON\":\"OFF\"}</td> */}\r\n        </tr>\r\n        \r\n    )\r\n\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {hideSpinner} from '../common'\r\nimport moment from 'moment';\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function AgileRateRow(props){\r\n    const {agileRate, todaysMin, tmrsMin} = props\r\n    const startTime = moment(agileRate.valid_from)\r\n    const endTime = moment(agileRate.valid_to)\r\n    const rate = agileRate.rate\r\n    const timeNow = moment()\r\n    // var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    var rowColour = \"\", style\r\n    if (todaysMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'info'\r\n    } else if (tmrsMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'primary'\r\n    } else if (rate > 15){\r\n        rowColour = 'danger'\r\n    } else if (rate < 0){\r\n        rowColour = 'success'\r\n    } else if (timeNow.isAfter(endTime)){\r\n        rowColour = 'secondary'\r\n    } \r\n    else if (timeNow.isBetween(startTime, endTime)){\r\n        rowColour = 'light'\r\n    }\r\n\r\n    //setting font weight\r\n    if (timeNow.isBetween(startTime, endTime)){\r\n        style = {fontSize:'larger', fontWeight:'bold'}\r\n    }\r\n\r\n    return <tr className={`table-${rowColour}`}>\r\n                <td style={style}>\r\n                  {startTime.format(\"ddd DD MMM HH:mm\")}\r\n                </td>\r\n                <td style={style}>{endTime.format(\"ddd DD MMM HH:mm\")}</td>\r\n                <td style={style}>{rate.toFixed(3)}p</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function AgileRateList(prop){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setAgileRatesInit(response.rates)\r\n            setTodaysMin(response.todaysMin)\r\n            setTmrsMin(response.tmrsMin)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n        \r\n        //hide the spinner\r\n        hideSpinner('agile-rates-table-spinner')\r\n      }\r\n      APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return agileRatesInit.map((agileRates, index)=>{\r\n        return <AgileRateRow agileRate={agileRates} \r\n                            todaysMin={todaysMin}\r\n                            tmrsMin={tmrsMin}                    \r\n                            key={`${index}`}/>\r\n    })\r\n  }\r\n\r\nexport function AgileRateCard(props){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    const {type} = props\r\n\r\n    const populateCard = (type) => {\r\n        //don't do anythin if no data has been received\r\n        if (agileRatesInit.length < 1){ return ''}\r\n        \r\n        //setting the min rate time\r\n        var todaysMinRateTime = moment(todaysMin[0])\r\n        var tmrsMinRateTime = moment(tmrsMin[0])\r\n\r\n        var timeNow = moment()\r\n        var currentRate = 9999, nextTwoRates = [9999, 9999]\r\n        for (var i = 0; i < agileRatesInit.length; i++){\r\n            var startTime = moment(agileRatesInit[i].valid_from)\r\n            var endTime = moment(agileRatesInit[i].valid_to)\r\n            //getting the current rate\r\n            if (timeNow.isBetween(startTime, endTime)){\r\n                currentRate = agileRatesInit[i].rate\r\n                var currentValidFrom = moment(agileRatesInit[i].valid_from)\r\n                //storing the next two rates\r\n                if (i < agileRatesInit.length - 1){\r\n                    nextTwoRates[0] = agileRatesInit[i+1].rate\r\n                }\r\n                if (i < agileRatesInit.length - 2){\r\n                    nextTwoRates[1] = agileRatesInit[i+2].rate\r\n                }\r\n            }\r\n\r\n            //getting today's and tmr's min rates\r\n            var todaysMinRate, tmrsMinRate\r\n            if (startTime.isSame(todaysMinRateTime, 'm')){\r\n                todaysMinRate = agileRatesInit[i].rate\r\n            } else if (startTime.isSame(tmrsMinRateTime, 'm')){\r\n                tmrsMinRate = agileRatesInit[i].rate\r\n            }\r\n        }\r\n        \r\n        return ( type === 'homepage' ?\r\n        (<div>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Current</h4>\r\n                    <h5 className=\"lead\">{currentRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        since {currentValidFrom.format(\"HH:mm\")}</span>\r\n                </div>\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Today's Lowest</h4>\r\n                    <h5 className=\"lead\">{todaysMinRate ? todaysMinRate.toFixed(3): ''}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        at {todaysMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</span>\r\n                </div>\r\n            </div>\r\n            <hr className=\"alert-dark my-4\"></hr>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Next Two</h4>\r\n                    { nextTwoRates[0] !== 9999 && <h5 className=\"lead\">{nextTwoRates[0].toFixed(3)}p</h5>}\r\n                    { nextTwoRates[1] !== 9999 && <h5 className=\"lead\">{nextTwoRates[1].toFixed(3)}p</h5>}\r\n                </div>\r\n                {tmrsMinRate && <div className='col-6'>\r\n                    <h4 className=\"display-6\">Tomorrow's Lowest</h4>\r\n                    <h5 className=\"lead\">{tmrsMinRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>at {tmrsMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</span>\r\n                </div>}\r\n            </div>\r\n        </div>) : (\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Current Rate</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{currentRate.toFixed(3)}p</h3>\r\n                        <h5>since {currentValidFrom.format(\"HH:mm\")}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-titl mb-3\">Today's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{todaysMinRate ? todaysMinRate.toFixed(3) : ''}p</h3>\r\n                        <h5>at {todaysMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Tomorrow's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{tmrsMinRate ? tmrsMinRate.toFixed(3) : ''}{tmrsMinRate && `p`}</h3>\r\n                        {tmrsMinRate && <h5>at {tmrsMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</h5>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n        )\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                setAgileRatesInit(response.rates)\r\n                setTodaysMin(response.todaysMin)\r\n                setTmrsMin(response.tmrsMin)\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            hideSpinner('agile-rates-card-spinner')\r\n        }\r\n        APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return populateCard(type)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nfunction CategoryStatesBlock(props){\r\n\r\n    const {controlState, operationState, \r\n                          boostState, cat} = props\r\n    //setting colours depending on boost states\r\n    var colour\r\n    if (boostState || operationState){\r\n        colour = 'danger'\r\n    } else if (controlState){\r\n        colour = 'warning'\r\n    } else{\r\n        colour = 'success'\r\n    }\r\n\r\n    var catText = cat === \"heating\" ? \"Heating\":'Water' \r\n    var controlText\r\n    if(boostState){\r\n        controlText = \"Boost\\nOn\"\r\n    } else if (!controlState){\r\n        controlText = 'Control\\nOff'\r\n    } else if (cat === 'hotWater'){\r\n        controlText = 'Scheduled\\nControl'\r\n    } else {\r\n        controlText = 'Thermostat\\nControl'\r\n    }\r\n\r\n    const buttonOnClickEvent = (event) =>{\r\n        event.preventDefault()\r\n        // remove focus on button\r\n        event.target.blur()\r\n        var data = {'device': cat, 'state': !controlState}\r\n        //callback for then the state change POST method has returned\r\n        const returnCallBack = (response, status) =>{\r\n            if (status === 201){\r\n                APILookup('GET', 'currentStates', populateCurrentStates, {})\r\n            } else {\r\n                alert('State change failed')\r\n            }\r\n        }\r\n\r\n        APILookup('POST', 'currentStates/change', \r\n                            returnCallBack, data)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={`btn btn-block btn-${colour}`} style={{maxWidth:130, whiteSpace: \"pre-wrap\"}}\r\n                    onClick={buttonOnClickEvent}> \r\n                <h4 class=\"font-weight-bold alert-heading text-center pt-1\">{catText}</h4>\r\n                <hr className={`alert-${colour}`} />\r\n                <h6 className=\"text-center\">{controlText}</h6>\r\n                <hr className={`alert-${colour}`} />\r\n                <OperationStateOnOffText state={operationState} type={0}/>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction OperationStateOnOffText(props){\r\n    const { state, type } = props\r\n    var text = state ? \"ON\" : \"OFF\"\r\n    var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    const className = \"font-weight-bold text-center\"\r\n    return <Tag className={className}>{text}</Tag>\r\n}\r\n\r\n\r\nfunction setBoilerBlock(state){\r\n    //change the colour\r\n    var colour = state ? \"danger\" : \"success\"\r\n    const boilerStateEl = document.getElementById(\"boiler-operation-block\")\r\n    boilerStateEl.className = `alert alert-${colour}`\r\n    ReactDOM.render(<OperationStateOnOffText state={state} type={1}/>, \r\n                    document.getElementById(\"boiler-on-off-text\"))\r\n}\r\n\r\n\r\nexport function populateCurrentStates(response, status){\r\n    setBoilerBlock(response.operation[2])\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.hotWater.state} \r\n                                        operationState={response.operation[0]} \r\n                                        boostState={response.control.hotWater.boost} \r\n                                        cat={\"hotWater\"}/>, \r\n                        document.getElementById(\"hotWater-states-block\"));\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.heating.state} \r\n                                        operationState={response.operation[1]} \r\n                                        boostState={false} \r\n                                        cat={\"heating\"}/>, \r\n                        document.getElementById(\"heating-states-block\"));      \r\n  }","import React, {useEffect, useState} from 'react'\r\nimport {APILookup} from '../lookup'\r\n// import InputSpinner from \"react-native-input-spinner\";\r\n\r\nexport function NestCard(props){\r\n    const [ambientTemp, setAmbientTemp] = useState([])\r\n    const [thermostatTemp, setThermostatTemp] = useState([])\r\n\r\n    // const {type} = props\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                // console.log(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                setThermostatTemp(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                setAmbientTemp(response.traits[\"sdm.devices.traits.Temperature\"][\"ambientTemperatureCelsius\"])\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            \r\n        }\r\n        APILookup('GET', 'googleNest', myCallback)\r\n    }, [])\r\n\r\n    return ( typeof(ambientTemp) === 'number' ?\r\n        <div>\r\n            <h5>Ambient Temp:  {ambientTemp.toFixed(2)} </h5>\r\n            <h5>Thermostat Set Temp: {thermostatTemp.toFixed(2)}</h5>\r\n        </div>\r\n        : \r\n        <div class=\"text-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveContainer, Bar, Line, \r\n        CartesianGrid, XAxis, YAxis, ComposedChart, \r\n        Legend, Tooltip, ReferenceLine } from 'recharts';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport moment from 'moment';\r\n\r\nimport { chartPlotOptions, chartTypeOptions, chartViewOptions} from './index'\r\n\r\nimport { DatePicker } from 'antd';\r\nconst { RangePicker } = DatePicker;\r\n\r\n\r\nexport function ChartButtonGroup(props) {\r\n    const {btnType, stateVar, onValueChange} = props\r\n    \r\n    var btnOptions\r\n    if (btnType === 'type'){\r\n        btnOptions = chartTypeOptions\r\n    } else if (btnType === 'view'){\r\n        btnOptions = chartViewOptions\r\n    } else if (btnType === 'plot'){\r\n        var options = {}\r\n        for (var [key, value] of Object.entries(chartPlotOptions)){\r\n            if (key !== 'rate' && key !== 'avgCost'){\r\n                options[key] = value\r\n            }\r\n        }\r\n        btnOptions = options\r\n    }\r\n\r\n    const handleChange = (val, event) => {\r\n        const source = event.target;\r\n        //defocus the button\r\n        source.blur()\r\n        //callback to parent component as the state is changed\r\n        onValueChange([btnType, val])\r\n    };\r\n\r\n    return (\r\n      <ToggleButtonGroup type=\"radio\" name=\"options\" size='lg'\r\n                            defaultValue={stateVar} onChange={handleChange}>\r\n          {Object.keys(btnOptions).map((key, idx)=>{\r\n            return <ToggleButton value={key} key={`${idx}`}>{btnOptions[key].label}</ToggleButton>})}\r\n      </ToggleButtonGroup>\r\n    );\r\n}\r\n  \r\n\r\n//combining both the daterangepicker and pre-set buttons\r\nexport class CustomDateRangePicker extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dateRange: props.dateRange,\r\n            preSelection: null\r\n        }\r\n    }\r\n\r\n    //actions for when the dates are manually changed using the picker\r\n    datesChanged = (range) =>{\r\n        this.setState({dateRange:range, preSelection: null})\r\n    }\r\n\r\n    //actions for when the date range buttons were clicked\r\n    buttonDateRangeClicked = (value) =>{\r\n        var dateRange\r\n        if (value === 'day'){\r\n            dateRange = [moment().subtract(1, 'd').set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}), \r\n                            moment().subtract(1, 'd').set({'hour':0, 'minute':0, 'second':0, 'millisecond':0})]\r\n        } else if (value === 'week'){\r\n            //making sure the lower date is not before the dates limit\r\n            dateRange = [moment.max(moment().subtract(8, 'd'), this.props.datesLimit[0]), \r\n                            moment().subtract(1, 'd')]\r\n        } else if (value === 'month'){\r\n            dateRange = [moment.max(moment().subtract({'months':1, 'days':1}), this.props.datesLimit[0]), \r\n                            moment().subtract(1, 'd')]\r\n        } else if (value === 'all'){\r\n            dateRange = this.props.datesLimit\r\n        } \r\n        \r\n        this.setState({dateRange: dateRange, preSelection: value})\r\n    }\r\n\r\n    //update the parent component if any dates change\r\n    componentDidUpdate(prevProps, prevStates) {\r\n        if (prevStates.dateRange !== this.state.dateRange){\r\n            this.props.datesChanged(this.state.dateRange)\r\n        }\r\n    }\r\n\r\n    render(){ \r\n        return (\r\n        <div className=\"row align-items-center\">\r\n            <div className=\"col-6\" align=\"right\">\r\n                <ToggleButtonGroup type=\"radio\" name=\"options\" //size='sm'\r\n                                    value={this.state.preSelection} \r\n                                    onChange={this.buttonDateRangeClicked}>\r\n                    <ToggleButton value={\"all\"}>All<br></br>Time</ToggleButton>\r\n                    <ToggleButton value={\"month\"}>Past<br></br>Month</ToggleButton>\r\n                    <ToggleButton value={\"week\"}>Past<br></br>Week</ToggleButton>\r\n                    <ToggleButton value={\"day\"}>Past<br></br>Day</ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </div>\r\n            <div className=\"col-6 \" align=\"left\">\r\n            <RangePicker \r\n                size=\"large\"\r\n                allowClear={false}\r\n                inputReadOnly={true}\r\n                value={this.state.dateRange}\r\n                onChange={this.datesChanged}\r\n                disabledDate={(current) => {\r\n                    return current && \r\n                        !current.isBetween(this.props.datesLimit[0], this.props.datesLimit[1], '[]')}}\r\n            />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport function LeccyUseChart(prop){\r\n    \r\n    const {data, barPlotOptions, chartView } = prop\r\n    \r\n    const chart = ( data ?\r\n    <ResponsiveContainer width=\"100%\" height={500}>\r\n        <ComposedChart data={data}>\r\n            <CartesianGrid stroke=\"#aaaaaaaa\"/>\r\n            <XAxis dataKey=\"x\" />\r\n            <YAxis yAxisId=\"left\" type=\"number\" dataKey={barPlotOptions.key} \r\n                    name={barPlotOptions.label} unit={barPlotOptions.unit} />\r\n            <YAxis yAxisId=\"rate\" orientation=\"right\" type=\"number\" \r\n                    name=\"Rate\" unit=\"p\" />\r\n            <ReferenceLine y={0} yAxisId=\"rate\" stroke=\"#8884d8\" strokeWidth={1.25}/>\r\n            <ReferenceLine y={14.6} yAxisId=\"rate\" stroke=\"#795ae090\" strokeWidth={1}>\r\n                {/* <Label value=\"Normal Rate\" position=\"right\" fill=\"#e05a7750\"/> */}\r\n            </ReferenceLine> \r\n            <Bar yAxisId=\"left\" fill=\"#000000\" name={barPlotOptions.label} \r\n                    dataKey={barPlotOptions.key} stroke=\"#8884d8\" />\r\n            <ReferenceLine y={0} yAxisId=\"left\" stroke=\"white\" strokeWidth={1}/>\r\n            <Line yAxisId=\"rate\" type=\"monotone\" name=\"Rate\" dot={false}\r\n                    dataKey=\"rate\" stroke=\"#555555\" legendType=\"none\" />\r\n            <Line yAxisId=\"rate\" type=\"monotone\" \r\n                    name=\"Average Unit Cost\" dataKey=\"avgCost\" stroke=\"#8884d8\" />\r\n            <Legend />\r\n            <Tooltip content={<CustomTooltip />}/>\r\n        </ComposedChart >\r\n    </ResponsiveContainer>\r\n    : \"\");\r\n    \r\n    return chart\r\n}\r\n\r\n//custom tooltip content\r\nfunction CustomTooltip ({ active, payload, label }) {\r\n    if (active && label && payload) {\r\n        //checking whether each of the info is found\r\n        const avgCostValueObj = payload.find(e => e.dataKey ==='avgCost')\r\n        const mainValueObj = payload.find(e => (e.dataKey !== 'avgCost') && (e.dataKey !== 'rate'))\r\n        const rateValueObj = payload.find(e => e.dataKey ==='rate')\r\n        \r\n        return (\r\n        <div className=\"custom-tooltip\">\r\n            <p className=\"tooltip-x-value\">{`${label}`} </p>\r\n            { mainValueObj  && \r\n                <div className=\"tooltip-value-y\">\r\n                    <p>{`${chartPlotOptions[mainValueObj.dataKey].label}: `} \r\n                        {mainValueObj.value.toFixed(3)}{chartPlotOptions[mainValueObj.dataKey].unit}</p></div>}\r\n            { avgCostValueObj &&\r\n                <div className=\"tooltip-value-avgCost\">\r\n                    <p>{`${chartPlotOptions['avgCost'].label}: `}\r\n                        {avgCostValueObj.value.toFixed(3)}{chartPlotOptions['avgCost'].unit}</p></div>}\r\n            { rateValueObj &&\r\n                <div className=\"tooltip-value-rate\">\r\n                    <p>{`${chartPlotOptions['rate'].label}: `}\r\n                        {rateValueObj.value.toFixed(3)}{chartPlotOptions['rate'].unit}</p></div>}\r\n        </div>\r\n        );\r\n    } else {return \"\"}\r\n}\r\n\r\nfunction LeccyUseRow(props){\r\n    const { dataPlot, chartView } = props\r\n    //setting the display of the cost depending on the chart view type\r\n    //show in £ for week and month view\r\n    var costCellString = \"\"\r\n    \r\n    if ( dataPlot.consumption != null ){\r\n        costCellString = chartView === \"hour\" || chartView === \"day\" \r\n                        ? `${dataPlot.cost.toFixed(2)}p`\r\n                        : `£${(dataPlot.cost/100).toFixed(2)}`\r\n    }\r\n    \r\n    return ( dataPlot.rate !== undefined && dataPlot.rate !== null ? (<tr>\r\n              <td>{dataPlot.x}</td>\r\n              <td>{`${dataPlot.rate.toFixed(3)}p`}</td>\r\n              <td>{dataPlot.consumption != null && dataPlot.consumption.toFixed(3)}</td>\r\n              <td>{costCellString}</td>\r\n              <td>{dataPlot.consumption != null && `${dataPlot.avgCost.toFixed(3)}p`}</td>\r\n            </tr>) : \"\" )\r\n}\r\n\r\n\r\nexport function LeccyUseTable(props){\r\n    const { dataPlots, chartType, chartView } = props\r\n    \r\n    //setting the table headers depending on the chart view and type\r\n    var rateHeader = 'Rate', unitHeader = 'Used (kWh)'\r\n    var costHeader = 'Cost'\r\n    if (chartType === 'avg' && chartView !== 'hour') {\r\n        rateHeader = 'Mean Daily Rate'\r\n        unitHeader = 'Mean Daily Use (kWh)'\r\n        costHeader = 'Mean Daily Cost'\r\n    } else if (chartType === 'avg' && chartView === 'hour'){\r\n        rateHeader = 'Mean Block Rate'\r\n        unitHeader = 'Mean Use (kWh)'\r\n        costHeader = 'Mean Cost'\r\n    } else if (chartType === 'actl' && chartView !== 'hour'){\r\n        rateHeader = 'Mean Block Rate'\r\n    }\r\n\r\n    //calculating the total\r\n    var totalUse = 0, totalCost = 0\r\n    for (var dataPlot of dataPlots){\r\n        totalUse += dataPlot.consumption ? dataPlot.consumption : 0\r\n        totalCost += dataPlot.cost ? dataPlot.cost : 0\r\n    }\r\n    var totalRow = (\r\n        <tr className=\"table-secondary font-weight-bold\" style={{fontSize:\"135%\"}}>\r\n            <td className=\"text-center\" colSpan={2}>Sum of all time periods</td>\r\n            <td>Total Use: {totalUse.toFixed(3)}kWh</td>\r\n            <td>Total Cost: £{(totalCost/100).toFixed(2)}</td>\r\n            <td>Average Unit Cost: {(totalCost/totalUse).toFixed(3)}p</td>\r\n        </tr>\r\n    )\r\n\r\n    return ( dataPlots ?\r\n    <div className=\"row justify-content-center\">\r\n        <div className=\"col-12\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body table-responsive-sm\">\r\n                <table className=\"table table-striped\" \r\n                        style={{\"width\":\"100%\", tableLayout:'fixed'}}>\r\n                    <tbody>\r\n                        {totalRow}\r\n                        <tr className=\"table-secondary font-weight-bold\" style={{fontSize:\"110%\"}}>\r\n                            <th>Period</th>\r\n                            <th>{rateHeader}</th>\r\n                            <th>{unitHeader}</th>\r\n                            <th>{costHeader}</th>\r\n                            <th>Average Unit Cost (per kWh)</th>\r\n                        </tr>\r\n                        {dataPlots.map((dataPlot, index)=>{\r\n                            return <LeccyUseRow dataPlot={dataPlot}\r\n                                                chartView={chartView}\r\n                                                key={`${index}`}/>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div> : \"\"\r\n    )\r\n  }","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\nimport * as d3 from 'd3-array';\r\n\r\nimport { APILookup } from '../lookup'\r\nimport { LeccyUseChart, LeccyUseTable, \r\n            ChartButtonGroup, CustomDateRangePicker } from './sub-components'\r\nimport { chartPlotOptions, chartTypeOptions, chartViewOptions } from './index'\r\n\r\n\r\nfunction getActlDateRangeArray(startEndArray, viewRange){\r\n    var times = []\r\n    //generate the array of day block\r\n    var endDate = moment(startEndArray[1]).endOf(viewRange)\r\n    for (let time = moment(startEndArray[0]); time.isBefore(endDate); time.add(1, viewRange)) {\r\n        times.push(time.format(chartViewOptions[viewRange]['actlStringFormat']));\r\n    }\r\n    return times\r\n}\r\n\r\nexport default class Consumption extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //getting the locally stored date range\r\n        var dateRange = localStorage.getItem('consumptionPage/dateRange')\r\n        var chartType = localStorage.getItem('consumptionPage/chartType')\r\n        var chartView = localStorage.getItem('consumptionPage/chartView')\r\n        var chartPlot = localStorage.getItem('consumptionPage/chartPlot')\r\n\r\n        this.state={\r\n            useBlocks:[],\r\n            dataPlot:[],\r\n            //converting from string back to array of moments\r\n            dateRange: dateRange \r\n                        ? dateRange.split(',').map(val=>moment(val, \"L\")) \r\n                        : [moment(), moment()],\r\n            chartBarPlot: chartPlot ? chartPlot : 'cost',\r\n            datesLimit: [moment(), moment()]\r\n        }\r\n        //getting the locally stored chart type and view\r\n        this.chartView = chartView ? chartView : 'hour'\r\n        this.chartType = chartType ? chartType : 'avg'\r\n\r\n        //create ref to the daterangepicker\r\n        this.dateRangeElement = React.createRef();\r\n\r\n        this.datesChanged = this.datesChanged.bind(this)\r\n    }\r\n    \r\n    chartOptionChanged = (stateArr) => {\r\n        //assigning selection to class variable\r\n        if (stateArr[0] === 'type'){\r\n            this.chartType = stateArr[1]\r\n            localStorage.setItem('consumptionPage/chartType', stateArr[1]);\r\n            this.processAnyViewTypeChange()\r\n        } else if (stateArr[0] === 'view'){\r\n            this.chartView = stateArr[1]\r\n            localStorage.setItem('consumptionPage/chartView', stateArr[1]);\r\n            this.processAnyViewTypeChange()\r\n        } else if (stateArr[0] === 'plot'){\r\n            localStorage.setItem('consumptionPage/chartPlot', stateArr[1]);\r\n            this.setState({chartBarPlot: stateArr[1]})\r\n        }\r\n    }\r\n\r\n    prevNextClicked = (event) => {\r\n        var dateRange = this.state.dateRange\r\n        var newDateRange\r\n        const btnID = event.target.id\r\n        \r\n        //add/subtract the hourly view by 1 day, same as daily view\r\n        const addSubtractTime = this.chartView === 'hour' ? 'days' : this.chartView\r\n        \r\n        if (btnID === \"prev-date-range\"){\r\n            //subtract both start and end date by 1 period\r\n            newDateRange = dateRange.map((date) => moment(date).subtract(1, addSubtractTime))\r\n            //make sure new date range is not before date limit\r\n            if (newDateRange[0].isBefore(this.state.datesLimit[0])){\r\n                var newMaxDate = moment.min(moment(this.state.datesLimit[0]).add({[addSubtractTime]:1}), this.state.datesLimit[1])\r\n                newDateRange = [this.state.datesLimit[0], newMaxDate]\r\n            }\r\n        } else {\r\n            newDateRange = dateRange.map((date) => moment(date).add(1, addSubtractTime))\r\n            //make sure new date range is not after date limit\r\n            if (newDateRange[1].isAfter(this.state.datesLimit[1])){\r\n                var newMinDate = moment.max(moment(this.state.datesLimit[1]).subtract({[addSubtractTime]:1}), this.state.datesLimit[0])\r\n                newDateRange = [newMinDate, this.state.datesLimit[1]]\r\n            }\r\n        }\r\n        \r\n        this.dateRangeElement.current.datesChanged(newDateRange)\r\n    }\r\n\r\n    //for when the dates in date range picker is changed, manually or using pre-set buttons\r\n    datesChanged = (value) => {\r\n        if (value){\r\n            // this.dateRange = value\r\n            localStorage.setItem('consumptionPage/dateRange', \r\n                        value.map((val) => val.format(\"L\")).join(','))\r\n            this.setState({dateRange:value}, this.processAnyViewTypeChange)\r\n        }\r\n    }\r\n\r\n    processAnyViewTypeChange(){\r\n        const chartView = this.chartView\r\n        //getting the array of time to plot\r\n        var xArray = []\r\n        if (this.chartType === 'avg'){\r\n            if (chartView === 'day'){\r\n                xArray = moment.weekdays()\r\n            } else if (chartView === 'week'){\r\n                xArray = getActlDateRangeArray(this.state.dateRange, chartView)\r\n            } else if (chartView === 'month'){\r\n                xArray = moment.months()\r\n            }\r\n        } else {\r\n            if (chartView !== 'hour'){\r\n                xArray = getActlDateRangeArray(this.state.dateRange, chartView)\r\n            }\r\n        }\r\n        \r\n        var data = xArray.map((time) => {return {x:time}})\r\n\r\n        if (this.chartType === 'avg'){\r\n            data = this.processAvgView(data)\r\n        } else {\r\n            data = this.processActlView(data)\r\n        }\r\n\r\n        //calculating the average cost per unit\r\n        for (var dataPoint of data){\r\n            dataPoint.avgCost = dataPoint.consumption >= 0 ? dataPoint.cost/dataPoint.consumption : null\r\n        }\r\n\r\n        //assigning the data back to plot\r\n        this.setState({dataPlot:data})\r\n    }\r\n\r\n    processAvgView(data){\r\n        var filteredDateRange\r\n        if (this.chartView === 'hour'){\r\n            //filter useBlocks to be within selected date range\r\n            filteredDateRange = d3.filter(this.state.useBlocks,\r\n                    (useBlock) => useBlock.time.isSameOrAfter(this.state.dateRange[0]) &&\r\n                                  useBlock.time.isBefore(this.state.dateRange[1].endOf('day')))\r\n\r\n            //forming the array of time with 30min block\r\n            var hours = []\r\n            //generate the array of 30min block\r\n            for (let hour = 0; hour < 24; hour++) {\r\n                hours.push(moment({ hour }).format(chartViewOptions['hour']['avgStringFormat']));\r\n                hours.push(moment({ hour, minute: 30}).format(chartViewOptions['hour']['avgStringFormat']));\r\n            }\r\n\r\n            //group them into half hour block\r\n            var grouped3 = d3.group(filteredDateRange, d => d.time.format(\r\n                            chartViewOptions[this.chartView]['avgStringFormat']))\r\n                            \r\n            data = hours.map((blockTime) => {\r\n                var groupedArr = grouped3.get(blockTime)\r\n                if (!groupedArr){return {x:blockTime, rate:null, consumption:null, cost:null}}\r\n                return { x:blockTime, \r\n                    rate: d3.mean(groupedArr, v => v.rate),\r\n                    consumption: d3.mean(groupedArr, val => val.consumption),\r\n                    cost: d3.mean(groupedArr, val => val.rate*val.consumption)\r\n                }\r\n            })\r\n        }\r\n        else { //for this.chartView === day/week/month \r\n            //filter useBlocks to be within selected date range\r\n            filteredDateRange = d3.filter(this.state.useBlocks,\r\n                    (useBlock) => useBlock.time.isSameOrAfter(this.state.dateRange[0]) &&\r\n                                  useBlock.time.isBefore(this.state.dateRange[1].endOf(this.chartView)))\r\n\r\n            //group the useblocks into dates\r\n            var grouped = d3.groups(filteredDateRange, d => d.time.format(\"L\"))\r\n            //turn the grouped array into sum of each day\r\n            grouped = grouped.map(\r\n                (val) => { \r\n                    return {\r\n                        'x': val[0], \r\n                        //for rate, take the mean of each day\r\n                        'rate': d3.mean(val[1], v => v.rate),\r\n                        'use': d3.sum(val[1], v => v.consumption),\r\n                        'cost': d3.sum(val[1], v => v.consumption >= 0 ? v.consumption * v.rate : null),\r\n                        //store the count for the day so in the next step whether to calc mean or not\r\n                        'count': d3.count(val[1], d => d.consumption)\r\n                    }\r\n                } \r\n            )\r\n            \r\n            var dateFormat = chartViewOptions[this.chartView]['avgStringFormat']\r\n            for (var dataBlock of data){\r\n                //filtering the dates which match the day of week/day in month\r\n                var filteredDates = d3.filter(grouped, obj => moment(obj.x, \"L\").format(dateFormat) === dataBlock.x)\r\n                //storing different names for week view\r\n                if (this.chartView === 'week'){\r\n                    dataBlock.x = `${moment(dataBlock.x, dateFormat).startOf('week').format(\"DD\")\r\n                                    }-${moment(dataBlock.x, dateFormat).endOf('week').format(\"DD MMM YYYY\")}`\r\n                }\r\n                //only return a value if that day has more than 45 blocks of consumption defined\r\n                dataBlock.rate = d3.mean(filteredDates, val => val.count > 45 ? val.rate: null)\r\n                dataBlock.consumption = d3.mean(filteredDates, val => val.count > 45 ? val.use: null)\r\n                dataBlock.cost = d3.mean(filteredDates, val => val.count > 45 ? val.cost: null)\r\n            }\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    processActlView(data){\r\n        if (this.chartView === 'hour'){\r\n            //getting the range of dates to filter\r\n            var startTime = moment(this.state.dateRange[0])\r\n            var endTime = moment(this.state.dateRange[1]).set({'hour':0, 'minutes':0, 'seconds':0}).add(1, 'd')\r\n            //set a 10 day limit to the view\r\n            var dateLimit = moment(startTime).add(11, 'd')\r\n            var filteredBlocks = d3.filter(this.state.useBlocks, \r\n                            (val) => val.time.isBetween(\r\n                                startTime, endTime, 'minute', \"[)\") && val.time.isBefore(dateLimit))\r\n            //turning the useBlocks into array of dicts for plotting\r\n            data = filteredBlocks.map((obj) => {\r\n                return {x:obj.time.format(\"DD MMM HH:mm\"),\r\n                        rate: obj.rate,\r\n                        consumption: obj.consumption,\r\n                        cost: obj.consumption >= 0 ? obj.rate*obj.consumption: null}\r\n                })\r\n            data.reverse()\r\n        }\r\n        else { //for this.chartView === day/week/month \r\n            const dateFormat = chartViewOptions[this.chartView]['actlStringFormat']\r\n\r\n            //group the useblocks into dates\r\n            var grouped = d3.groups(this.state.useBlocks, d => d.time.format(dateFormat))\r\n            //turn the grouped array into sum of each day\r\n            grouped = grouped.map(\r\n                (val) => { \r\n                    return {\r\n                        'x': val[0], \r\n                        //for rate, take the mean of each day\r\n                        'rate': d3.mean(val[1], v => v.rate),\r\n                        'use': d3.sum(val[1], v => v.consumption),\r\n                        'cost': d3.sum(val[1], v => v.consumption >= 0 ? v.consumption * v.rate : null)\r\n                    }\r\n                } \r\n            )\r\n            \r\n            for (var dataBlock of data){\r\n                //filtering the dates which match the day of week/day in month\r\n                var filteredDates = d3.filter(grouped, obj => obj.x === dataBlock.x)\r\n                //storing different names for week view\r\n                if (this.chartView === 'week'){\r\n                    //use locale week format (week starts on user chosen day)\r\n                    dataBlock.x = `${moment(dataBlock.x, dateFormat).startOf('week').format(\"DD\")\r\n                                    }-${moment(dataBlock.x, dateFormat).endOf('week').format(\"DD MMM YYYY\")}`\r\n                }\r\n                dataBlock.rate = d3.mean(filteredDates, val => val.rate)\r\n                dataBlock.consumption = d3.sum(filteredDates, val => val.use)\r\n                dataBlock.cost = d3.sum(filteredDates, val => val.cost)\r\n            }\r\n        }\r\n        \r\n        return data\r\n    }\r\n\r\n    //callback for when the use history has been loaded\r\n    componentDidMount(){\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                var leccyUse = response.leccyUse\r\n                leccyUse = leccyUse.map((val) => {return {\"time\":moment(val.interval_start), \r\n                                \"rate\":val.rate, \"consumption\":val.consumption}})\r\n                this.setState({useBlocks:leccyUse}, \r\n                                this.processAnyViewTypeChange)\r\n                //calculating the max and min date\r\n                var dates = leccyUse.map((val) => {return val.time})\r\n                this.setState({datesLimit: [moment.min(dates).set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}).subtract(1, 'd'), \r\n                                            moment.max(dates).set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}).add(1, 'd')]})\r\n          } else {\r\n              alert(\"There was an error\")\r\n          }\r\n        }\r\n        //api call to retrieve the history\r\n        APILookup('GET', `consumptionHistory`, myCallback)\r\n    }\r\n    \r\n    render(){\r\n        //form the chart title\r\n        if (this.state.dataPlot.length > 0){\r\n            var chartTitle = `${chartTypeOptions[this.chartType].label} Usage `\r\n            const dateFormat = 'DD MMM YYYY'\r\n            if (this.state.dateRange[0].format(\"L\") === this.state.dateRange[1].format(\"L\")){\r\n                chartTitle += `on ${this.state.dateRange[0].format(dateFormat)}`\r\n            } else {\r\n                if (this.chartType === 'actl' && this.chartView === 'hour'){\r\n                    var endDateString = moment(this.state.dataPlot[this.state.dataPlot.length - 1].x, \r\n                        chartViewOptions['hour']['actlStringFormat']).format(dateFormat)\r\n                    chartTitle += \r\n                            `from ${this.state.dateRange[0].format(dateFormat)} to \r\n                                ${endDateString}`\r\n                } else {\r\n                    chartTitle += \r\n                            `from ${this.state.dateRange[0].format(dateFormat)} to \r\n                                ${this.state.dateRange[1].format(dateFormat)}`\r\n                }\r\n            }\r\n        }\r\n\r\n        return ( this.state.dataPlot.length > 0 ?\r\n        (<div>\r\n            <div className=\"row my-3 mx-4\">\r\n                <div className=\"col-2\">\r\n                    <Button className=\"btn btn-primary btn-arrow-left\" id=\"prev-date-range\"\r\n                            onClick={this.prevNextClicked}>\r\n                        Previous</Button>\r\n                </div>\r\n                <div className=\"col-8 text-center\" align='center'>\r\n                    <h4 className=\"font-weight-bold\">{chartTitle}</h4>\r\n                </div>\r\n                <div className=\"col-2\" align=\"right\">\r\n                    <Button className=\"btn btn-primary btn-arrow-right\" id=\"next-date-range\"\r\n                            onClick={this.prevNextClicked}>\r\n                        Next</Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mb-3\">\r\n                <LeccyUseChart data={this.state.dataPlot}\r\n                                barPlotOptions={chartPlotOptions[this.state.chartBarPlot]}\r\n                                chartView={this.chartView}/>\r\n            </div>\r\n            <div className=\"row justify-content-center my-3\">\r\n                <div className=\"col-lg-2 col-md-4 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'type'} stateVar={this.chartType} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-4 col-md-6 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'view'} stateVar={this.chartView} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-2 col-md-4 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'plot'} stateVar={this.state.chartBarPlot} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-4 col-md-8 my-1\" align=\"center\">\r\n                    <CustomDateRangePicker ref={this.dateRangeElement} \r\n                                            datesLimit={this.state.datesLimit}\r\n                                            dateRange={this.state.dateRange}\r\n                                            datesChanged={this.datesChanged}/>\r\n                </div>\r\n            </div>\r\n            <LeccyUseTable dataPlots={this.state.dataPlot} \r\n                            chartType={this.chartType}\r\n                            chartView={this.chartView}/>\r\n        </div>) :(\r\n            <div className=\"text-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>)\r\n        )\r\n    }\r\n}","import Consumption from './components'\r\n\r\nexport default Consumption\r\n\r\nexport const chartPlotOptions = {\r\n    'consumption': {\"key\":\"consumption\", 'label': 'Consumption', \"unit\":\"kWh\"},\r\n    \"cost\": {\"key\":\"cost\", 'label': 'Cost', \"unit\":\"p\"},\r\n    \"rate\": {\"key\":\"rate\", 'label': 'Rate', \"unit\":\"p\"},\r\n    \"avgCost\": {\"key\":\"avgCost\", 'label': 'Average Unit Cost', \"unit\":\"p/kWh\"}\r\n}\r\n\r\nexport const chartTypeOptions = {\r\n    'avg': {'label': 'Average'},\r\n    \"actl\": { 'label': 'Actual'}\r\n}\r\n\r\nexport const chartViewOptions = {\r\n    \"hour\": {'label': 'Hourly', 'avgStringFormat': \"HH:mm\", 'actlStringFormat': \"DD MMM HH:mm\"},\r\n    \"day\": {'label': 'Daily', \"avgStringFormat\": \"dddd\", 'actlStringFormat': \"YYYY-MM-DD\"},\r\n    \"week\": {'label': 'Weekly', \"avgStringFormat\": \"ww YYYY\", 'actlStringFormat': \"ww YYYY\"},\r\n    \"month\": {'label': 'Monthly', \"avgStringFormat\": \"MMMM\", 'actlStringFormat': \"MMM YYYY\"}\r\n}","import React, { useState, useEffect, Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport moment from 'moment';\r\n\r\nimport {hideSpinner} from '../common'\r\nimport { APILookup } from '../lookup'\r\n\r\n// function CategoryStatesBlock(props){\r\n\r\n//     const {controlState, operationState, \r\n//                           boostState, cat} = props\r\n//     //setting colours depending on boost states\r\n//     var colour\r\n//     if (boostState || operationState){\r\n//         colour = 'danger'\r\n//     } else if (controlState){\r\n//         colour = 'warning'\r\n//     } else{\r\n//         colour = 'success'\r\n//     }\r\n\r\n//     var catText = cat === \"heating\" ? \"Heating\":'Water' \r\n//     var controlText\r\n//     if(boostState){\r\n//         controlText = \"Boost\\nOn\"\r\n//     } else if (!controlState){\r\n//         controlText = 'Control\\nOff'\r\n//     } else if (cat === 'hotWater'){\r\n//         controlText = 'Scheduled\\nControl'\r\n//     } else {\r\n//         controlText = 'Thermostat\\nControl'\r\n//     }\r\n\r\n//     const buttonOnClickEvent = (event) =>{\r\n//         event.preventDefault()\r\n//         // remove focus on button\r\n//         event.target.blur()\r\n//         var data = {'device': cat, 'state': !controlState}\r\n//         //callback for then the state change POST method has returned\r\n//         const returnCallBack = (response, status) =>{\r\n//             if (status === 201){\r\n//                 APILookup('GET', 'currentStates', populateCurrentStates, {})\r\n//             } else {\r\n//                 alert('State change failed')\r\n//             }\r\n//         }\r\n\r\n//         APILookup('POST', 'currentStates/change', \r\n//                             returnCallBack, data)\r\n\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <button className={`btn btn-block btn-${colour}`} style={{maxWidth:130, whiteSpace: \"pre-wrap\"}}\r\n//                     onClick={buttonOnClickEvent}> \r\n//                 <h4 class=\"font-weight-bold alert-heading text-center pt-1\">{catText}</h4>\r\n//                 <hr className={`alert-${colour}`} />\r\n//                 <h6 className=\"text-center\">{controlText}</h6>\r\n//                 <hr className={`alert-${colour}`} />\r\n//                 <OperationStateOnOffText state={operationState} type={0}/>\r\n//             </button>\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n\r\n// function OperationStateOnOffText(props){\r\n//     const { state, type } = props\r\n//     var text = state ? \"ON\" : \"OFF\"\r\n//     var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n//     const className = \"font-weight-bold text-center\"\r\n//     return <Tag className={className}>{text}</Tag>\r\n// }\r\n\r\nexport function BoostStatesCard(props){\r\n    const [hotWaterBoostState, setHotWaterBoostState] = useState([])\r\n    const [heatingBoostState, setHeatingBoostState] = useState([])\r\n    const [sliderValue, setSliderValue] = useState(20); \r\n\r\n    const sliderOnChange = (event) => {\r\n        setSliderValue(event.target.value)\r\n    }    \r\n    const sliderTooltip = (value) => {\r\n        return `${value}mins`\r\n    }\r\n    const boostClicked = (event) => {\r\n        //defocus the button\r\n        // event.target.blur()\r\n        //get the button click and the boost type\r\n        const boostType = event.target.title\r\n        //turn the state to opposite\r\n        const setValue = boostType === 'hotWater' ? \r\n                        !hotWaterBoostState.boost                \r\n                        : !heatingBoostState\r\n\r\n        const postBoostData = { 'boost': boostType,\r\n                                \"value\": setValue,\r\n                                'duration': sliderValue}\r\n\r\n        APILookup('POST', 'boost/set', getBoostStatesCallback, postBoostData)\r\n    }\r\n\r\n    const getBoostStatesCallback = (response, status) =>{\r\n        if (status === 200 || status === 201) {\r\n            setHotWaterBoostState(response.hotWater)\r\n            setHeatingBoostState(response.heating)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n      \r\n        //hide the spinner\r\n        hideSpinner('boost-states-card-spinner')\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        APILookup('GET', 'boost', getBoostStatesCallback)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mx-5\">\r\n                <RangeSlider value={sliderValue} onChange={sliderOnChange} \r\n                                min={20} max={100} variant='primary' size='lg'\r\n                                tooltip='on' tooltipLabel={sliderTooltip}/>\r\n            </div>\r\n            <div className=\"row justify-content-center mt-5 mx-3\">\r\n                <div className='col-6' align=\"center\">\r\n                    <BoostButton value=\"hotWater\" onClickCallback={boostClicked} \r\n                                    boostState={hotWaterBoostState}/>\r\n                </div>\r\n                <div className='col-6' align=\"center\">\r\n                    <BoostButton value=\"heating\" onClickCallback={boostClicked} \r\n                                    boostState={heatingBoostState}/>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction BoostButton(props){\r\n    const {value, onClickCallback, boostState} = props\r\n    const [ hoverActive, setHoverActive ] = useState(false)\r\n    \r\n    const hoverIn = (event) => {\r\n        setHoverActive(true)\r\n    }\r\n    const hoverOut = (event) => {\r\n        setHoverActive(false)\r\n    }\r\n\r\n    var buttonText = value === 'hotWater' ? \"Hot Water\" : \"Heating\"\r\n    const endTime = moment(boostState.endTime)\r\n\r\n    var buttonLowerText = hoverActive ? \r\n        <h5 title={value}>Stop<br/>Boost</h5>\r\n        :\r\n        <h5 className=\"text-center\" title={value}>\r\n            Boosting till {endTime.format(\"HH:mm\")}<br/>\r\n            ({`${endTime.diff(moment(), 'm')}min${endTime.diff(moment(), 'm')>1?'s':''} remaining`})\r\n        </h5>\r\n\r\n\r\n    return ( boostState.boost ?\r\n        <Button size='lg' block variant=\"danger\"\r\n                onClick={onClickCallback} \r\n                title={value}\r\n                onMouseEnter={hoverIn}\r\n                onMouseLeave={hoverOut}>\r\n                <h5 className=\"font-weight-bold alert-heading text-center pt-1\" title={value}>\r\n                    {buttonText} \r\n                </h5>\r\n                <hr className=\"alert-danger\" />\r\n                {buttonLowerText}\r\n        </Button>\r\n        : \r\n        <Button size='lg' block onClick={onClickCallback} title={value}>\r\n            <h5 className=\"font-weight-bold alert-heading text-center pt-1\" title={value}>\r\n                {buttonText} \r\n            </h5>\r\n            <hr className=\"alert-primary\" />\r\n            <h5 title={value}>Boost</h5>\r\n        </Button>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BoilerStateList } from './boilerStates'\nimport { HotWaterScheduleCard } from './schedule'\nimport { AgileRateCard, AgileRateList } from './agileRates'\nimport { populateCurrentStates } from './currentStates';\nimport { APILookup } from './lookup'\nimport { NestCard } from './googleNest'\nimport Consumption from './consumptionHistory'\nimport { BoostStatesCard } from './boostFunctions'\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./main.css\"\nimport \"./darkly.min.css\"\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<HotWaterScheduleCard />, appEl);\n}\n\nconst boilerStateRows = document.getElementById('boilerStateRows')\nif (boilerStateRows){\n  ReactDOM.render(<BoilerStateList limit={0}/>, boilerStateRows);\n  \n}\n\nconst boilerStateEl = document.getElementById('boilerStateCard')\nif (boilerStateEl){\n  ReactDOM.render(<BoilerStateList limit={5}/>, boilerStateEl);\n}\n\nconst agileRatesEl = document.getElementById('agileRateTable')\nif (agileRatesEl){\n  ReactDOM.render(<AgileRateList />, agileRatesEl);\n}\n\nvar agileRatesCardEl = document.getElementById('agile-rates-card')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'homepage'}/>, agileRatesCardEl);\n}\nagileRatesCardEl = document.getElementById('agile-rates-page-cards')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'top'}/>, agileRatesCardEl);\n}\nconst nestCardEl = document.getElementById('nest-card-content')\nif (nestCardEl){\n    ReactDOM.render(<NestCard />, nestCardEl);\n}\n\nconst currentStatesEl = document.getElementById('current-states-card-body')\nif (currentStatesEl){\n    APILookup('GET', 'currentStates', populateCurrentStates, {})\n}\n\nconst consumptionTableEl = document.getElementById('consumption-page')\nif (consumptionTableEl){\n    ReactDOM.render(<Consumption />, consumptionTableEl);\n}\n\nconst boostStatesCard = document.getElementById('boost-states-card-content')\nif (boostStatesCard){\n    ReactDOM.render(<BoostStatesCard />, boostStatesCard);\n}\n\nconst hotWaterScheduleCardEl = document.getElementById('hot-water-schedule-card')\nif (hotWaterScheduleCardEl){\n    ReactDOM.render(<HotWaterScheduleCard />, hotWaterScheduleCardEl);\n}\n// const chartEl = document.getElementById('consumption-page-chart')\n// if (chartEl){\n//     ReactDOM.render(<LeccyUseChart />, chartEl);\n// }\n\n// const currentStatesEl = document.getElementById('current-states-card-body')\n// if (boilerStateEl){\n//   ReactDOM.render(<CurrentStatesCard />, currentStatesEl);\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}