{"version":3,"sources":["logo.svg","boilerStates/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoilerStateRow","props","boilerState","startTime","Date","start_time","endTime","end_time","diff","getTime","toFixed","dateOptions","timeOptions","toLocaleDateString","toLocaleTimeString","hot_water_state","heating_state","BoilerStateList","prop","useState","boilerStatesInit","setBoilerStatesInit","limit","useEffect","callback","xhr","XMLHttpRequest","url","responseType","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","getBoilerStates","alert","map","index","key","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","boilerStateRows","boilerStateEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,yLCIpC,SAASC,EAAeC,GAAO,IAC3BC,EAAeD,EAAfC,YAEDC,EAAY,IAAIC,KAAKF,EAAYG,YACjCC,EAAU,IAAIF,KAAKF,EAAYK,UAEjCC,EAAOF,EAAQG,UAAYN,EAAUM,UAEzCD,GADAA,EAAOA,EAAO,IAAO,IACTE,QAAQ,GAEpB,IAAIC,EAAc,CAAC,IAAM,UAAW,MAAS,SACzCC,EAAc,CAAC,KAAO,UAAW,OAAU,WAE/C,OAAO,4BACG,4BAAKT,EAAUU,mBAAmB,QAASF,GAA3C,IAA0DR,EAAUW,mBAAmB,QAASF,IAChG,4BAAKN,EAAQO,mBAAmB,QAASF,GAAzC,IAAwDL,EAAQQ,mBAAmB,QAASF,IAC5F,4BAAKJ,GACL,4BAAKN,EAAYa,gBAAkB,KAAK,OACxC,4BAAKb,EAAYc,cAAgB,KAAK,QAI7C,SAASC,EAAgBC,GAAM,IAAD,EACeC,mBAAS,IADxB,mBAC1BC,EAD0B,KACRC,EADQ,KAE1BC,EAASJ,EAATI,MAcL,OAZFC,qBAAU,YC9BP,SAAyBC,EAAUF,GAGtCA,EAAQA,GAAgB,EAExB,IAAMG,EAAM,IAAIC,eAEVC,EAAG,+CAA2CL,GAGpDG,EAAIG,aAFiB,OAGrBH,EAAII,KALW,MAKEF,GAEjBF,EAAIK,iBAAiB,mBAAoB,kBAIzCL,EAAIM,OAAS,WACTP,EAASC,EAAIO,SAAUP,EAAIQ,SAE/BR,EAAIS,QAAU,SAAUC,GACtBC,QAAQC,IAAIF,GACZX,EAAS,CAAC,QAAW,4BAA6B,MAEpDC,EAAIa,ODcFC,EAPmB,SAACP,EAAUC,GACb,MAAXA,EACFZ,EAAoBW,GAEpBQ,MAAM,wBAGkBlB,KACzB,IAGIF,EAAiBqB,KAAI,SAACvC,EAAawC,GACxC,OAAO,kBAAC1C,EAAD,CAAgBE,YAAaA,EAAayC,IAAG,UAAKD,QEVlDE,MA1Bf,WAEE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,6BACE,kBAAClC,EAAD,UCbUmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAQC,SAASC,eAAe,QAClCF,GACFG,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA2BL,GAG/D,IAAMM,EAAkBL,SAASC,eAAe,mBAC5CI,GACFH,IAASC,OAAO,kBAAC5C,EAAD,CAAiBK,MAAO,IAAMyC,GAGhD,IAAMC,EAAgBN,SAASC,eAAe,mBAC1CK,GACFJ,IAASC,OAAO,kBAAC5C,EAAD,CAAiBK,MAAO,IAAM0C,GDgH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.6e896566.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\r\n\r\nimport {getBoilerStates} from '../lookup'\r\n\r\nexport function BoilerStateRow(props){\r\n    const {boilerState} = props\r\n    // const className = props.className ? props.className : \"col-10 mx-auto col-md-6\"\r\n    const startTime = new Date(boilerState.start_time)\r\n    const endTime = new Date(boilerState.end_time)\r\n\r\n    var diff = endTime.getTime() - startTime.getTime()\r\n    diff = diff / 1000 / 60\r\n    diff = diff.toFixed(0)\r\n\r\n    let dateOptions = {'day':'numeric', 'month': 'short'}\r\n    let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n\r\n    return <tr>\r\n              <td>{startTime.toLocaleDateString('en-gb', dateOptions)} {startTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{endTime.toLocaleDateString('en-gb', dateOptions)} {endTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{diff}</td>\r\n              <td>{boilerState.hot_water_state ? \"ON\":\"OFF\"}</td>\r\n              <td>{boilerState.heating_state ? \"ON\":\"OFF\"}</td>\r\n            </tr>\r\n}\r\n\r\nexport function BoilerStateList(prop){\r\n    const [boilerStatesInit, setBoilerStatesInit] = useState([])\r\n    const {limit} = prop\r\n    \r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n          setBoilerStatesInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      getBoilerStates(myCallback, limit)\r\n      }, [])\r\n      \r\n\r\n      return boilerStatesInit.map((boilerState, index)=>{\r\n        return <BoilerStateRow boilerState={boilerState} key={`${index}`}/>\r\n      })\r\n  }","export function getBoilerStates(callback, limit){\r\n\r\n    //set limit to 0 if no limit is defined\r\n    limit = limit ? limit : 0\r\n\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = `http://192.168.1.42/api/boilerStates/${limit}`\r\n    const responseType = \"json\"\r\n  \r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-REQUESTED-WITH\", \"XMLHttpRequest\")\r\n    // xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\")\r\n    // xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  \r\n}\r\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {BoilerStateList} from './boilerStates'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <div>\n          <BoilerStateList />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BoilerStateList} from './boilerStates'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<React.StrictMode><App/></React.StrictMode>, appEl);\n}\n\nconst boilerStateRows = document.getElementById('boilerStateRows')\nif (boilerStateRows){\n  ReactDOM.render(<BoilerStateList limit={0}/>, boilerStateRows);\n}\n\nconst boilerStateEl = document.getElementById('boilerStateCard')\nif (boilerStateEl){\n  ReactDOM.render(<BoilerStateList limit={5}/>, boilerStateEl);\n}\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}