{"version":3,"sources":["logo.svg","lookup/components.js","boilerStates/components.js","App.js","currentStates/components.js","serviceWorker.js","index.js"],"names":["module","exports","domain","window","location","host","currentStatesLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","BoilerStateRow","props","boilerState","startTime","Date","start_time","endTime","end_time","diff","getTime","toFixed","dateOptions","timeOptions","toLocaleDateString","toLocaleTimeString","hot_water_state","heating_state","BoilerStateList","prop","useState","boilerStatesInit","setBoilerStatesInit","limit","useEffect","getBoilerStates","alert","spinnerEl","getElementById","innerHTML","map","index","key","startsWith","App","className","src","logo","alt","href","target","rel","CategoryStatesBlock","colour","controlState","operationState","boostState","cat","controlText","catText","style","maxWidth","whiteSpace","onClick","event","preventDefault","blur","populateCurrentStates","class","OperationStateOnOffText","state","type","text","Tag","ReactDOM","render","setBoilerBlock","operation","control","hotWater","boost","heating","Boolean","hostname","match","appEl","StrictMode","boilerStateRows","boilerStateEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afc8a222.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = window.location.host\r\n\r\nif (!domain.startsWith(\"http\")){\r\n  domain = `http://${domain}`\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\nexport function getBoilerStates(callback, limit){\r\n\r\n    //set limit to 0 if no limit is defined\r\n    limit = limit ? limit : 0\r\n\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `${domain}/api/boilerStates/${limit}`\r\n  \r\n    xhr.responseType = \"json\"\r\n    xhr.open('GET', url)\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-REQUESTED-WITH\", \"XMLHttpRequest\")\r\n\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The boiler history request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  \r\n}\r\n\r\n\r\nexport function currentStatesLookup(method, endpoint, callback, data){\r\n    let jsonData;\r\n    if (data){\r\n      jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `${domain}/api/currentStates/${endpoint}`\r\n    \r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken){\r\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The current states request was an error\"}, 400)\r\n    }\r\n    \r\n    xhr.send(jsonData)\r\n\r\n}","import React, {useEffect, useState, Component} from 'react'\r\n\r\nimport {getBoilerStates} from '../lookup'\r\n\r\nexport function BoilerStateRow(props){\r\n    const {boilerState} = props\r\n    const startTime = new Date(boilerState.start_time)\r\n    const endTime = new Date(boilerState.end_time)\r\n    \r\n    //calcuating the difference in minutes and round to integers\r\n    var diff = endTime.getTime() - startTime.getTime()\r\n    diff = diff / 1000 / 60\r\n    diff = diff.toFixed(0)\r\n\r\n    let dateOptions = {'day':'numeric', 'month': 'short'}\r\n    let timeOptions = {'hour':'numeric', 'minute': 'numeric'}\r\n\r\n    return <tr>\r\n              <td>{startTime.toLocaleDateString('en-gb', dateOptions)} {startTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{endTime.toLocaleDateString('en-gb', dateOptions)} {endTime.toLocaleTimeString('en-gb', timeOptions)}</td>\r\n              <td>{diff}</td>\r\n              <td>{boilerState.hot_water_state ? \"ON\":\"OFF\"}</td>\r\n              <td>{boilerState.heating_state ? \"ON\":\"OFF\"}</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function BoilerStateList(prop){\r\n    const [boilerStatesInit, setBoilerStatesInit] = useState([])\r\n    const {limit} = prop\r\n    \r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n          setBoilerStatesInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n        //hide the spinner\r\n        const spinnerEl = document.getElementById('history-table-spinner')\r\n        if (spinnerEl){\r\n          spinnerEl.innerHTML = \"\"\r\n        }\r\n      }\r\n      getBoilerStates(myCallback, limit)\r\n    }, [])\r\n      \r\n\r\n      return boilerStatesInit.map((boilerState, index)=>{\r\n        return <BoilerStateRow boilerState={boilerState} key={`${index}`}/>\r\n      })\r\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {BoilerStateList} from './boilerStates'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <div>\n          <BoilerStateList />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useEffect, useState} from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { currentStatesLookup } from '../lookup'\r\n\r\n\r\nfunction CategoryStatesBlock(props){\r\n\r\n    const {controlState, operationState, \r\n                          boostState, cat} = props\r\n    //setting colours depending on boost states\r\n    var colour\r\n    if (boostState || operationState){\r\n        colour = 'danger'\r\n    } else if (controlState){\r\n        colour = 'warning'\r\n    } else{\r\n        colour = 'success'\r\n    }\r\n\r\n    var catText = cat === \"heating\" ? \"Heating\":'Water' \r\n    var controlText\r\n    if(boostState){\r\n        controlText = \"Boost\\nOn\"\r\n    } else if (!controlState){\r\n        controlText = 'Control\\nOff'\r\n    } else if (cat === 'hotWater'){\r\n        controlText = 'Scheduled\\nControl'\r\n    } else {\r\n        controlText = 'Thermostat\\nControl'\r\n    }\r\n\r\n    const buttonOnClickEvent = (event) =>{\r\n        event.preventDefault()\r\n        // remove focus on button\r\n        event.target.blur()\r\n        var data = {'device': cat, 'state': !controlState}\r\n        //callback for then the state change POST method has returned\r\n        const returnCallBack = (response, status) =>{\r\n            if (status === 201){\r\n                currentStatesLookup('GET', '', populateCurrentStates, {})\r\n            } else {\r\n                alert('State change failed')\r\n            }\r\n        }\r\n\r\n        currentStatesLookup('POST', 'change', \r\n                            returnCallBack, data)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={`btn btn-block btn-${colour}`} style={{maxWidth:130, whiteSpace: \"pre-wrap\"}}\r\n                    onClick={buttonOnClickEvent}> \r\n                <h4 class=\"font-weight-bold alert-heading text-center pt-1\">{catText}</h4>\r\n                <hr className={`alert-${colour}`} />\r\n                <h6 className=\"text-center\">{controlText}</h6>\r\n                <hr className={`alert-${colour}`} />\r\n                <OperationStateOnOffText state={operationState} type={0}/>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction OperationStateOnOffText(props){\r\n    const { state, type } = props\r\n    var text = state ? \"ON\" : \"OFF\"\r\n    var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    const className = \"font-weight-bold text-center\"\r\n    return <Tag className={className}>{text}</Tag>\r\n}\r\n\r\n\r\nfunction setBoilerBlock(state){\r\n    //change the colour\r\n    var colour = state ? \"danger\" : \"success\"\r\n    const boilerStateEl = document.getElementById(\"boiler-operation-block\")\r\n    boilerStateEl.className = `alert alert-${colour}`\r\n    ReactDOM.render(<OperationStateOnOffText state={state} type={1}/>, \r\n                    document.getElementById(\"boiler-on-off-text\"))\r\n}\r\n\r\n\r\nexport function populateCurrentStates(response, status){\r\n    setBoilerBlock(response.operation[2])\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.hotWater.state} \r\n                                        operationState={response.operation[0]} \r\n                                        boostState={response.control.hotWater.boost} \r\n                                        cat={\"hotWater\"}/>, \r\n                        document.getElementById(\"hotWater-states-block\"));\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.heating.state} \r\n                                        operationState={response.operation[1]} \r\n                                        boostState={false} \r\n                                        cat={\"heating\"}/>, \r\n                        document.getElementById(\"heating-states-block\"));\r\n    \r\n    // useEffect(() => {\r\n    //   const myCallback = (response, status) =>{\r\n    //     if (status === 200) {\r\n    //       setBoilerBlock()\r\n    //       // setBoilerStatesInit(response)\r\n    //     } else {\r\n    //       alert(\"There was an error\")\r\n    //     }\r\n    //     const spinnerEl = document.getElementById('current-states-spinner')\r\n    //     if (spinnerEl){\r\n    //       spinnerEl.innerHTML = \"\"\r\n    //     }\r\n    //   }\r\n    //   getCurrentStates(myCallback)\r\n    //   }, [])\r\n      \r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BoilerStateList} from './boilerStates'\nimport { populateCurrentStates } from './currentStates';\nimport { currentStatesLookup } from './lookup'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<React.StrictMode><App/></React.StrictMode>, appEl);\n}\n\nconst boilerStateRows = document.getElementById('boilerStateRows')\nif (boilerStateRows){\n  ReactDOM.render(<BoilerStateList limit={0}/>, boilerStateRows);\n  \n}\n\nconst boilerStateEl = document.getElementById('boilerStateCard')\nif (boilerStateEl){\n  ReactDOM.render(<BoilerStateList limit={5}/>, boilerStateEl);\n}\n\ncurrentStatesLookup('GET', '', populateCurrentStates, {})\n// const currentStatesEl = document.getElementById('current-states-card-body')\n// if (boilerStateEl){\n//   ReactDOM.render(<CurrentStatesCard />, currentStatesEl);\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}