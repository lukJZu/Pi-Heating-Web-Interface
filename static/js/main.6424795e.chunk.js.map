{"version":3,"sources":["lookup/components.js","boilerStates/components.js","schedule/components.js","common/common.js","agileRates/components.js","currentStates/components.js","googleNest/components.js","consumptionHistory/sub-components.js","consumptionHistory/components.js","consumptionHistory/index.js","boostFunctions/components.js","serviceWorker.js","index.js"],"names":["domain","window","location","host","APILookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","BoilerStateRow","props","boilerState","startTime","moment","start_time","endTime","end_time","format","diff","hot_water_state","heating_state","BoilerStateList","prop","useState","boilerStatesInit","setBoilerStatesInit","limit","useEffect","alert","spinnerEl","getElementById","innerHTML","map","index","key","startsWith","RangePicker","DatePicker","ScheduleCard","getScheduleCallback","setState","schedule","state","editMode","editScheduleRowsEl","editButtonClicked","bind","finishButtonClicked","setEditRowRefs","addScheduleClicked","event","this","editScheduleRow","hotWaterState","heatingState","scheduleObj","timeRange","utc","push","ref","newScheduleObj","startOf","concat","className","style","width","ScheduleRow","Button","variant","onClick","block","Component","isBetween","ScheduleEditRow","stateChanged","checked","id","includes","date","add","endOf","alignContent","colSpan","value","disabledDate","showTime","onChange","time","uncheckedIcon","checkedIcon","onColor","hideSpinner","AgileRateRow","agileRate","todaysMin","tmrsMin","valid_from","valid_to","rate","timeNow","rowColour","indexOf","isAfter","fontSize","fontWeight","toFixed","AgileRateList","agileRatesInit","setAgileRatesInit","setTodaysMin","setTmrsMin","rates","agileRates","AgileRateCard","type","todaysMinRateTime","tmrsMinRateTime","currentRate","nextTwoRates","todaysMinRate","tmrsMinRate","currentValidFrom","isSame","val","join","populateCard","CategoryStatesBlock","colour","controlState","operationState","boostState","cat","controlText","catText","maxWidth","whiteSpace","preventDefault","target","blur","populateCurrentStates","class","OperationStateOnOffText","text","Tag","ReactDOM","render","setBoilerBlock","operation","control","hotWater","boost","heating","NestCard","ambientTemp","setAmbientTemp","thermostatTemp","setThermostatTemp","traits","role","ChartButtonGroup","btnOptions","btnType","stateVar","onValueChange","chartTypeOptions","chartViewOptions","options","Object","entries","chartPlotOptions","ToggleButtonGroup","size","defaultValue","keys","idx","ToggleButton","label","CustomDateRangePicker","datesChanged","range","dateRange","preSelection","buttonDateRangeClicked","subtract","set","max","datesLimit","prevProps","prevStates","align","allowClear","inputReadOnly","current","LeccyUseChart","barPlotOptions","height","stroke","dataKey","yAxisId","unit","orientation","y","strokeWidth","fill","dot","legendType","content","CustomTooltip","active","payload","avgCostValueObj","find","mainValueObj","rateValueObj","LeccyUseRow","dataPlot","chartView","costCellString","consumption","cost","undefined","x","avgCost","LeccyUseTable","dataPlots","chartType","rateHeader","unitHeader","costHeader","totalUse","totalCost","totalRow","tableLayout","getActlDateRangeArray","startEndArray","viewRange","times","endDate","isBefore","Consumption","chartOptionChanged","stateArr","localStorage","setItem","processAnyViewTypeChange","chartBarPlot","prevNextClicked","newDateRange","btnID","addSubtractTime","dateRangeElement","getItem","chartPlot","useBlocks","React","createRef","xArray","weekdays","months","processAvgView","processActlView","dataPoint","filteredDateRange","d3","useBlock","isSameOrAfter","hours","hour","minute","grouped3","d","blockTime","groupedArr","get","v","grouped","dateFormat","dataBlock","filteredDates","obj","count","use","dateLimit","reverse","leccyUse","interval_start","dates","min","chartTitle","endDateString","BoostStatesCard","hotWaterBoostState","setHotWaterBoostState","heatingBoostState","setHeatingBoostState","sliderValue","setSliderValue","boostClicked","boostType","title","setValue","getBoostStatesCallback","tooltip","tooltipLabel","BoostButton","onClickCallback","hoverActive","setHoverActive","buttonText","buttonLowerText","onMouseEnter","onMouseLeave","Boolean","hostname","match","appEl","boilerStateRows","boilerStateEl","agileRatesEl","agileRatesCardEl","nestCardEl","consumptionTableEl","boostStatesCard","scheduleCardEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6424795e.chunk.js","sourcesContent":["var domain = window.location.host\r\n\r\nif (!domain.startsWith(\"http\")){\r\n  domain = `http://${domain}`\r\n}\r\n\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n\r\nexport function APILookup(method, endpoint, callback, data){\r\n    let jsonData;\r\n    if (data){\r\n      jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `${domain}/api/${endpoint}`\r\n    \r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken){\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The current states request was an error\"}, 400)\r\n    }\r\n    \r\n    xhr.send(jsonData)\r\n\r\n}","import React, {useEffect, useState } from 'react'\r\nimport moment from 'moment';\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function BoilerStateRow(props){\r\n    const {boilerState} = props\r\n    const startTime = moment(boilerState.start_time)\r\n    const endTime = moment(boilerState.end_time)\r\n\r\n    return <tr>\r\n              <td>{startTime.format(\"ddd DD MMM HH:mm\")}</td>\r\n              <td>{endTime.format(\"ddd DD MMM HH:mm\")}</td>\r\n              <td>{endTime.diff(startTime, 'm')}</td>\r\n              <td>{boilerState.hot_water_state ? \"ON\":\"OFF\"}</td>\r\n              <td>{boilerState.heating_state ? \"ON\":\"OFF\"}</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function BoilerStateList(prop){\r\n    const [boilerStatesInit, setBoilerStatesInit] = useState([])\r\n    const {limit} = prop\r\n    \r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setBoilerStatesInit(response)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n        //hide the spinner\r\n        const spinnerEl = document.getElementById('history-table-spinner')\r\n        if (spinnerEl){\r\n          spinnerEl.innerHTML = \"\"\r\n        }\r\n      }\r\n      APILookup('GET', `boilerStates/${limit}`, myCallback, limit)\r\n    }, [])\r\n      \r\n\r\n      return boilerStatesInit.map((boilerState, index)=>{\r\n        return <BoilerStateRow boilerState={boilerState} key={`${index}`}/>\r\n      })\r\n  }","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Switch from \"react-switch\";\r\nimport moment from 'moment';\r\n\r\nimport { APILookup } from '../lookup'\r\nimport { DatePicker } from 'antd';\r\n// import \"../react-datepicker.css\"\r\nconst { RangePicker } = DatePicker;\r\n\r\n\r\nexport class ScheduleCard extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            schedule: [],\r\n            editMode: false,\r\n        }\r\n        this.editScheduleRowsEl = []\r\n        this.editButtonClicked = this.editButtonClicked.bind(this)\r\n        this.finishButtonClicked = this.finishButtonClicked.bind(this)\r\n        this.setEditRowRefs = this.setEditRowRefs.bind(this)\r\n        this.addScheduleClicked = this.addScheduleClicked.bind(this)\r\n    }\r\n\r\n    editButtonClicked(event){\r\n        //when edit button is clicked\r\n        //create empty array to store the ref of each row\r\n        this.editScheduleRowsEl = []\r\n        //turn on edit mode in state\r\n        this.setState({editMode:!this.state.editMode})\r\n    }\r\n\r\n    finishButtonClicked(event){\r\n        //actions for when finish button of edit mode is clicked\r\n        //form empty array to store the dict of each schedule\r\n        var schedule = []\r\n        \r\n        //iterate over each schedule row and verify on off state\r\n        for (var editScheduleRow of this.editScheduleRowsEl){\r\n            const hotWaterState = editScheduleRow.state.hotWaterState\r\n            const heatingState = editScheduleRow.state.heatingState\r\n            //skip over the schedule which has both states turned off\r\n            if (!hotWaterState && !heatingState){\r\n                continue\r\n            }\r\n            //create the schedule object and store the data\r\n            var scheduleObj = {\r\n                start_time: editScheduleRow.state.timeRange[0].utc().format(\"YYYY-MM-DD HH:mm:ssZ\"),\r\n                end_time: editScheduleRow.state.timeRange[1].utc().format(\"YYYY-MM-DD HH:mm:ssZ\"),\r\n                hot_water_state: hotWaterState,\r\n                heating_state: heatingState\r\n            }\r\n            //add the obj to the list\r\n            schedule.push(scheduleObj)\r\n        }\r\n        //push the entire schedule to back-end\r\n        APILookup('POST', 'schedule/set', this.getScheduleCallback, schedule)\r\n        //turn edit mode off\r\n        this.setState({editMode:false})\r\n    }\r\n\r\n    setEditRowRefs(ref){\r\n        this.editScheduleRowsEl.push(ref)\r\n    }\r\n\r\n    addScheduleClicked(event){\r\n        //creating a new schedule object starting at today's 12am\r\n        const newScheduleObj = {start_time: moment().startOf('day'),\r\n                                end_time: moment().startOf('day'),\r\n                                hot_water_state: false,\r\n                                heating_state: false\r\n                            }\r\n        this.setState({schedule: this.state.schedule.concat([newScheduleObj])})\r\n    }\r\n\r\n    getScheduleCallback = (response, status) =>{\r\n        if (status === 200 || status === 201) {\r\n            this.setState({schedule:response})\r\n        } else {\r\n            alert(\"Error in retrieving schedule\")\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        APILookup('GET', 'schedule', this.getScheduleCallback)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title mb-3\">\r\n                    Schedule\r\n                </h4>\r\n                <div>\r\n                    <table className=\"table table-striped\" style={{width:\"100%\"}}>\r\n                        <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Start Time</th>\r\n                            <th>End Time</th>\r\n                            <th>Hot Water</th>\r\n                            <th>Heating</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.editMode \r\n                                ? this.state.schedule.map((schedule, index)=>{\r\n                                    return <ScheduleEditRow schedule={schedule} \r\n                                                            ref={this.setEditRowRefs}\r\n                                                            key={index}/>})\r\n                                : this.state.schedule.map((schedule, index)=>{\r\n                                    return <ScheduleRow schedule={schedule} key={index}/>})}\r\n                        </tbody>\r\n                    </table> \r\n                    {this.state.editMode && \r\n                        <Button className=\"mb-4\"\r\n                                variant=\"info\" onClick={this.addScheduleClicked} block>Add Schedule</Button>}\r\n                </div>{ this.state.editMode \r\n                    ? <Button className=\"float-right\" onClick={this.finishButtonClicked}>Finish</Button>\r\n                    : <Button className=\"float-right\" onClick={this.editButtonClicked}>Edit</Button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction ScheduleRow(props){\r\n    const {schedule} = props\r\n\r\n    const startTime = moment(schedule.start_time)\r\n    const endTime = moment(schedule.end_time)\r\n    return ( \r\n        <tr className={moment().isBetween(startTime, endTime)\r\n            ? \"table-danger\"\r\n            :\"\"}>\r\n            <td>{startTime.format(\"ddd Do HH:mm\")}</td>\r\n            <td>{endTime.format(\"ddd Do HH:mm\")}</td>\r\n            <td>{schedule.hot_water_state?\"ON\":\"OFF\"}</td>\r\n            <td>{schedule.heating_state?\"ON\":\"OFF\"}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nclass ScheduleEditRow extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        const schedule = props.schedule\r\n        this.state = {\r\n            timeRange: [moment(schedule.start_time), moment(schedule.end_time)],\r\n            hotWaterState: schedule.hot_water_state,\r\n            heatingState: schedule.heating_state\r\n        }\r\n        this.stateChanged = this.stateChanged.bind(this)\r\n    }\r\n\r\n    stateChanged(checked, event, id){\r\n        //change the state depending on the type\r\n        if (id.includes(\"heating\")) {\r\n            this.setState({heatingState: checked})\r\n        } else {\r\n            this.setState({hotWaterState: checked})\r\n        }\r\n    }\r\n\r\n    disabledDate(date){\r\n        return date && !date.isBetween(moment().startOf('date'), moment().add(1, 'days').endOf('date'), 'day', \"[]\")\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <tr>\r\n                <td style={{alignContent:\"center\"}} colSpan=\"2\">\r\n                    <RangePicker value={this.state.timeRange} \r\n                                disabledDate={this.disabledDate}\r\n                                format=\"D/M HH:mm:ss\"\r\n                                showTime={true}\r\n                                onChange={(time) => {this.setState({timeRange: time})}}\r\n                                    />\r\n                </td>\r\n                <td>\r\n                    <Switch className=\"react-switch\"\r\n                            id=\"hot-water-state-checkbox\"\r\n                            checked={this.state.hotWaterState} \r\n                            onChange={this.stateChanged}\r\n                            uncheckedIcon={false}\r\n                            checkedIcon={false}\r\n                            onColor=\"#3498DB\"/>\r\n                </td>\r\n                <td>\r\n                    <Switch className=\"react-switch\"\r\n                            id=\"heating-state-checkbox\"\r\n                            checked={this.state.heatingState} \r\n                            onChange={this.stateChanged}\r\n                            uncheckedIcon={false}\r\n                            checkedIcon={false}\r\n                            onColor=\"#3498DB\"/>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}","export function hideSpinner(id){\r\n    const spinnerEl = document.getElementById(id)\r\n    \r\n    if (spinnerEl){\r\n        spinnerEl.innerHTML = \"\"\r\n    }\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {hideSpinner} from '../common'\r\nimport moment from 'moment';\r\n\r\nimport {APILookup} from '../lookup'\r\n\r\nexport function AgileRateRow(props){\r\n    const {agileRate, todaysMin, tmrsMin} = props\r\n    const startTime = moment(agileRate.valid_from)\r\n    const endTime = moment(agileRate.valid_to)\r\n    const rate = agileRate.rate\r\n    const timeNow = moment()\r\n    // var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    var rowColour = \"\", style\r\n    if (todaysMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'info'\r\n    } else if (tmrsMin.indexOf(agileRate.valid_from) > -1){\r\n        rowColour = 'primary'\r\n    } else if (rate > 15){\r\n        rowColour = 'danger'\r\n    } else if (rate < 0){\r\n        rowColour = 'success'\r\n    } else if (timeNow.isAfter(endTime)){\r\n        rowColour = 'secondary'\r\n    } \r\n    else if (timeNow.isBetween(startTime, endTime)){\r\n        rowColour = 'light'\r\n    }\r\n\r\n    //setting font weight\r\n    if (timeNow.isBetween(startTime, endTime)){\r\n        style = {fontSize:'larger', fontWeight:'bold'}\r\n    }\r\n\r\n    return <tr className={`table-${rowColour}`}>\r\n                <td style={style}>\r\n                  {startTime.format(\"ddd DD MMM HH:mm\")}\r\n                </td>\r\n                <td style={style}>{endTime.format(\"ddd DD MMM HH:mm\")}</td>\r\n                <td style={style}>{rate.toFixed(3)}p</td>\r\n            </tr>\r\n}\r\n\r\n\r\nexport function AgileRateList(prop){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) =>{\r\n        if (status === 200) {\r\n            setAgileRatesInit(response.rates)\r\n            setTodaysMin(response.todaysMin)\r\n            setTmrsMin(response.tmrsMin)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n        \r\n        //hide the spinner\r\n        hideSpinner('agile-rates-table-spinner')\r\n      }\r\n      APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return agileRatesInit.map((agileRates, index)=>{\r\n        return <AgileRateRow agileRate={agileRates} \r\n                            todaysMin={todaysMin}\r\n                            tmrsMin={tmrsMin}                    \r\n                            key={`${index}`}/>\r\n    })\r\n  }\r\n\r\nexport function AgileRateCard(props){\r\n    const [agileRatesInit, setAgileRatesInit] = useState([])\r\n    const [todaysMin, setTodaysMin] = useState([])\r\n    const [tmrsMin, setTmrsMin] = useState([])\r\n\r\n    const {type} = props\r\n\r\n    const populateCard = (type) => {\r\n        //don't do anythin if no data has been received\r\n        if (agileRatesInit.length < 1){ return ''}\r\n        \r\n        //setting the min rate time\r\n        var todaysMinRateTime = moment(todaysMin[0])\r\n        var tmrsMinRateTime = moment(tmrsMin[0])\r\n\r\n        var timeNow = moment()\r\n        var currentRate = 9999, nextTwoRates = [9999, 9999]\r\n        for (var i = 0; i < agileRatesInit.length; i++){\r\n            var startTime = moment(agileRatesInit[i].valid_from)\r\n            var endTime = moment(agileRatesInit[i].valid_to)\r\n            //getting the current rate\r\n            if (timeNow.isBetween(startTime, endTime)){\r\n                currentRate = agileRatesInit[i].rate\r\n                var currentValidFrom = moment(agileRatesInit[i].valid_from)\r\n                //storing the next two rates\r\n                if (i < agileRatesInit.length - 1){\r\n                    nextTwoRates[0] = agileRatesInit[i+1].rate\r\n                }\r\n                if (i < agileRatesInit.length - 2){\r\n                    nextTwoRates[1] = agileRatesInit[i+2].rate\r\n                }\r\n            }\r\n\r\n            //getting today's and tmr's min rates\r\n            var todaysMinRate, tmrsMinRate\r\n            if (startTime.isSame(todaysMinRateTime, 'm')){\r\n                todaysMinRate = agileRatesInit[i].rate\r\n            } else if (startTime.isSame(tmrsMinRateTime, 'm')){\r\n                tmrsMinRate = agileRatesInit[i].rate\r\n            }\r\n        }\r\n        \r\n        return ( type === 'homepage' ?\r\n        (<div>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Current</h4>\r\n                    <h5 className=\"lead\">{currentRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        since {currentValidFrom.format(\"HH:mm\")}</span>\r\n                </div>\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Today's Lowest</h4>\r\n                    <h5 className=\"lead\">{typeof(todaysMinRate) === 'number' ? todaysMinRate.toFixed(3): ''}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>\r\n                        at {todaysMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</span>\r\n                </div>\r\n            </div>\r\n            <hr className=\"alert-dark my-4\"></hr>\r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <h4 className=\"display-6\">Next Two</h4>\r\n                    { nextTwoRates[0] !== 9999 && <h5 className=\"lead\">{nextTwoRates[0].toFixed(3)}p</h5>}\r\n                    { nextTwoRates[1] !== 9999 && <h5 className=\"lead\">{nextTwoRates[1].toFixed(3)}p</h5>}\r\n                </div>\r\n                {typeof(tmrsMinRate) === 'number' && <div className='col-6'>\r\n                    <h4 className=\"display-6\">Tomorrow's Lowest</h4>\r\n                    <h5 className=\"lead\">{tmrsMinRate.toFixed(3)}p</h5>\r\n                    <span style={{fontSize:\"95%\"}}>at {tmrsMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</span>\r\n                </div>}\r\n            </div>\r\n        </div>) : (\r\n        <div className=\"row justify-content-center mb-3\">\r\n            <div className=\"col\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Current Rate</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{currentRate.toFixed(3)}p</h3>\r\n                        <h5>since {currentValidFrom.format(\"HH:mm\")}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-titl mb-3\">Today's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{typeof(todaysMinRate) === 'number' ? todaysMinRate.toFixed(3) : ''}p</h3>\r\n                        <h5>at {todaysMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            { typeof(tmrsMinRate) === 'number' &&\r\n            <div className=\"col\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title mb-3\">Tomorrow's Lowest</h5>\r\n                        <h3 className=\"font-weight-bold mb-3\">{typeof(tmrsMinRate) === 'number' ? tmrsMinRate.toFixed(3) : ''}\r\n                            {typeof(tmrsMinRate) === 'number' && `p`}</h3>\r\n                        {typeof(tmrsMinRate) === 'number' && <h5>at {tmrsMin.map((val) => {return moment(val).format(\"HH:mm\")}).join()}</h5>}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </div>)\r\n        )\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                setAgileRatesInit(response.rates)\r\n                setTodaysMin(response.todaysMin)\r\n                setTmrsMin(response.tmrsMin)\r\n            } else {\r\n                alert(\"There was an error\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            hideSpinner('agile-rates-card-spinner')\r\n        }\r\n        APILookup('GET', 'agileRates', myCallback)\r\n    }, [])\r\n\r\n    return populateCard(type)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nfunction CategoryStatesBlock(props){\r\n\r\n    const {controlState, operationState, \r\n                          boostState, cat} = props\r\n    //setting colours depending on boost states\r\n    var colour\r\n    if (boostState || operationState){\r\n        colour = 'danger'\r\n    } else if (controlState){\r\n        colour = 'warning'\r\n    } else{\r\n        colour = 'success'\r\n    }\r\n\r\n    var catText = cat === \"heating\" ? \"Heating\":'Water' \r\n    var controlText\r\n    if(boostState){\r\n        controlText = \"Boost\\nOn\"\r\n    } else if (!controlState){\r\n        controlText = 'Control\\nOff'\r\n    } else if (cat === 'hotWater'){\r\n        controlText = 'Scheduled\\nControl'\r\n    } else {\r\n        controlText = 'Thermostat\\nControl'\r\n    }\r\n\r\n    const buttonOnClickEvent = (event) =>{\r\n        event.preventDefault()\r\n        // remove focus on button\r\n        event.target.blur()\r\n        var data = {'device': cat, 'state': !controlState}\r\n        //callback for then the state change POST method has returned\r\n        const returnCallBack = (response, status) =>{\r\n            if (status === 201){\r\n                APILookup('GET', 'currentStates', populateCurrentStates, {})\r\n            } else {\r\n                alert('State change failed')\r\n            }\r\n        }\r\n\r\n        APILookup('POST', 'currentStates/change', \r\n                            returnCallBack, data)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className={`btn btn-block btn-${colour}`} style={{maxWidth:160, whiteSpace: \"pre-wrap\"}}\r\n                    onClick={buttonOnClickEvent}> \r\n                <h4 class=\"font-weight-bold alert-heading text-center pt-1\">{catText}</h4>\r\n                <hr className={`alert-${colour}`} />\r\n                <h6 className=\"text-center\">{controlText}</h6>\r\n                <hr className={`alert-${colour}`} />\r\n                <OperationStateOnOffText state={operationState} type={0}/>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction OperationStateOnOffText(props){\r\n    const { state, type } = props\r\n    var text = state ? \"ON\" : \"OFF\"\r\n    var Tag = type === 1 ? 'h3' : 'h4'\r\n\r\n    const className = \"font-weight-bold text-center\"\r\n    return <Tag className={className}>{text}</Tag>\r\n}\r\n\r\n\r\nfunction setBoilerBlock(state){\r\n    //change the colour\r\n    var colour = state ? \"danger\" : \"success\"\r\n    const boilerStateEl = document.getElementById(\"boiler-operation-block\")\r\n    boilerStateEl.className = `alert alert-${colour}`\r\n    ReactDOM.render(<OperationStateOnOffText state={state} type={1}/>, \r\n                    document.getElementById(\"boiler-on-off-text\"))\r\n}\r\n\r\n\r\nexport function populateCurrentStates(response, status){\r\n    setBoilerBlock(response.operation[2])\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.hotWater.state} \r\n                                        operationState={response.operation[0]} \r\n                                        boostState={response.control.hotWater.boost} \r\n                                        cat={\"hotWater\"}/>, \r\n                        document.getElementById(\"hotWater-states-block\"));\r\n    ReactDOM.render(<CategoryStatesBlock controlState={response.control.heating.state} \r\n                                        operationState={response.operation[1]} \r\n                                        boostState={false} \r\n                                        cat={\"heating\"}/>, \r\n                        document.getElementById(\"heating-states-block\"));      \r\n  }","import React, {useEffect, useState} from 'react'\r\nimport {APILookup} from '../lookup'\r\n// import InputSpinner from \"react-native-input-spinner\";\r\n\r\nexport function NestCard(props){\r\n    const [ambientTemp, setAmbientTemp] = useState([])\r\n    const [thermostatTemp, setThermostatTemp] = useState([])\r\n\r\n    // const {type} = props\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                // console.log(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                if (\"heatCelsius\" in response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"]){\r\n                    setThermostatTemp(response.traits[\"sdm.devices.traits.ThermostatTemperatureSetpoint\"][\"heatCelsius\"])\r\n                }\r\n                setAmbientTemp(response.traits[\"sdm.devices.traits.Temperature\"][\"ambientTemperatureCelsius\"])\r\n            } else {\r\n                alert(\"Error in retrieving Nest Data\")\r\n            }\r\n          \r\n            //hide the spinner\r\n            \r\n        }\r\n        APILookup('GET', 'googleNest', myCallback)\r\n    }, [])\r\n\r\n    return ( typeof(ambientTemp) === 'number' ?\r\n        <div>\r\n            <h5>Ambient Temp:  {ambientTemp.toFixed(2)} </h5>\r\n            <h5>Thermostat Set Temp: {typeof(thermostatTemp) === 'number' && thermostatTemp.toFixed(2)}</h5>\r\n        </div>\r\n        : \r\n        <div class=\"text-center\">\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveContainer, Bar, Line, \r\n        CartesianGrid, XAxis, YAxis, ComposedChart, \r\n        Legend, Tooltip, ReferenceLine } from 'recharts';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport moment from 'moment';\r\n\r\nimport { chartPlotOptions, chartTypeOptions, chartViewOptions} from './index'\r\n\r\nimport { DatePicker } from 'antd';\r\nconst { RangePicker } = DatePicker;\r\n\r\n\r\nexport function ChartButtonGroup(props) {\r\n    const {btnType, stateVar, onValueChange} = props\r\n    \r\n    var btnOptions\r\n    if (btnType === 'type'){\r\n        btnOptions = chartTypeOptions\r\n    } else if (btnType === 'view'){\r\n        btnOptions = chartViewOptions\r\n    } else if (btnType === 'plot'){\r\n        var options = {}\r\n        for (var [key, value] of Object.entries(chartPlotOptions)){\r\n            if (key !== 'rate' && key !== 'avgCost'){\r\n                options[key] = value\r\n            }\r\n        }\r\n        btnOptions = options\r\n    }\r\n\r\n    const handleChange = (val, event) => {\r\n        const source = event.target;\r\n        //defocus the button\r\n        source.blur()\r\n        //callback to parent component as the state is changed\r\n        onValueChange([btnType, val])\r\n    };\r\n\r\n    return (\r\n      <ToggleButtonGroup type=\"radio\" name=\"options\" size='lg'\r\n                            defaultValue={stateVar} onChange={handleChange}>\r\n          {Object.keys(btnOptions).map((key, idx)=>{\r\n            return <ToggleButton value={key} key={`${idx}`}>{btnOptions[key].label}</ToggleButton>})}\r\n      </ToggleButtonGroup>\r\n    );\r\n}\r\n  \r\n\r\n//combining both the daterangepicker and pre-set buttons\r\nexport class CustomDateRangePicker extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dateRange: props.dateRange,\r\n            preSelection: null\r\n        }\r\n    }\r\n\r\n    //actions for when the dates are manually changed using the picker\r\n    datesChanged = (range) =>{\r\n        this.setState({dateRange:range, preSelection: null})\r\n    }\r\n\r\n    //actions for when the date range buttons were clicked\r\n    buttonDateRangeClicked = (value) =>{\r\n        var dateRange\r\n        if (value === 'day'){\r\n            dateRange = [moment().subtract(1, 'd').set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}), \r\n                            moment().subtract(1, 'd').set({'hour':0, 'minute':0, 'second':0, 'millisecond':0})]\r\n        } else if (value === 'week'){\r\n            //making sure the lower date is not before the dates limit\r\n            dateRange = [moment.max(moment().subtract(8, 'd'), this.props.datesLimit[0]), \r\n                            moment().subtract(1, 'd')]\r\n        } else if (value === 'month'){\r\n            dateRange = [moment.max(moment().subtract({'months':1, 'days':1}), this.props.datesLimit[0]), \r\n                            moment().subtract(1, 'd')]\r\n        } else if (value === 'all'){\r\n            dateRange = this.props.datesLimit\r\n        } \r\n        \r\n        this.setState({dateRange: dateRange, preSelection: value})\r\n    }\r\n\r\n    //update the parent component if any dates change\r\n    componentDidUpdate(prevProps, prevStates) {\r\n        if (prevStates.dateRange !== this.state.dateRange){\r\n            this.props.datesChanged(this.state.dateRange)\r\n        }\r\n    }\r\n\r\n    render(){ \r\n        return (\r\n        <div className=\"row align-items-center\">\r\n            <div className=\"col-6\" align=\"right\">\r\n                <ToggleButtonGroup type=\"radio\" name=\"options\" //size='sm'\r\n                                    value={this.state.preSelection} \r\n                                    onChange={this.buttonDateRangeClicked}>\r\n                    <ToggleButton value={\"all\"}>All<br></br>Time</ToggleButton>\r\n                    <ToggleButton value={\"month\"}>Past<br></br>Month</ToggleButton>\r\n                    <ToggleButton value={\"week\"}>Past<br></br>Week</ToggleButton>\r\n                    <ToggleButton value={\"day\"}>Past<br></br>Day</ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </div>\r\n            <div className=\"col-6 \" align=\"left\">\r\n            <RangePicker \r\n                size=\"large\"\r\n                allowClear={false}\r\n                inputReadOnly={true}\r\n                value={this.state.dateRange}\r\n                onChange={this.datesChanged}\r\n                disabledDate={(current) => {\r\n                    return current && \r\n                        !current.isBetween(this.props.datesLimit[0], this.props.datesLimit[1], '[]')}}\r\n            />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport function LeccyUseChart(prop){\r\n    \r\n    const {data, barPlotOptions } = prop\r\n    \r\n    const chart = ( data ?\r\n    <ResponsiveContainer width=\"100%\" height={500}>\r\n        <ComposedChart data={data}>\r\n            <CartesianGrid stroke=\"#aaaaaaaa\"/>\r\n            <XAxis dataKey=\"x\" />\r\n            <YAxis yAxisId=\"left\" type=\"number\" dataKey={barPlotOptions.key} \r\n                    name={barPlotOptions.label} unit={barPlotOptions.unit} />\r\n            <YAxis yAxisId=\"rate\" orientation=\"right\" type=\"number\" \r\n                    name=\"Rate\" unit=\"p\" />\r\n            <ReferenceLine y={0} yAxisId=\"rate\" stroke=\"#8884d8\" strokeWidth={1.25}/>\r\n            <ReferenceLine y={14.6} yAxisId=\"rate\" stroke=\"#795ae090\" strokeWidth={1}>\r\n                {/* <Label value=\"Normal Rate\" position=\"right\" fill=\"#e05a7750\"/> */}\r\n            </ReferenceLine> \r\n            <Bar yAxisId=\"left\" fill=\"#000000\" name={barPlotOptions.label} \r\n                    dataKey={barPlotOptions.key} stroke=\"#8884d8\" />\r\n            <ReferenceLine y={0} yAxisId=\"left\" stroke=\"white\" strokeWidth={1}/>\r\n            <Line yAxisId=\"rate\" type=\"monotone\" name=\"Rate\" dot={false}\r\n                    dataKey=\"rate\" stroke=\"#555555\" legendType=\"none\" />\r\n            <Line yAxisId=\"rate\" type=\"monotone\" \r\n                    name=\"Average Unit Cost\" dataKey=\"avgCost\" stroke=\"#8884d8\" />\r\n            <Legend />\r\n            <Tooltip content={<CustomTooltip />}/>\r\n        </ComposedChart >\r\n    </ResponsiveContainer>\r\n    : \"\");\r\n    \r\n    return chart\r\n}\r\n\r\n//custom tooltip content\r\nfunction CustomTooltip ({ active, payload, label }) {\r\n    if (active && label && payload) {\r\n        //checking whether each of the info is found\r\n        const avgCostValueObj = payload.find(e => e.dataKey ==='avgCost')\r\n        const mainValueObj = payload.find(e => (e.dataKey !== 'avgCost') && (e.dataKey !== 'rate'))\r\n        const rateValueObj = payload.find(e => e.dataKey ==='rate')\r\n        \r\n        return (\r\n        <div className=\"custom-tooltip\">\r\n            <p className=\"tooltip-x-value\">{`${label}`} </p>\r\n            { mainValueObj  && \r\n                <div className=\"tooltip-value-y\">\r\n                    <p>{`${chartPlotOptions[mainValueObj.dataKey].label}: `} \r\n                        {mainValueObj.value.toFixed(3)}{chartPlotOptions[mainValueObj.dataKey].unit}</p></div>}\r\n            { avgCostValueObj &&\r\n                <div className=\"tooltip-value-avgCost\">\r\n                    <p>{`${chartPlotOptions['avgCost'].label}: `}\r\n                        {avgCostValueObj.value.toFixed(3)}{chartPlotOptions['avgCost'].unit}</p></div>}\r\n            { rateValueObj &&\r\n                <div className=\"tooltip-value-rate\">\r\n                    <p>{`${chartPlotOptions['rate'].label}: `}\r\n                        {rateValueObj.value.toFixed(3)}{chartPlotOptions['rate'].unit}</p></div>}\r\n        </div>\r\n        );\r\n    } else {return \"\"}\r\n}\r\n\r\nfunction LeccyUseRow(props){\r\n    const { dataPlot, chartView } = props\r\n    //setting the display of the cost depending on the chart view type\r\n    //show in £ for week and month view\r\n    var costCellString = \"\"\r\n    \r\n    if ( dataPlot.consumption != null ){\r\n        costCellString = chartView === \"hour\" || chartView === \"day\" \r\n                        ? `${dataPlot.cost.toFixed(2)}p`\r\n                        : `£${(dataPlot.cost/100).toFixed(2)}`\r\n    }\r\n    \r\n    return ( dataPlot.rate !== undefined && dataPlot.rate !== null ? (<tr>\r\n              <td>{dataPlot.x}</td>\r\n              <td>{`${dataPlot.rate.toFixed(3)}p`}</td>\r\n              <td>{dataPlot.consumption != null && dataPlot.consumption.toFixed(3)}</td>\r\n              <td>{costCellString}</td>\r\n              <td>{dataPlot.consumption != null && `${dataPlot.avgCost.toFixed(3)}p`}</td>\r\n            </tr>) : \"\" )\r\n}\r\n\r\n\r\nexport function LeccyUseTable(props){\r\n    const { dataPlots, chartType, chartView } = props\r\n    \r\n    //setting the table headers depending on the chart view and type\r\n    var rateHeader = 'Rate', unitHeader = 'Used (kWh)'\r\n    var costHeader = 'Cost'\r\n    if (chartType === 'avg' && chartView !== 'hour') {\r\n        rateHeader = 'Mean Daily Rate'\r\n        unitHeader = 'Mean Daily Use (kWh)'\r\n        costHeader = 'Mean Daily Cost'\r\n    } else if (chartType === 'avg' && chartView === 'hour'){\r\n        rateHeader = 'Mean Block Rate'\r\n        unitHeader = 'Mean Use (kWh)'\r\n        costHeader = 'Mean Cost'\r\n    } else if (chartType === 'actl' && chartView !== 'hour'){\r\n        rateHeader = 'Mean Block Rate'\r\n    }\r\n\r\n    //calculating the total\r\n    var totalUse = 0, totalCost = 0\r\n    for (var dataPlot of dataPlots){\r\n        totalUse += dataPlot.consumption ? dataPlot.consumption : 0\r\n        totalCost += dataPlot.cost ? dataPlot.cost : 0\r\n    }\r\n    var totalRow = (\r\n        <tr className=\"table-secondary font-weight-bold\" style={{fontSize:\"135%\"}}>\r\n            <td className=\"text-center\" colSpan={2}>Sum of all time periods</td>\r\n            <td>Total Use: {totalUse.toFixed(3)}kWh</td>\r\n            <td>Total Cost: £{(totalCost/100).toFixed(2)}</td>\r\n            <td>Average Unit Cost: {(totalCost/totalUse).toFixed(3)}p</td>\r\n        </tr>\r\n    )\r\n\r\n    return ( dataPlots ?\r\n    <div className=\"row justify-content-center\">\r\n        <div className=\"col-12\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body table-responsive-sm\">\r\n                <table className=\"table table-striped\" \r\n                        style={{\"width\":\"100%\", tableLayout:'fixed'}}>\r\n                    <tbody>\r\n                        {totalRow}\r\n                        <tr className=\"table-secondary font-weight-bold\" style={{fontSize:\"110%\"}}>\r\n                            <th>Period</th>\r\n                            <th>{rateHeader}</th>\r\n                            <th>{unitHeader}</th>\r\n                            <th>{costHeader}</th>\r\n                            <th>Average Unit Cost (per kWh)</th>\r\n                        </tr>\r\n                        {dataPlots.map((dataPlot, index)=>{\r\n                            return <LeccyUseRow dataPlot={dataPlot}\r\n                                                chartView={chartView}\r\n                                                key={`${index}`}/>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div> : \"\"\r\n    )\r\n  }","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\nimport * as d3 from 'd3-array';\r\n\r\nimport { APILookup } from '../lookup'\r\nimport { LeccyUseChart, LeccyUseTable, \r\n            ChartButtonGroup, CustomDateRangePicker } from './sub-components'\r\nimport { chartPlotOptions, chartTypeOptions, chartViewOptions } from './index'\r\n\r\n\r\nfunction getActlDateRangeArray(startEndArray, viewRange){\r\n    var times = []\r\n    //generate the array of day block\r\n    var endDate = moment(startEndArray[1]).endOf(viewRange)\r\n    for (let time = moment(startEndArray[0]); time.isBefore(endDate); time.add(1, viewRange)) {\r\n        times.push(time.format(chartViewOptions[viewRange]['actlStringFormat']));\r\n    }\r\n    return times\r\n}\r\n\r\nexport default class Consumption extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //getting the locally stored date range\r\n        var dateRange = localStorage.getItem('consumptionPage/dateRange')\r\n        var chartType = localStorage.getItem('consumptionPage/chartType')\r\n        var chartView = localStorage.getItem('consumptionPage/chartView')\r\n        var chartPlot = localStorage.getItem('consumptionPage/chartPlot')\r\n\r\n        this.state={\r\n            useBlocks:[],\r\n            dataPlot:[],\r\n            //converting from string back to array of moments\r\n            dateRange: dateRange \r\n                        ? dateRange.split(',').map(val=>moment(val, \"L\")) \r\n                        : [moment(), moment()],\r\n            chartBarPlot: chartPlot ? chartPlot : 'cost',\r\n            datesLimit: [moment(), moment()]\r\n        }\r\n        //getting the locally stored chart type and view\r\n        this.chartView = chartView ? chartView : 'hour'\r\n        this.chartType = chartType ? chartType : 'avg'\r\n\r\n        //create ref to the daterangepicker\r\n        this.dateRangeElement = React.createRef();\r\n\r\n        this.datesChanged = this.datesChanged.bind(this)\r\n    }\r\n    \r\n    chartOptionChanged = (stateArr) => {\r\n        //assigning selection to class variable\r\n        if (stateArr[0] === 'type'){\r\n            this.chartType = stateArr[1]\r\n            localStorage.setItem('consumptionPage/chartType', stateArr[1]);\r\n            this.processAnyViewTypeChange()\r\n        } else if (stateArr[0] === 'view'){\r\n            this.chartView = stateArr[1]\r\n            localStorage.setItem('consumptionPage/chartView', stateArr[1]);\r\n            this.processAnyViewTypeChange()\r\n        } else if (stateArr[0] === 'plot'){\r\n            localStorage.setItem('consumptionPage/chartPlot', stateArr[1]);\r\n            this.setState({chartBarPlot: stateArr[1]})\r\n        }\r\n    }\r\n\r\n    prevNextClicked = (event) => {\r\n        var dateRange = this.state.dateRange\r\n        var newDateRange\r\n        const btnID = event.target.id\r\n        \r\n        //add/subtract the hourly view by 1 day, same as daily view\r\n        const addSubtractTime = this.chartView === 'hour' ? 'days' : this.chartView\r\n        \r\n        if (btnID === \"prev-date-range\"){\r\n            //subtract both start and end date by 1 period\r\n            newDateRange = dateRange.map((date) => moment(date).subtract(1, addSubtractTime))\r\n            //make sure new date range is not before date limit\r\n            if (newDateRange[0].isBefore(this.state.datesLimit[0])){\r\n                newDateRange = dateRange\r\n                // var newMaxDate = moment.min(moment(this.state.datesLimit[0]).add({[addSubtractTime]:1}), this.state.datesLimit[1])\r\n                // newDateRange = [this.state.datesLimit[0], newMaxDate]\r\n            }\r\n        } else {\r\n            newDateRange = dateRange.map((date) => moment(date).add(1, addSubtractTime))\r\n            //make sure new date range is not after date limit\r\n            if (newDateRange[1].isAfter(this.state.datesLimit[1])){\r\n                newDateRange = dateRange\r\n                // var newMinDate = moment.max(moment(this.state.datesLimit[1]).subtract({[addSubtractTime]:1}), this.state.datesLimit[0])\r\n                // newDateRange = [newMinDate, this.state.datesLimit[1]]\r\n            }\r\n            // console.log(newDateRange)\r\n        }\r\n        \r\n        this.dateRangeElement.current.datesChanged(newDateRange)\r\n    }\r\n\r\n    //for when the dates in date range picker is changed, manually or using pre-set buttons\r\n    datesChanged = (value) => {\r\n        if (value){\r\n            // this.dateRange = value\r\n            localStorage.setItem('consumptionPage/dateRange', \r\n                        value.map((val) => val.format(\"L\")).join(','))\r\n            this.setState({dateRange:value}, this.processAnyViewTypeChange)\r\n        }\r\n    }\r\n\r\n    processAnyViewTypeChange(){\r\n        const chartView = this.chartView\r\n        //getting the array of time to plot\r\n        var xArray = []\r\n        if (this.chartType === 'avg'){\r\n            if (chartView === 'day'){\r\n                xArray = moment.weekdays()\r\n            } else if (chartView === 'week'){\r\n                xArray = getActlDateRangeArray(this.state.dateRange, chartView)\r\n            } else if (chartView === 'month'){\r\n                xArray = moment.months()\r\n            }\r\n        } else {\r\n            if (chartView !== 'hour'){\r\n                xArray = getActlDateRangeArray(this.state.dateRange, chartView)\r\n            }\r\n        }\r\n        \r\n        var data = xArray.map((time) => {return {x:time}})\r\n\r\n        if (this.chartType === 'avg'){\r\n            data = this.processAvgView(data)\r\n        } else {\r\n            data = this.processActlView(data)\r\n        }\r\n\r\n        //calculating the average cost per unit\r\n        for (var dataPoint of data){\r\n            dataPoint.avgCost = dataPoint.consumption >= 0 ? dataPoint.cost/dataPoint.consumption : null\r\n        }\r\n\r\n        //assigning the data back to plot\r\n        this.setState({dataPlot:data})\r\n    }\r\n\r\n    processAvgView(data){\r\n        var filteredDateRange\r\n        if (this.chartView === 'hour'){\r\n            //filter useBlocks to be within selected date range\r\n            filteredDateRange = d3.filter(this.state.useBlocks,\r\n                    (useBlock) => useBlock.time.isSameOrAfter(this.state.dateRange[0]) &&\r\n                                  useBlock.time.isBefore(this.state.dateRange[1].endOf('day')))\r\n\r\n            //forming the array of time with 30min block\r\n            var hours = []\r\n            //generate the array of 30min block\r\n            for (let hour = 0; hour < 24; hour++) {\r\n                hours.push(moment({ hour }).format(chartViewOptions['hour']['avgStringFormat']));\r\n                hours.push(moment({ hour, minute: 30}).format(chartViewOptions['hour']['avgStringFormat']));\r\n            }\r\n\r\n            //group them into half hour block\r\n            var grouped3 = d3.group(filteredDateRange, d => d.time.format(\r\n                            chartViewOptions[this.chartView]['avgStringFormat']))\r\n                            \r\n            data = hours.map((blockTime) => {\r\n                var groupedArr = grouped3.get(blockTime)\r\n                if (!groupedArr){return {x:blockTime, rate:null, consumption:null, cost:null}}\r\n                return { x:blockTime, \r\n                    rate: d3.mean(groupedArr, v => v.rate),\r\n                    consumption: d3.mean(groupedArr, val => val.consumption),\r\n                    cost: d3.mean(groupedArr, val => val.rate*val.consumption)\r\n                }\r\n            })\r\n        }\r\n        else { //for this.chartView === day/week/month \r\n            //filter useBlocks to be within selected date range\r\n            filteredDateRange = d3.filter(this.state.useBlocks,\r\n                    (useBlock) => useBlock.time.isSameOrAfter(this.state.dateRange[0]) &&\r\n                                  useBlock.time.isBefore(this.state.dateRange[1].endOf(this.chartView)))\r\n\r\n            //group the useblocks into dates\r\n            var grouped = d3.groups(filteredDateRange, d => d.time.format(\"L\"))\r\n            //turn the grouped array into sum of each day\r\n            grouped = grouped.map(\r\n                (val) => { \r\n                    return {\r\n                        'x': val[0], \r\n                        //for rate, take the mean of each day\r\n                        'rate': d3.mean(val[1], v => v.rate),\r\n                        'use': d3.sum(val[1], v => v.consumption),\r\n                        'cost': d3.sum(val[1], v => v.consumption >= 0 ? v.consumption * v.rate : null),\r\n                        //store the count for the day so in the next step whether to calc mean or not\r\n                        'count': d3.count(val[1], d => d.consumption)\r\n                    }\r\n                } \r\n            )\r\n            \r\n            var dateFormat = chartViewOptions[this.chartView]['avgStringFormat']\r\n            for (var dataBlock of data){\r\n                //filtering the dates which match the day of week/day in month\r\n                var filteredDates = d3.filter(grouped, obj => moment(obj.x, \"L\").format(dateFormat) === dataBlock.x)\r\n                //storing different names for week view\r\n                if (this.chartView === 'week'){\r\n                    dataBlock.x = `${moment(dataBlock.x, dateFormat).startOf('week').format(\"DD\")\r\n                                    }-${moment(dataBlock.x, dateFormat).endOf('week').format(\"DD MMM YYYY\")}`\r\n                }\r\n                //only return a value if that day has more than 45 blocks of consumption defined\r\n                dataBlock.rate = d3.mean(filteredDates, val => val.count > 45 ? val.rate: null)\r\n                dataBlock.consumption = d3.mean(filteredDates, val => val.count > 45 ? val.use: null)\r\n                dataBlock.cost = d3.mean(filteredDates, val => val.count > 45 ? val.cost: null)\r\n            }\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    processActlView(data){\r\n        if (this.chartView === 'hour'){\r\n            //getting the range of dates to filter\r\n            var startTime = moment(this.state.dateRange[0])\r\n            var endTime = moment(this.state.dateRange[1]).set({'hour':0, 'minutes':0, 'seconds':0}).add(1, 'd')\r\n            //set a 10 day limit to the view\r\n            var dateLimit = moment(startTime).add(11, 'd')\r\n            var filteredBlocks = d3.filter(this.state.useBlocks, \r\n                            (val) => val.time.isBetween(\r\n                                startTime, endTime, 'minute', \"[)\") && val.time.isBefore(dateLimit))\r\n            //turning the useBlocks into array of dicts for plotting\r\n            data = filteredBlocks.map((obj) => {\r\n                return {x:obj.time.format(\"DD MMM HH:mm\"),\r\n                        rate: obj.rate,\r\n                        consumption: obj.consumption,\r\n                        cost: obj.consumption >= 0 ? obj.rate*obj.consumption: null}\r\n                })\r\n            data.reverse()\r\n        }\r\n        else { //for this.chartView === day/week/month \r\n            const dateFormat = chartViewOptions[this.chartView]['actlStringFormat']\r\n\r\n            //group the useblocks into dates\r\n            var grouped = d3.groups(this.state.useBlocks, d => d.time.format(dateFormat))\r\n            //turn the grouped array into sum of each day\r\n            grouped = grouped.map(\r\n                (val) => { \r\n                    return {\r\n                        'x': val[0], \r\n                        //for rate, take the mean of each day\r\n                        'rate': d3.mean(val[1], v => v.rate),\r\n                        'use': d3.sum(val[1], v => v.consumption),\r\n                        'cost': d3.sum(val[1], v => v.consumption >= 0 ? v.consumption * v.rate : null)\r\n                    }\r\n                } \r\n            )\r\n            \r\n            for (var dataBlock of data){\r\n                //filtering the dates which match the day of week/day in month\r\n                var filteredDates = d3.filter(grouped, obj => obj.x === dataBlock.x)\r\n                //storing different names for week view\r\n                if (this.chartView === 'week'){\r\n                    //use locale week format (week starts on user chosen day)\r\n                    dataBlock.x = `${moment(dataBlock.x, dateFormat).startOf('week').format(\"DD\")\r\n                                    }-${moment(dataBlock.x, dateFormat).endOf('week').format(\"DD MMM YYYY\")}`\r\n                }\r\n                dataBlock.rate = d3.mean(filteredDates, val => val.rate)\r\n                dataBlock.consumption = d3.sum(filteredDates, val => val.use)\r\n                dataBlock.cost = d3.sum(filteredDates, val => val.cost)\r\n            }\r\n        }\r\n        \r\n        return data\r\n    }\r\n\r\n    //callback for when the use history has been loaded\r\n    componentDidMount(){\r\n        const myCallback = (response, status) =>{\r\n            if (status === 200) {\r\n                var leccyUse = response.leccyUse\r\n                leccyUse = leccyUse.map((val) => {return {\"time\":moment(val.interval_start), \r\n                                \"rate\":val.rate, \"consumption\":val.consumption}})\r\n                this.setState({useBlocks:leccyUse}, \r\n                                this.processAnyViewTypeChange)\r\n                //calculating the max and min date\r\n                var dates = leccyUse.map((val) => {return val.time})\r\n                this.setState({datesLimit: [moment.min(dates).set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}).subtract(1, 'd'), \r\n                                            moment.max(dates).set({'hour':0, 'minute':0, 'second':0, 'millisecond':0}).add(1, 'd')]})\r\n          } else {\r\n              alert(\"There was an error\")\r\n          }\r\n        }\r\n        //api call to retrieve the history\r\n        APILookup('GET', `consumptionHistory`, myCallback)\r\n    }\r\n    \r\n    render(){\r\n        //form the chart title\r\n        if (this.state.dataPlot.length > 0){\r\n            var chartTitle = `${chartTypeOptions[this.chartType].label} Usage `\r\n            const dateFormat = 'DD MMM YYYY'\r\n            if (this.state.dateRange[0].format(\"L\") === this.state.dateRange[1].format(\"L\")){\r\n                chartTitle += `on ${this.state.dateRange[0].format(dateFormat)}`\r\n            } else {\r\n                if (this.chartType === 'actl' && this.chartView === 'hour'){\r\n                    var endDateString = moment(this.state.dataPlot[this.state.dataPlot.length - 1].x, \r\n                        chartViewOptions['hour']['actlStringFormat']).format(dateFormat)\r\n                    chartTitle += \r\n                            `from ${this.state.dateRange[0].format(dateFormat)} to \r\n                                ${endDateString}`\r\n                } else {\r\n                    chartTitle += \r\n                            `from ${this.state.dateRange[0].format(dateFormat)} to \r\n                                ${this.state.dateRange[1].format(dateFormat)}`\r\n                }\r\n            }\r\n        }\r\n\r\n        return ( this.state.dataPlot.length > 0 ?\r\n        (<div>\r\n            <div className=\"row my-3 mx-4\">\r\n                <div className=\"col-2\">\r\n                    <Button className=\"btn btn-primary btn-arrow-left\" id=\"prev-date-range\"\r\n                            onClick={this.prevNextClicked}>\r\n                        Previous</Button>\r\n                </div>\r\n                <div className=\"col-8 text-center\" align='center'>\r\n                    <h4 className=\"font-weight-bold\">{chartTitle}</h4>\r\n                </div>\r\n                <div className=\"col-2\" align=\"right\">\r\n                    <Button className=\"btn btn-primary btn-arrow-right\" id=\"next-date-range\"\r\n                            onClick={this.prevNextClicked}>\r\n                        Next</Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mb-3\">\r\n                <LeccyUseChart data={this.state.dataPlot}\r\n                                barPlotOptions={chartPlotOptions[this.state.chartBarPlot]}\r\n                                chartView={this.chartView}/>\r\n            </div>\r\n            <div className=\"row justify-content-center my-3\">\r\n                <div className=\"col-lg-2 col-md-4 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'type'} stateVar={this.chartType} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-4 col-md-6 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'view'} stateVar={this.chartView} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-2 col-md-4 my-1\" align=\"center\">\r\n                    <ChartButtonGroup btnType={'plot'} stateVar={this.state.chartBarPlot} \r\n                                        onValueChange={this.chartOptionChanged}/>\r\n                </div>\r\n                <div className=\"col-lg-4 col-md-8 my-1\" align=\"center\">\r\n                    <CustomDateRangePicker ref={this.dateRangeElement} \r\n                                            datesLimit={this.state.datesLimit}\r\n                                            dateRange={this.state.dateRange}\r\n                                            datesChanged={this.datesChanged}/>\r\n                </div>\r\n            </div>\r\n            <LeccyUseTable dataPlots={this.state.dataPlot} \r\n                            chartType={this.chartType}\r\n                            chartView={this.chartView}/>\r\n        </div>) :(\r\n            <div className=\"text-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>)\r\n        )\r\n    }\r\n}","import Consumption from './components'\r\n\r\nexport default Consumption\r\n\r\nexport const chartPlotOptions = {\r\n    'consumption': {\"key\":\"consumption\", 'label': 'Consumption', \"unit\":\"kWh\"},\r\n    \"cost\": {\"key\":\"cost\", 'label': 'Cost', \"unit\":\"p\"},\r\n    \"rate\": {\"key\":\"rate\", 'label': 'Rate', \"unit\":\"p\"},\r\n    \"avgCost\": {\"key\":\"avgCost\", 'label': 'Average Unit Cost', \"unit\":\"p/kWh\"}\r\n}\r\n\r\nexport const chartTypeOptions = {\r\n    'avg': {'label': 'Average'},\r\n    \"actl\": { 'label': 'Actual'}\r\n}\r\n\r\nexport const chartViewOptions = {\r\n    \"hour\": {'label': 'Hourly', 'avgStringFormat': \"HH:mm\", 'actlStringFormat': \"DD MMM HH:mm\"},\r\n    \"day\": {'label': 'Daily', \"avgStringFormat\": \"dddd\", 'actlStringFormat': \"YYYY-MM-DD\"},\r\n    \"week\": {'label': 'Weekly', \"avgStringFormat\": \"ww YYYY\", 'actlStringFormat': \"ww YYYY\"},\r\n    \"month\": {'label': 'Monthly', \"avgStringFormat\": \"MMMM\", 'actlStringFormat': \"MMM YYYY\"}\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport moment from 'moment';\r\n\r\nimport {hideSpinner} from '../common'\r\nimport { APILookup } from '../lookup'\r\n\r\n\r\nexport function BoostStatesCard(props){\r\n    const [hotWaterBoostState, setHotWaterBoostState] = useState([])\r\n    const [heatingBoostState, setHeatingBoostState] = useState([])\r\n    const [sliderValue, setSliderValue] = useState(20); \r\n\r\n    const sliderOnChange = (event) => {\r\n        setSliderValue(event.target.value)\r\n    }    \r\n    const sliderTooltip = (value) => {\r\n        return `${value}mins`\r\n    }\r\n    const boostClicked = (event) => {\r\n        //defocus the button\r\n        event.target.blur()\r\n        //get the button click and the boost type\r\n        const boostType = event.target.title\r\n        //turn the state to opposite\r\n        const setValue = boostType === 'hotWater' ? \r\n                        !hotWaterBoostState.boost                \r\n                        : !heatingBoostState.boost\r\n\r\n        const postBoostData = { 'boost': boostType,\r\n                                \"value\": setValue,\r\n                                'duration': sliderValue}\r\n\r\n        APILookup('POST', 'boost/set', getBoostStatesCallback, postBoostData)\r\n    }\r\n\r\n    const getBoostStatesCallback = (response, status) =>{\r\n        if (status === 200 || status === 201) {\r\n            setHotWaterBoostState(response.hotWater)\r\n            setHeatingBoostState(response.heating)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n      \r\n        //hide the spinner\r\n        hideSpinner('boost-states-card-spinner')\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        APILookup('GET', 'boost', getBoostStatesCallback)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mx-5\">\r\n                <RangeSlider value={sliderValue} onChange={sliderOnChange} \r\n                                min={20} max={100} variant='primary' size='lg'\r\n                                tooltip='on' tooltipLabel={sliderTooltip}/>\r\n            </div>\r\n            <div className=\"row justify-content-center mt-5 mx-3\">\r\n                <div className='col-6' align=\"center\">\r\n                    <BoostButton value=\"hotWater\" onClickCallback={boostClicked} \r\n                                    boostState={hotWaterBoostState}/>\r\n                </div>\r\n                <div className='col-6' align=\"center\">\r\n                    <BoostButton value=\"heating\" onClickCallback={boostClicked} \r\n                                    boostState={heatingBoostState}/>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction BoostButton(props){\r\n    const {value, onClickCallback, boostState} = props\r\n    const [ hoverActive, setHoverActive ] = useState(false)\r\n    \r\n    const hoverIn = (event) => {\r\n        setHoverActive(true)\r\n    }\r\n    const hoverOut = (event) => {\r\n        setHoverActive(false)\r\n    }\r\n\r\n    var buttonText = value === 'hotWater' ? \"Hot Water\" : \"Heating\"\r\n    const endTime = moment(boostState.endTime)\r\n\r\n    var buttonLowerText = hoverActive ? \r\n        <h5 title={value}>Stop<br/>Boost</h5>\r\n        :\r\n        <h5 className=\"text-center\" title={value}>\r\n            Boosting till {endTime.format(\"HH:mm\")}<br/>\r\n            ({`${endTime.diff(moment(), 'm')}min${endTime.diff(moment(), 'm')>1?'s':''} remaining`})\r\n        </h5>\r\n\r\n\r\n    return ( boostState.boost ?\r\n        <Button size='lg' block variant=\"danger\"\r\n                onClick={onClickCallback} \r\n                title={value}\r\n                onMouseEnter={hoverIn}\r\n                onMouseLeave={hoverOut}>\r\n                <h5 className=\"font-weight-bold alert-heading text-center pt-1\" title={value}>\r\n                    {buttonText} \r\n                </h5>\r\n                <hr className=\"alert-danger\" />\r\n                {buttonLowerText}\r\n        </Button>\r\n        : \r\n        <Button size='lg' block onClick={onClickCallback} title={value}>\r\n            <h5 className=\"font-weight-bold alert-heading text-center pt-1\" title={value}>\r\n                {buttonText} \r\n            </h5>\r\n            <hr className=\"alert-primary\" />\r\n            <h5 title={value}>Boost</h5>\r\n        </Button>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BoilerStateList } from './boilerStates'\nimport { ScheduleCard } from './schedule'\nimport { AgileRateCard, AgileRateList } from './agileRates'\nimport { populateCurrentStates } from './currentStates';\nimport { APILookup } from './lookup'\nimport { NestCard } from './googleNest'\nimport Consumption from './consumptionHistory'\nimport { BoostStatesCard } from './boostFunctions'\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./main.css\"\nimport \"./darkly.min.css\"\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<ScheduleCard />, appEl);\n}\n\nconst boilerStateRows = document.getElementById('boilerStateRows')\nif (boilerStateRows){\n  ReactDOM.render(<BoilerStateList limit={0}/>, boilerStateRows);\n  \n}\n\nconst boilerStateEl = document.getElementById('boilerStateCard')\nif (boilerStateEl){\n  ReactDOM.render(<BoilerStateList limit={5}/>, boilerStateEl);\n}\n\nconst agileRatesEl = document.getElementById('agileRateTable')\nif (agileRatesEl){\n  ReactDOM.render(<AgileRateList />, agileRatesEl);\n}\n\nvar agileRatesCardEl = document.getElementById('agile-rates-card')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'homepage'}/>, agileRatesCardEl);\n}\nagileRatesCardEl = document.getElementById('agile-rates-page-cards')\nif (agileRatesCardEl){\n    ReactDOM.render(<AgileRateCard type={'top'}/>, agileRatesCardEl);\n}\nconst nestCardEl = document.getElementById('nest-card-content')\nif (nestCardEl){\n    ReactDOM.render(<NestCard />, nestCardEl);\n}\n\nconst currentStatesEl = document.getElementById('current-states-card-body')\nif (currentStatesEl){\n    APILookup('GET', 'currentStates', populateCurrentStates, {})\n}\n\nconst consumptionTableEl = document.getElementById('consumption-page')\nif (consumptionTableEl){\n    ReactDOM.render(<Consumption />, consumptionTableEl);\n}\n\nconst boostStatesCard = document.getElementById('boost-states-card-content')\nif (boostStatesCard){\n    ReactDOM.render(<BoostStatesCard />, boostStatesCard);\n}\n\nconst scheduleCardEl = document.getElementById('hot-water-schedule-card')\nif (scheduleCardEl){\n    ReactDOM.render(<ScheduleCard />, scheduleCardEl);\n}\n// const chartEl = document.getElementById('consumption-page-chart')\n// if (chartEl){\n//     ReactDOM.render(<LeccyUseChart />, chartEl);\n// }\n\n// const currentStatesEl = document.getElementById('current-states-card-body')\n// if (boilerStateEl){\n//   ReactDOM.render(<CurrentStatesCard />, currentStatesEl);\n// }\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}